using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.Threading;
#pragma warning disable 0108
namespace SprCs {
    public partial class PHConstraintEngineDesc : CsObject {
	public PHConstraintEngineDesc() { _thisArray[0] = SprExport.Spr_new_PHConstraintEngineDesc(); _flag = true; }
	public PHConstraintEngineDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHConstraintEngineDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHConstraintEngineDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHConstraintEngineDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHConstraintEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHConstraintEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHConstraintEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHConstraintEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHConstraintEngineDesc() { if (_flag) { SprExport.Spr_delete_PHConstraintEngineDesc(_thisArray[0]); _flag = false; } }
	public int method {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_method(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_method(_thisArray[0], value); }
	}
	public int numIter {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_numIter(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_numIter(_thisArray[0], value); }
	}
	public int numIterCorrection {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_numIterCorrection(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_numIterCorrection(_thisArray[0], value); }
	}
	public int numIterContactCorrection {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_numIterContactCorrection(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_numIterContactCorrection(_thisArray[0], value); }
	}
	public double velCorrectionRate {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_velCorrectionRate(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_velCorrectionRate(_thisArray[0], value); }
	}
	public double posCorrectionRate {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_posCorrectionRate(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_posCorrectionRate(_thisArray[0], value); }
	}
	public double contactCorrectionRate {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_contactCorrectionRate(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_contactCorrectionRate(_thisArray[0], value); }
	}
	public double shrinkRate {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_shrinkRate(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_shrinkRate(_thisArray[0], value); }
	}
	public double shrinkRateCorrection {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_shrinkRateCorrection(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_shrinkRateCorrection(_thisArray[0], value); }
	}
	public double freezeThreshold {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_freezeThreshold(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_freezeThreshold(_thisArray[0], value); }
	}
	public double accelSOR {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_accelSOR(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_accelSOR(_thisArray[0], value); }
	}
	public double dfEps {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_dfEps(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_dfEps(_thisArray[0], value); }
	}
	public double regularization {
	    get { return SprExport.Spr_PHConstraintEngineDesc_get_regularization(_thisArray[0]); }
	    set { SprExport.Spr_PHConstraintEngineDesc_set_regularization(_thisArray[0], value); }
	}
	public bool bSaveConstraints {
	    get {
	        byte ret = (byte) SprExport.Spr_PHConstraintEngineDesc_get_bSaveConstraints(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHConstraintEngineDesc_set_bSaveConstraints(_thisArray[0], (char) val);
	    }
	}
	public bool bUpdateAllState {
	    get {
	        byte ret = (byte) SprExport.Spr_PHConstraintEngineDesc_get_bUpdateAllState(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHConstraintEngineDesc_set_bUpdateAllState(_thisArray[0], (char) val);
	    }
	}
	public bool bUseContactSurface {
	    get {
	        byte ret = (byte) SprExport.Spr_PHConstraintEngineDesc_get_bUseContactSurface(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHConstraintEngineDesc_set_bUseContactSurface(_thisArray[0], (char) val);
	    }
	}
	public bool bReport {
	    get {
	        byte ret = (byte) SprExport.Spr_PHConstraintEngineDesc_get_bReport(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHConstraintEngineDesc_set_bReport(_thisArray[0], (char) val);
	    }
	}
    }
    [System.Serializable]
    public class PHConstraintEngineDescStruct : CsObject {
        public PHConstraintEngineDescStruct() {
            PHConstraintEngineDesc desc = new PHConstraintEngineDesc();
            ApplyFrom(desc, false);
        }
	public int method;
	public int numIter;
	public int numIterCorrection;
	public int numIterContactCorrection;
	public double velCorrectionRate;
	public double posCorrectionRate;
	public double contactCorrectionRate;
	public double shrinkRate;
	public double shrinkRateCorrection;
	public double freezeThreshold;
	public double accelSOR;
	public double dfEps;
	public double regularization;
	public bool bSaveConstraints;
	public bool bUpdateAllState;
	public bool bUseContactSurface;
	public bool bReport;
	public void ApplyTo(PHConstraintEngineDesc r, bool apply_to_base_class = false) {
		r.method = method;
		r.numIter = numIter;
		r.numIterCorrection = numIterCorrection;
		r.numIterContactCorrection = numIterContactCorrection;
		r.velCorrectionRate = velCorrectionRate;
		r.posCorrectionRate = posCorrectionRate;
		r.contactCorrectionRate = contactCorrectionRate;
		r.shrinkRate = shrinkRate;
		r.shrinkRateCorrection = shrinkRateCorrection;
		r.freezeThreshold = freezeThreshold;
		r.accelSOR = accelSOR;
		r.dfEps = dfEps;
		r.regularization = regularization;
		r.bSaveConstraints = bSaveConstraints;
		r.bUpdateAllState = bUpdateAllState;
		r.bUseContactSurface = bUseContactSurface;
		r.bReport = bReport;
	}
	public void ApplyFrom(PHConstraintEngineDesc r, bool apply_to_base_class = false) {
		method = r.method;
		numIter = r.numIter;
		numIterCorrection = r.numIterCorrection;
		numIterContactCorrection = r.numIterContactCorrection;
		velCorrectionRate = r.velCorrectionRate;
		posCorrectionRate = r.posCorrectionRate;
		contactCorrectionRate = r.contactCorrectionRate;
		shrinkRate = r.shrinkRate;
		shrinkRateCorrection = r.shrinkRateCorrection;
		freezeThreshold = r.freezeThreshold;
		accelSOR = r.accelSOR;
		dfEps = r.dfEps;
		regularization = r.regularization;
		bSaveConstraints = r.bSaveConstraints;
		bUpdateAllState = r.bUpdateAllState;
		bUseContactSurface = r.bUseContactSurface;
		bReport = r.bReport;
	}
	public static implicit operator PHConstraintEngineDesc(PHConstraintEngineDescStruct m) {
	    PHConstraintEngineDesc r = new PHConstraintEngineDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHConstraintEngineDescStruct(PHConstraintEngineDesc r) {
	    PHConstraintEngineDescStruct m = new PHConstraintEngineDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKEngineDesc : CsObject {
	public PHIKEngineDesc() { _thisArray[0] = SprExport.Spr_new_PHIKEngineDesc(); _flag = true; }
	public PHIKEngineDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKEngineDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKEngineDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKEngineDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKEngineDesc() { if (_flag) { SprExport.Spr_delete_PHIKEngineDesc(_thisArray[0]); _flag = false; } }
	public ulong numIter {
	    get { return SprExport.Spr_PHIKEngineDesc_get_numIter(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_numIter(_thisArray[0], value); }
	}
	public double maxVel {
	    get { return SprExport.Spr_PHIKEngineDesc_get_maxVel(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_maxVel(_thisArray[0], value); }
	}
	public double maxAngVel {
	    get { return SprExport.Spr_PHIKEngineDesc_get_maxAngVel(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_maxAngVel(_thisArray[0], value); }
	}
	public double maxActVel {
	    get { return SprExport.Spr_PHIKEngineDesc_get_maxActVel(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_maxActVel(_thisArray[0], value); }
	}
	public double regularizeParam {
	    get { return SprExport.Spr_PHIKEngineDesc_get_regularizeParam(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_regularizeParam(_thisArray[0], value); }
	}
	public double regularizeParam2 {
	    get { return SprExport.Spr_PHIKEngineDesc_get_regularizeParam2(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_regularizeParam2(_thisArray[0], value); }
	}
	public int regularizeMode {
	    get { return SprExport.Spr_PHIKEngineDesc_get_regularizeMode(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_regularizeMode(_thisArray[0], value); }
	}
	public int iterGaussSeidel {
	    get { return SprExport.Spr_PHIKEngineDesc_get_iterGaussSeidel(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_iterGaussSeidel(_thisArray[0], value); }
	}
	public Mode solverMode {
	    get { return (Mode) SprExport.Spr_PHIKEngineDesc_get_solverMode(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEngineDesc_set_solverMode(_thisArray[0], (int) value); }
	}
	public enum Mode : int {
	    SVD = 0, QR = SVD + 1, LM = QR + 1
	}
    }
    [System.Serializable]
    public class PHIKEngineDescStruct : CsObject {
        public PHIKEngineDescStruct() {
            PHIKEngineDesc desc = new PHIKEngineDesc();
            ApplyFrom(desc, false);
        }
	public ulong numIter;
	public double maxVel;
	public double maxAngVel;
	public double maxActVel;
	public double regularizeParam;
	public double regularizeParam2;
	public int regularizeMode;
	public int iterGaussSeidel;
	public PHIKEngineDesc.Mode solverMode;
	public void ApplyTo(PHIKEngineDesc r, bool apply_to_base_class = false) {
		r.numIter = numIter;
		r.maxVel = maxVel;
		r.maxAngVel = maxAngVel;
		r.maxActVel = maxActVel;
		r.regularizeParam = regularizeParam;
		r.regularizeParam2 = regularizeParam2;
		r.regularizeMode = regularizeMode;
		r.iterGaussSeidel = iterGaussSeidel;
		r.solverMode = solverMode;
	}
	public void ApplyFrom(PHIKEngineDesc r, bool apply_to_base_class = false) {
		numIter = r.numIter;
		maxVel = r.maxVel;
		maxAngVel = r.maxAngVel;
		maxActVel = r.maxActVel;
		regularizeParam = r.regularizeParam;
		regularizeParam2 = r.regularizeParam2;
		regularizeMode = r.regularizeMode;
		iterGaussSeidel = r.iterGaussSeidel;
		solverMode = r.solverMode;
	}
	public static implicit operator PHIKEngineDesc(PHIKEngineDescStruct m) {
	    PHIKEngineDesc r = new PHIKEngineDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKEngineDescStruct(PHIKEngineDesc r) {
	    PHIKEngineDescStruct m = new PHIKEngineDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemMeshState : CsObject {
	public PHFemMeshState() { _thisArray[0] = SprExport.Spr_new_PHFemMeshState(); _flag = true; }
	public PHFemMeshState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemMeshState() { if (_flag) { SprExport.Spr_delete_PHFemMeshState(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHFemMeshStateStruct : CsObject {
        public PHFemMeshStateStruct() {
            PHFemMeshState desc = new PHFemMeshState();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHFemMeshState r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHFemMeshState r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHFemMeshState(PHFemMeshStateStruct m) {
	    PHFemMeshState r = new PHFemMeshState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemMeshStateStruct(PHFemMeshState r) {
	    PHFemMeshStateStruct m = new PHFemMeshStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemMeshDesc : PHFemMeshState {
	public PHFemMeshDesc() { _thisArray[0] = SprExport.Spr_new_PHFemMeshDesc(); _flag = true; }
	public PHFemMeshDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemMeshDesc() { if (_flag) { SprExport.Spr_delete_PHFemMeshDesc(_thisArray[0]); _flag = false; } }
        public vectorwrapper_Vec3d vertices {
            get { return new vectorwrapper_Vec3d(SprExport.Spr_PHFemMeshDesc_addr_vertices(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshDesc_set_vertices(_thisArray[0], value); }
        }
        public vectorwrapper_int tets {
            get { return new vectorwrapper_int(SprExport.Spr_PHFemMeshDesc_addr_tets(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshDesc_set_tets(_thisArray[0], value); }
        }
        public vectorwrapper_int faces {
            get { return new vectorwrapper_int(SprExport.Spr_PHFemMeshDesc_addr_faces(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshDesc_set_faces(_thisArray[0], value); }
        }
	public void Init() {
	    SprExport.Spr_PHFemMeshDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHFemMeshDescStruct : PHFemMeshStateStruct {
        public PHFemMeshDescStruct() {
            PHFemMeshDesc desc = new PHFemMeshDesc();
            ApplyFrom(desc, false);
        }
	public vectorwrapper_Vec3d vertices;
	public vectorwrapper_int tets;
	public vectorwrapper_int faces;
	public void ApplyTo(PHFemMeshDesc r, bool apply_to_base_class = false) {
		r.vertices = vertices;
		r.tets = tets;
		r.faces = faces;
	}
	public void ApplyFrom(PHFemMeshDesc r, bool apply_to_base_class = false) {
		vertices = r.vertices;
		tets = r.tets;
		faces = r.faces;
	}
	public static implicit operator PHFemMeshDesc(PHFemMeshDescStruct m) {
	    PHFemMeshDesc r = new PHFemMeshDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemMeshDescStruct(PHFemMeshDesc r) {
	    PHFemMeshDescStruct m = new PHFemMeshDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemMeshThermoDesc : PHFemMeshDesc {
	public PHFemMeshThermoDesc() { _thisArray[0] = SprExport.Spr_new_PHFemMeshThermoDesc(); _flag = true; }
	public PHFemMeshThermoDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshThermoDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshThermoDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshThermoDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemMeshThermoDesc() { if (_flag) { SprExport.Spr_delete_PHFemMeshThermoDesc(_thisArray[0]); _flag = false; } }
	public double rho {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_rho(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_rho(_thisArray[0], value); }
	}
	public double thConduct {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_thConduct(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_thConduct(_thisArray[0], value); }
	}
	public double thConduct_x {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_thConduct_x(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_thConduct_x(_thisArray[0], value); }
	}
	public double thConduct_y {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_thConduct_y(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_thConduct_y(_thisArray[0], value); }
	}
	public double thConduct_z {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_thConduct_z(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_thConduct_z(_thisArray[0], value); }
	}
	public double heatTrans {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_heatTrans(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_heatTrans(_thisArray[0], value); }
	}
	public double specificHeat {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_specificHeat(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_specificHeat(_thisArray[0], value); }
	}
	public double radiantHeat {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_radiantHeat(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_radiantHeat(_thisArray[0], value); }
	}
	public double initial_temp {
	    get { return SprExport.Spr_PHFemMeshThermoDesc_get_initial_temp(_thisArray[0]); }
	    set { SprExport.Spr_PHFemMeshThermoDesc_set_initial_temp(_thisArray[0], value); }
	}
	public void Init() {
	    SprExport.Spr_PHFemMeshThermoDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHFemMeshThermoDescStruct : PHFemMeshDescStruct {
        public PHFemMeshThermoDescStruct() {
            PHFemMeshThermoDesc desc = new PHFemMeshThermoDesc();
            ApplyFrom(desc, true);
        }
	public double rho;
	public double thConduct;
	public double thConduct_x;
	public double thConduct_y;
	public double thConduct_z;
	public double heatTrans;
	public double specificHeat;
	public double radiantHeat;
	public double initial_temp;
	public void ApplyTo(PHFemMeshThermoDesc r, bool apply_to_base_class = false) {
		r.rho = rho;
		r.thConduct = thConduct;
		r.thConduct_x = thConduct_x;
		r.thConduct_y = thConduct_y;
		r.thConduct_z = thConduct_z;
		r.heatTrans = heatTrans;
		r.specificHeat = specificHeat;
		r.radiantHeat = radiantHeat;
		r.initial_temp = initial_temp;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFemMeshThermoDesc r, bool apply_to_base_class = false) {
		rho = r.rho;
		thConduct = r.thConduct;
		thConduct_x = r.thConduct_x;
		thConduct_y = r.thConduct_y;
		thConduct_z = r.thConduct_z;
		heatTrans = r.heatTrans;
		specificHeat = r.specificHeat;
		radiantHeat = r.radiantHeat;
		initial_temp = r.initial_temp;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFemMeshThermoDesc(PHFemMeshThermoDescStruct m) {
	    PHFemMeshThermoDesc r = new PHFemMeshThermoDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemMeshThermoDescStruct(PHFemMeshThermoDesc r) {
	    PHFemMeshThermoDescStruct m = new PHFemMeshThermoDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemMeshNewState : CsObject {
	public PHFemMeshNewState() { _thisArray[0] = SprExport.Spr_new_PHFemMeshNewState(); _flag = true; }
	public PHFemMeshNewState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshNewState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshNewState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshNewState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshNewState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshNewState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshNewState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshNewState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemMeshNewState() { if (_flag) { SprExport.Spr_delete_PHFemMeshNewState(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHFemMeshNewStateStruct : CsObject {
        public PHFemMeshNewStateStruct() {
            PHFemMeshNewState desc = new PHFemMeshNewState();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHFemMeshNewState r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHFemMeshNewState r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHFemMeshNewState(PHFemMeshNewStateStruct m) {
	    PHFemMeshNewState r = new PHFemMeshNewState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemMeshNewStateStruct(PHFemMeshNewState r) {
	    PHFemMeshNewStateStruct m = new PHFemMeshNewStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemMeshNewDesc : PHFemMeshNewState {
	public PHFemMeshNewDesc() { _thisArray[0] = SprExport.Spr_new_PHFemMeshNewDesc(); _flag = true; }
	public PHFemMeshNewDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshNewDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshNewDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshNewDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshNewDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshNewDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshNewDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshNewDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemMeshNewDesc() { if (_flag) { SprExport.Spr_delete_PHFemMeshNewDesc(_thisArray[0]); _flag = false; } }
        public vectorwrapper_Vec3d vertices {
            get { return new vectorwrapper_Vec3d(SprExport.Spr_PHFemMeshNewDesc_addr_vertices(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshNewDesc_set_vertices(_thisArray[0], value); }
        }
        public vectorwrapper_int tets {
            get { return new vectorwrapper_int(SprExport.Spr_PHFemMeshNewDesc_addr_tets(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshNewDesc_set_tets(_thisArray[0], value); }
        }
        public vectorwrapper_int faces {
            get { return new vectorwrapper_int(SprExport.Spr_PHFemMeshNewDesc_addr_faces(_thisArray[0])); }
            set { SprExport.Spr_PHFemMeshNewDesc_set_faces(_thisArray[0], value); }
        }
	public bool spheric {
	    get {
	        byte ret = (byte) SprExport.Spr_PHFemMeshNewDesc_get_spheric(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHFemMeshNewDesc_set_spheric(_thisArray[0], (char) val);
	    }
	}
    }
    [System.Serializable]
    public class PHFemMeshNewDescStruct : PHFemMeshNewStateStruct {
        public PHFemMeshNewDescStruct() {
            PHFemMeshNewDesc desc = new PHFemMeshNewDesc();
            ApplyFrom(desc, false);
        }
	public vectorwrapper_Vec3d vertices;
	public vectorwrapper_int tets;
	public vectorwrapper_int faces;
	public bool spheric;
	public void ApplyTo(PHFemMeshNewDesc r, bool apply_to_base_class = false) {
		r.vertices = vertices;
		r.tets = tets;
		r.faces = faces;
		r.spheric = spheric;
	}
	public void ApplyFrom(PHFemMeshNewDesc r, bool apply_to_base_class = false) {
		vertices = r.vertices;
		tets = r.tets;
		faces = r.faces;
		spheric = r.spheric;
	}
	public static implicit operator PHFemMeshNewDesc(PHFemMeshNewDescStruct m) {
	    PHFemMeshNewDesc r = new PHFemMeshNewDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemMeshNewDescStruct(PHFemMeshNewDesc r) {
	    PHFemMeshNewDescStruct m = new PHFemMeshNewDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemBaseDesc : CsObject {
	public PHFemBaseDesc() { _thisArray[0] = SprExport.Spr_new_PHFemBaseDesc(); _flag = true; }
	public PHFemBaseDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemBaseDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemBaseDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemBaseDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemBaseDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemBaseDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemBaseDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemBaseDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemBaseDesc() { if (_flag) { SprExport.Spr_delete_PHFemBaseDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHFemBaseDescStruct : CsObject {
        public PHFemBaseDescStruct() {
            PHFemBaseDesc desc = new PHFemBaseDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHFemBaseDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHFemBaseDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHFemBaseDesc(PHFemBaseDescStruct m) {
	    PHFemBaseDesc r = new PHFemBaseDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemBaseDescStruct(PHFemBaseDesc r) {
	    PHFemBaseDescStruct m = new PHFemBaseDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemVibrationDesc : PHFemBaseDesc {
	public PHFemVibrationDesc() { _thisArray[0] = SprExport.Spr_new_PHFemVibrationDesc(); _flag = true; }
	public PHFemVibrationDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemVibrationDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemVibrationDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemVibrationDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemVibrationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemVibrationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemVibrationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemVibrationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemVibrationDesc() { if (_flag) { SprExport.Spr_delete_PHFemVibrationDesc(_thisArray[0]); _flag = false; } }
	public double young {
	    get { return SprExport.Spr_PHFemVibrationDesc_get_young(_thisArray[0]); }
	    set { SprExport.Spr_PHFemVibrationDesc_set_young(_thisArray[0], value); }
	}
	public double poisson {
	    get { return SprExport.Spr_PHFemVibrationDesc_get_poisson(_thisArray[0]); }
	    set { SprExport.Spr_PHFemVibrationDesc_set_poisson(_thisArray[0], value); }
	}
	public double density {
	    get { return SprExport.Spr_PHFemVibrationDesc_get_density(_thisArray[0]); }
	    set { SprExport.Spr_PHFemVibrationDesc_set_density(_thisArray[0], value); }
	}
	public double alpha {
	    get { return SprExport.Spr_PHFemVibrationDesc_get_alpha(_thisArray[0]); }
	    set { SprExport.Spr_PHFemVibrationDesc_set_alpha(_thisArray[0], value); }
	}
	public double beta {
	    get { return SprExport.Spr_PHFemVibrationDesc_get_beta(_thisArray[0]); }
	    set { SprExport.Spr_PHFemVibrationDesc_set_beta(_thisArray[0], value); }
	}
        public vectorwrapper_int fixedVertices {
            get { return new vectorwrapper_int(SprExport.Spr_PHFemVibrationDesc_addr_fixedVertices(_thisArray[0])); }
            set { SprExport.Spr_PHFemVibrationDesc_set_fixedVertices(_thisArray[0], value); }
        }
	public enum ANALYSIS_MODE : int {
	    ANALYSIS_DIRECT = 0, ANALYSIS_MODAL = ANALYSIS_DIRECT + 1
	}
	public enum INTEGRATION_MODE : int {
	    INT_EXPLICIT_EULER = 0, INT_IMPLICIT_EULER = INT_EXPLICIT_EULER + 1, INT_SIMPLECTIC = INT_IMPLICIT_EULER + 1, INT_NEWMARK_BETA = INT_SIMPLECTIC + 1
	}
    }
    [System.Serializable]
    public class PHFemVibrationDescStruct : PHFemBaseDescStruct {
        public PHFemVibrationDescStruct() {
            PHFemVibrationDesc desc = new PHFemVibrationDesc();
            ApplyFrom(desc, true);
        }
	public double young;
	public double poisson;
	public double density;
	public double alpha;
	public double beta;
	public vectorwrapper_int fixedVertices;
	public void ApplyTo(PHFemVibrationDesc r, bool apply_to_base_class = false) {
		r.young = young;
		r.poisson = poisson;
		r.density = density;
		r.alpha = alpha;
		r.beta = beta;
		r.fixedVertices = fixedVertices;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFemVibrationDesc r, bool apply_to_base_class = false) {
		young = r.young;
		poisson = r.poisson;
		density = r.density;
		alpha = r.alpha;
		beta = r.beta;
		fixedVertices = r.fixedVertices;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFemVibrationDesc(PHFemVibrationDescStruct m) {
	    PHFemVibrationDesc r = new PHFemVibrationDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemVibrationDescStruct(PHFemVibrationDesc r) {
	    PHFemVibrationDescStruct m = new PHFemVibrationDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemThermoDesc : PHFemBaseDesc {
	public PHFemThermoDesc() { _thisArray[0] = SprExport.Spr_new_PHFemThermoDesc(); _flag = true; }
	public PHFemThermoDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemThermoDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemThermoDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemThermoDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemThermoDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemThermoDesc() { if (_flag) { SprExport.Spr_delete_PHFemThermoDesc(_thisArray[0]); _flag = false; } }
	public double rho {
	    get { return SprExport.Spr_PHFemThermoDesc_get_rho(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_rho(_thisArray[0], value); }
	}
	public double heatTrans {
	    get { return SprExport.Spr_PHFemThermoDesc_get_heatTrans(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_heatTrans(_thisArray[0], value); }
	}
	public double specificHeat {
	    get { return SprExport.Spr_PHFemThermoDesc_get_specificHeat(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_specificHeat(_thisArray[0], value); }
	}
	public double radiantHeat {
	    get { return SprExport.Spr_PHFemThermoDesc_get_radiantHeat(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_radiantHeat(_thisArray[0], value); }
	}
	public double initial_temp {
	    get { return SprExport.Spr_PHFemThermoDesc_get_initial_temp(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_initial_temp(_thisArray[0], value); }
	}
	public double weekPow_full {
	    get { return SprExport.Spr_PHFemThermoDesc_get_weekPow_full(_thisArray[0]); }
	    set { SprExport.Spr_PHFemThermoDesc_set_weekPow_full(_thisArray[0], value); }
	}
	public void Init() {
	    SprExport.Spr_PHFemThermoDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHFemThermoDescStruct : PHFemBaseDescStruct {
        public PHFemThermoDescStruct() {
            PHFemThermoDesc desc = new PHFemThermoDesc();
            ApplyFrom(desc, true);
        }
	public double rho;
	public double heatTrans;
	public double specificHeat;
	public double radiantHeat;
	public double initial_temp;
	public double weekPow_full;
	public void ApplyTo(PHFemThermoDesc r, bool apply_to_base_class = false) {
		r.rho = rho;
		r.heatTrans = heatTrans;
		r.specificHeat = specificHeat;
		r.radiantHeat = radiantHeat;
		r.initial_temp = initial_temp;
		r.weekPow_full = weekPow_full;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFemThermoDesc r, bool apply_to_base_class = false) {
		rho = r.rho;
		heatTrans = r.heatTrans;
		specificHeat = r.specificHeat;
		radiantHeat = r.radiantHeat;
		initial_temp = r.initial_temp;
		weekPow_full = r.weekPow_full;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFemThermoDesc(PHFemThermoDescStruct m) {
	    PHFemThermoDesc r = new PHFemThermoDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemThermoDescStruct(PHFemThermoDesc r) {
	    PHFemThermoDescStruct m = new PHFemThermoDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFemPorousWOMoveDesc : PHFemBaseDesc {
	public PHFemPorousWOMoveDesc() { _thisArray[0] = SprExport.Spr_new_PHFemPorousWOMoveDesc(); _flag = true; }
	public PHFemPorousWOMoveDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemPorousWOMoveDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFemPorousWOMoveDesc() { if (_flag) { SprExport.Spr_delete_PHFemPorousWOMoveDesc(_thisArray[0]); _flag = false; } }
	public double wDiffAir {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_wDiffAir(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_wDiffAir(_thisArray[0], value); }
	}
	public double K {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_K(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_K(_thisArray[0], value); }
	}
	public double kc {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_kc(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_kc(_thisArray[0], value); }
	}
	public double kp {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_kp(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_kp(_thisArray[0], value); }
	}
	public double alpha {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_alpha(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_alpha(_thisArray[0], value); }
	}
	public double gamma {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_gamma(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_gamma(_thisArray[0], value); }
	}
	public double rhoWater {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_rhoWater(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_rhoWater(_thisArray[0], value); }
	}
	public double rhoOil {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_rhoOil(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_rhoOil(_thisArray[0], value); }
	}
	public double rhowInit {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_rhowInit(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_rhowInit(_thisArray[0], value); }
	}
	public double rhooInit {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_rhooInit(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_rhooInit(_thisArray[0], value); }
	}
	public double evapoRate {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_evapoRate(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_evapoRate(_thisArray[0], value); }
	}
	public double denatTemp {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_denatTemp(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_denatTemp(_thisArray[0], value); }
	}
	public double boundWaterRatio {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_boundWaterRatio(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_boundWaterRatio(_thisArray[0], value); }
	}
	public double equilWaterCont {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_equilWaterCont(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_equilWaterCont(_thisArray[0], value); }
	}
	public double limitWaterCont {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_limitWaterCont(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_limitWaterCont(_thisArray[0], value); }
	}
	public double boundaryThick {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_boundaryThick(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_boundaryThick(_thisArray[0], value); }
	}
	public double initMassAll {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_initMassAll(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_initMassAll(_thisArray[0], value); }
	}
	public double initWaterRatio {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_initWaterRatio(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_initWaterRatio(_thisArray[0], value); }
	}
	public double initOilRatio {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_initOilRatio(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_initOilRatio(_thisArray[0], value); }
	}
	public double shrinkageRatio {
	    get { return SprExport.Spr_PHFemPorousWOMoveDesc_get_shrinkageRatio(_thisArray[0]); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_shrinkageRatio(_thisArray[0], value); }
	}
	public Vec3d top {
	    get { return new Vec3d(SprExport.Spr_PHFemPorousWOMoveDesc_addr_top(_thisArray[0])); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_top(_thisArray[0], value); }
	}
	public Vec3d center {
	    get { return new Vec3d(SprExport.Spr_PHFemPorousWOMoveDesc_addr_center(_thisArray[0])); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_center(_thisArray[0], value); }
	}
	public Vec3d bottom {
	    get { return new Vec3d(SprExport.Spr_PHFemPorousWOMoveDesc_addr_bottom(_thisArray[0])); }
	    set { SprExport.Spr_PHFemPorousWOMoveDesc_set_bottom(_thisArray[0], value); }
	}
	public void Init() {
	    SprExport.Spr_PHFemPorousWOMoveDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHFemPorousWOMoveDescStruct : PHFemBaseDescStruct {
        public PHFemPorousWOMoveDescStruct() {
            PHFemPorousWOMoveDesc desc = new PHFemPorousWOMoveDesc();
            ApplyFrom(desc, true);
        }
	public double wDiffAir;
	public double K;
	public double kc;
	public double kp;
	public double alpha;
	public double gamma;
	public double rhoWater;
	public double rhoOil;
	public double rhowInit;
	public double rhooInit;
	public double evapoRate;
	public double denatTemp;
	public double boundWaterRatio;
	public double equilWaterCont;
	public double limitWaterCont;
	public double boundaryThick;
	public double initMassAll;
	public double initWaterRatio;
	public double initOilRatio;
	public double shrinkageRatio;
	public Vec3dStruct top;
	public Vec3dStruct center;
	public Vec3dStruct bottom;
	public void ApplyTo(PHFemPorousWOMoveDesc r, bool apply_to_base_class = false) {
		r.wDiffAir = wDiffAir;
		r.K = K;
		r.kc = kc;
		r.kp = kp;
		r.alpha = alpha;
		r.gamma = gamma;
		r.rhoWater = rhoWater;
		r.rhoOil = rhoOil;
		r.rhowInit = rhowInit;
		r.rhooInit = rhooInit;
		r.evapoRate = evapoRate;
		r.denatTemp = denatTemp;
		r.boundWaterRatio = boundWaterRatio;
		r.equilWaterCont = equilWaterCont;
		r.limitWaterCont = limitWaterCont;
		r.boundaryThick = boundaryThick;
		r.initMassAll = initMassAll;
		r.initWaterRatio = initWaterRatio;
		r.initOilRatio = initOilRatio;
		r.shrinkageRatio = shrinkageRatio;
		r.top = top;
		r.center = center;
		r.bottom = bottom;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFemPorousWOMoveDesc r, bool apply_to_base_class = false) {
		wDiffAir = r.wDiffAir;
		K = r.K;
		kc = r.kc;
		kp = r.kp;
		alpha = r.alpha;
		gamma = r.gamma;
		rhoWater = r.rhoWater;
		rhoOil = r.rhoOil;
		rhowInit = r.rhowInit;
		rhooInit = r.rhooInit;
		evapoRate = r.evapoRate;
		denatTemp = r.denatTemp;
		boundWaterRatio = r.boundWaterRatio;
		equilWaterCont = r.equilWaterCont;
		limitWaterCont = r.limitWaterCont;
		boundaryThick = r.boundaryThick;
		initMassAll = r.initMassAll;
		initWaterRatio = r.initWaterRatio;
		initOilRatio = r.initOilRatio;
		shrinkageRatio = r.shrinkageRatio;
		top = r.top;
		center = r.center;
		bottom = r.bottom;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFemPorousWOMoveDesc(PHFemPorousWOMoveDescStruct m) {
	    PHFemPorousWOMoveDesc r = new PHFemPorousWOMoveDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFemPorousWOMoveDescStruct(PHFemPorousWOMoveDesc r) {
	    PHFemPorousWOMoveDescStruct m = new PHFemPorousWOMoveDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFrameDesc : CsObject {
	public PHFrameDesc() { _thisArray[0] = SprExport.Spr_new_PHFrameDesc(); _flag = true; }
	public PHFrameDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFrameDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFrameDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFrameDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFrameDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFrameDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFrameDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFrameDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFrameDesc() { if (_flag) { SprExport.Spr_delete_PHFrameDesc(_thisArray[0]); _flag = false; } }
	public Posed pose {
	    get { return new Posed(SprExport.Spr_PHFrameDesc_addr_pose(_thisArray[0])); }
	    set { SprExport.Spr_PHFrameDesc_set_pose(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHFrameDescStruct : CsObject {
        public PHFrameDescStruct() {
            PHFrameDesc desc = new PHFrameDesc();
            ApplyFrom(desc, false);
        }
	public PosedStruct pose;
	public void ApplyTo(PHFrameDesc r, bool apply_to_base_class = false) {
		r.pose = pose;
	}
	public void ApplyFrom(PHFrameDesc r, bool apply_to_base_class = false) {
		pose = r.pose;
	}
	public static implicit operator PHFrameDesc(PHFrameDescStruct m) {
	    PHFrameDesc r = new PHFrameDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFrameDescStruct(PHFrameDesc r) {
	    PHFrameDescStruct m = new PHFrameDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSolidState : CsObject {
	public PHSolidState() { _thisArray[0] = SprExport.Spr_new_PHSolidState(); _flag = true; }
	public PHSolidState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSolidState() { if (_flag) { SprExport.Spr_delete_PHSolidState(_thisArray[0]); _flag = false; } }
	public Vec3d velocity {
	    get { return new Vec3d(SprExport.Spr_PHSolidState_addr_velocity(_thisArray[0])); }
	    set { SprExport.Spr_PHSolidState_set_velocity(_thisArray[0], value); }
	}
	public Vec3d angVelocity {
	    get { return new Vec3d(SprExport.Spr_PHSolidState_addr_angVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHSolidState_set_angVelocity(_thisArray[0], value); }
	}
	public Posed pose {
	    get { return new Posed(SprExport.Spr_PHSolidState_addr_pose(_thisArray[0])); }
	    set { SprExport.Spr_PHSolidState_set_pose(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHSolidStateStruct : CsObject {
        public PHSolidStateStruct() {
            PHSolidState desc = new PHSolidState();
            ApplyFrom(desc, false);
        }
	public Vec3dStruct velocity;
	public Vec3dStruct angVelocity;
	public PosedStruct pose;
	public void ApplyTo(PHSolidState r, bool apply_to_base_class = false) {
		r.velocity = velocity;
		r.angVelocity = angVelocity;
		r.pose = pose;
	}
	public void ApplyFrom(PHSolidState r, bool apply_to_base_class = false) {
		velocity = r.velocity;
		angVelocity = r.angVelocity;
		pose = r.pose;
	}
	public static implicit operator PHSolidState(PHSolidStateStruct m) {
	    PHSolidState r = new PHSolidState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSolidStateStruct(PHSolidState r) {
	    PHSolidStateStruct m = new PHSolidStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSolidDesc : PHSolidState {
	public PHSolidDesc() { _thisArray[0] = SprExport.Spr_new_PHSolidDesc(); _flag = true; }
	public PHSolidDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSolidDesc() { if (_flag) { SprExport.Spr_delete_PHSolidDesc(_thisArray[0]); _flag = false; } }
	public double mass {
	    get { return SprExport.Spr_PHSolidDesc_get_mass(_thisArray[0]); }
	    set { SprExport.Spr_PHSolidDesc_set_mass(_thisArray[0], value); }
	}
	public Matrix3d inertia {
	    get { return new Matrix3d(SprExport.Spr_PHSolidDesc_addr_inertia(_thisArray[0])); }
	    set { SprExport.Spr_PHSolidDesc_set_inertia(_thisArray[0], value); }
	}
	public Vec3d center {
	    get { return new Vec3d(SprExport.Spr_PHSolidDesc_addr_center(_thisArray[0])); }
	    set { SprExport.Spr_PHSolidDesc_set_center(_thisArray[0], value); }
	}
	public bool dynamical {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSolidDesc_get_dynamical(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSolidDesc_set_dynamical(_thisArray[0], (char) val);
	    }
	}
	public bool stationary {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSolidDesc_get_stationary(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSolidDesc_set_stationary(_thisArray[0], (char) val);
	    }
	}
	public void Init() {
	    SprExport.Spr_PHSolidDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHSolidDescStruct : PHSolidStateStruct {
        public PHSolidDescStruct() {
            PHSolidDesc desc = new PHSolidDesc();
            ApplyFrom(desc, false);
        }
	public double mass;
	public Matrix3dStruct inertia;
	public Vec3dStruct center;
	public bool dynamical;
	public bool stationary;
	public void ApplyTo(PHSolidDesc r, bool apply_to_base_class = false) {
		r.mass = mass;
		r.inertia = inertia;
		r.center = center;
		r.dynamical = dynamical;
		r.stationary = stationary;
	}
	public void ApplyFrom(PHSolidDesc r, bool apply_to_base_class = false) {
		mass = r.mass;
		inertia = r.inertia;
		center = r.center;
		dynamical = r.dynamical;
		stationary = r.stationary;
	}
	public static implicit operator PHSolidDesc(PHSolidDescStruct m) {
	    PHSolidDesc r = new PHSolidDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSolidDescStruct(PHSolidDesc r) {
	    PHSolidDescStruct m = new PHSolidDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHCollisionListener : CsObject {
	public PHCollisionListener() { _thisArray[0] = SprExport.Spr_new_PHCollisionListener(); _flag = true; }
	public PHCollisionListener(IntPtr ptr) : base(ptr, 0, false) {}
	public PHCollisionListener(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHCollisionListener(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHCollisionListener(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHCollisionListener(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHCollisionListener(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHCollisionListener(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHCollisionListener(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHCollisionListener() { if (_flag) { SprExport.Spr_delete_PHCollisionListener(_thisArray[0]); _flag = false; } }
	public void OnDetect(PHSolidPairIf sop, CDShapePairIf shp, uint ct, double dt) {
	    SprExport.Spr_PHCollisionListener_OnDetect((IntPtr) _thisArray[0], (IntPtr) sop, (IntPtr) shp, (uint) ct, (double) dt);
	}
	public void OnContDetect(PHSolidPairIf sop, CDShapePairIf shp, uint ct, double dt) {
	    SprExport.Spr_PHCollisionListener_OnContDetect((IntPtr) _thisArray[0], (IntPtr) sop, (IntPtr) shp, (uint) ct, (double) dt);
	}
    }
    public partial class PHHapticPointerDesc : CsObject {
	public PHHapticPointerDesc() { _thisArray[0] = SprExport.Spr_new_PHHapticPointerDesc(); _flag = true; }
	public PHHapticPointerDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHapticPointerDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHapticPointerDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHapticPointerDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHapticPointerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHapticPointerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHapticPointerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHapticPointerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHapticPointerDesc() { if (_flag) { SprExport.Spr_delete_PHHapticPointerDesc(_thisArray[0]); _flag = false; } }
	public HapticRenderMode renderMode {
	    get { return (HapticRenderMode) SprExport.Spr_PHHapticPointerDesc_get_renderMode(_thisArray[0]); }
	    set { SprExport.Spr_PHHapticPointerDesc_set_renderMode(_thisArray[0], (int) value); }
	}
	public enum HapticRenderMode : int {
	    PENALTY = 0, CONSTRAINT = PENALTY + 1, DYNAMIC_PROXY = CONSTRAINT + 1
	}
    }
    [System.Serializable]
    public class PHHapticPointerDescStruct : CsObject {
        public PHHapticPointerDescStruct() {
            PHHapticPointerDesc desc = new PHHapticPointerDesc();
            ApplyFrom(desc, false);
        }
	public PHHapticPointerDesc.HapticRenderMode renderMode;
	public void ApplyTo(PHHapticPointerDesc r, bool apply_to_base_class = false) {
		r.renderMode = renderMode;
	}
	public void ApplyFrom(PHHapticPointerDesc r, bool apply_to_base_class = false) {
		renderMode = r.renderMode;
	}
	public static implicit operator PHHapticPointerDesc(PHHapticPointerDescStruct m) {
	    PHHapticPointerDesc r = new PHHapticPointerDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHapticPointerDescStruct(PHHapticPointerDesc r) {
	    PHHapticPointerDescStruct m = new PHHapticPointerDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHHapticEngineDesc : CsObject {
	public PHHapticEngineDesc() { _thisArray[0] = SprExport.Spr_new_PHHapticEngineDesc(); _flag = true; }
	public PHHapticEngineDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHapticEngineDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHapticEngineDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHapticEngineDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHapticEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHapticEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHapticEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHapticEngineDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHapticEngineDesc() { if (_flag) { SprExport.Spr_delete_PHHapticEngineDesc(_thisArray[0]); _flag = false; } }
	public enum HapticStepMode : int {
	    SINGLE_THREAD, MULTI_THREAD = SINGLE_THREAD + 1, LOCAL_DYNAMICS = MULTI_THREAD + 1
	}
    }
    [System.Serializable]
    public class PHHapticEngineDescStruct : CsObject {
        public PHHapticEngineDescStruct() {
            PHHapticEngineDesc desc = new PHHapticEngineDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHHapticEngineDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHHapticEngineDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHHapticEngineDesc(PHHapticEngineDescStruct m) {
	    PHHapticEngineDesc r = new PHHapticEngineDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHapticEngineDescStruct(PHHapticEngineDesc r) {
	    PHHapticEngineDescStruct m = new PHHapticEngineDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKEndEffectorState : CsObject {
	public PHIKEndEffectorState() { _thisArray[0] = SprExport.Spr_new_PHIKEndEffectorState(); _flag = true; }
	public PHIKEndEffectorState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKEndEffectorState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKEndEffectorState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKEndEffectorState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKEndEffectorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKEndEffectorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKEndEffectorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKEndEffectorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKEndEffectorState() { if (_flag) { SprExport.Spr_delete_PHIKEndEffectorState(_thisArray[0]); _flag = false; } }
	public Posed solidTempPose {
	    get { return new Posed(SprExport.Spr_PHIKEndEffectorState_addr_solidTempPose(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorState_set_solidTempPose(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKEndEffectorStateStruct : CsObject {
        public PHIKEndEffectorStateStruct() {
            PHIKEndEffectorState desc = new PHIKEndEffectorState();
            ApplyFrom(desc, false);
        }
	public PosedStruct solidTempPose;
	public void ApplyTo(PHIKEndEffectorState r, bool apply_to_base_class = false) {
		r.solidTempPose = solidTempPose;
	}
	public void ApplyFrom(PHIKEndEffectorState r, bool apply_to_base_class = false) {
		solidTempPose = r.solidTempPose;
	}
	public static implicit operator PHIKEndEffectorState(PHIKEndEffectorStateStruct m) {
	    PHIKEndEffectorState r = new PHIKEndEffectorState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKEndEffectorStateStruct(PHIKEndEffectorState r) {
	    PHIKEndEffectorStateStruct m = new PHIKEndEffectorStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKEndEffectorDesc : PHIKEndEffectorState {
	public PHIKEndEffectorDesc() { _thisArray[0] = SprExport.Spr_new_PHIKEndEffectorDesc(); _flag = true; }
	public PHIKEndEffectorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKEndEffectorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKEndEffectorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKEndEffectorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKEndEffectorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKEndEffectorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKEndEffectorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKEndEffectorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKEndEffectorDesc() { if (_flag) { SprExport.Spr_delete_PHIKEndEffectorDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKEndEffectorDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKEndEffectorDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public bool bPosition {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKEndEffectorDesc_get_bPosition(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKEndEffectorDesc_set_bPosition(_thisArray[0], (char) val);
	    }
	}
	public bool bOrientation {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKEndEffectorDesc_get_bOrientation(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKEndEffectorDesc_set_bOrientation(_thisArray[0], (char) val);
	    }
	}
	public int oriCtlMode {
	    get { return SprExport.Spr_PHIKEndEffectorDesc_get_oriCtlMode(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_oriCtlMode(_thisArray[0], value); }
	}
	public bool bForce {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKEndEffectorDesc_get_bForce(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKEndEffectorDesc_set_bForce(_thisArray[0], (char) val);
	    }
	}
	public bool bTorque {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKEndEffectorDesc_get_bTorque(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKEndEffectorDesc_set_bTorque(_thisArray[0], (char) val);
	    }
	}
	public double positionPriority {
	    get { return SprExport.Spr_PHIKEndEffectorDesc_get_positionPriority(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_positionPriority(_thisArray[0], value); }
	}
	public double orientationPriority {
	    get { return SprExport.Spr_PHIKEndEffectorDesc_get_orientationPriority(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_orientationPriority(_thisArray[0], value); }
	}
	public double forcePriority {
	    get { return SprExport.Spr_PHIKEndEffectorDesc_get_forcePriority(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_forcePriority(_thisArray[0], value); }
	}
	public double torquePriority {
	    get { return SprExport.Spr_PHIKEndEffectorDesc_get_torquePriority(_thisArray[0]); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_torquePriority(_thisArray[0], value); }
	}
	public Vec3d targetPosition {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetPosition(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetPosition(_thisArray[0], value); }
	}
	public Vec3d targetVelocity {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetVelocity(_thisArray[0], value); }
	}
	public Vec3d targetLocalPosition {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetLocalPosition(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetLocalPosition(_thisArray[0], value); }
	}
	public Vec3d targetLocalDirection {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetLocalDirection(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetLocalDirection(_thisArray[0], value); }
	}
	public Quaterniond targetOrientation {
	    get { return new Quaterniond(SprExport.Spr_PHIKEndEffectorDesc_addr_targetOrientation(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetOrientation(_thisArray[0], value); }
	}
	public Vec3d targetDirection {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetDirection(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetDirection(_thisArray[0], value); }
	}
	public Vec3d targetLookat {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetLookat(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetLookat(_thisArray[0], value); }
	}
	public Vec3d targetAngVel {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetAngVel(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetAngVel(_thisArray[0], value); }
	}
	public Vec3d targetForce {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetForce(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetForce(_thisArray[0], value); }
	}
	public Vec3d targetForceWorkingPoint {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetForceWorkingPoint(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetForceWorkingPoint(_thisArray[0], value); }
	}
	public Vec3d targetTorque {
	    get { return new Vec3d(SprExport.Spr_PHIKEndEffectorDesc_addr_targetTorque(_thisArray[0])); }
	    set { SprExport.Spr_PHIKEndEffectorDesc_set_targetTorque(_thisArray[0], value); }
	}
	public enum OriCtlMode : int {
	    MODE_QUATERNION = 0, MODE_DIRECTION = MODE_QUATERNION + 1, MODE_LOOKAT = MODE_DIRECTION + 1
	}
    }
    [System.Serializable]
    public class PHIKEndEffectorDescStruct : PHIKEndEffectorStateStruct {
        public PHIKEndEffectorDescStruct() {
            PHIKEndEffectorDesc desc = new PHIKEndEffectorDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public bool bPosition;
	public bool bOrientation;
	public int oriCtlMode;
	public bool bForce;
	public bool bTorque;
	public double positionPriority;
	public double orientationPriority;
	public double forcePriority;
	public double torquePriority;
	public Vec3dStruct targetPosition;
	public Vec3dStruct targetVelocity;
	public Vec3dStruct targetLocalPosition;
	public Vec3dStruct targetLocalDirection;
	public QuaterniondStruct targetOrientation;
	public Vec3dStruct targetDirection;
	public Vec3dStruct targetLookat;
	public Vec3dStruct targetAngVel;
	public Vec3dStruct targetForce;
	public Vec3dStruct targetForceWorkingPoint;
	public Vec3dStruct targetTorque;
	public void ApplyTo(PHIKEndEffectorDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.bPosition = bPosition;
		r.bOrientation = bOrientation;
		r.oriCtlMode = oriCtlMode;
		r.bForce = bForce;
		r.bTorque = bTorque;
		r.positionPriority = positionPriority;
		r.orientationPriority = orientationPriority;
		r.forcePriority = forcePriority;
		r.torquePriority = torquePriority;
		r.targetPosition = targetPosition;
		r.targetVelocity = targetVelocity;
		r.targetLocalPosition = targetLocalPosition;
		r.targetLocalDirection = targetLocalDirection;
		r.targetOrientation = targetOrientation;
		r.targetDirection = targetDirection;
		r.targetLookat = targetLookat;
		r.targetAngVel = targetAngVel;
		r.targetForce = targetForce;
		r.targetForceWorkingPoint = targetForceWorkingPoint;
		r.targetTorque = targetTorque;
	}
	public void ApplyFrom(PHIKEndEffectorDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		bPosition = r.bPosition;
		bOrientation = r.bOrientation;
		oriCtlMode = r.oriCtlMode;
		bForce = r.bForce;
		bTorque = r.bTorque;
		positionPriority = r.positionPriority;
		orientationPriority = r.orientationPriority;
		forcePriority = r.forcePriority;
		torquePriority = r.torquePriority;
		targetPosition = r.targetPosition;
		targetVelocity = r.targetVelocity;
		targetLocalPosition = r.targetLocalPosition;
		targetLocalDirection = r.targetLocalDirection;
		targetOrientation = r.targetOrientation;
		targetDirection = r.targetDirection;
		targetLookat = r.targetLookat;
		targetAngVel = r.targetAngVel;
		targetForce = r.targetForce;
		targetForceWorkingPoint = r.targetForceWorkingPoint;
		targetTorque = r.targetTorque;
	}
	public static implicit operator PHIKEndEffectorDesc(PHIKEndEffectorDescStruct m) {
	    PHIKEndEffectorDesc r = new PHIKEndEffectorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKEndEffectorDescStruct(PHIKEndEffectorDesc r) {
	    PHIKEndEffectorDescStruct m = new PHIKEndEffectorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKActuatorState : CsObject {
	public PHIKActuatorState() { _thisArray[0] = SprExport.Spr_new_PHIKActuatorState(); _flag = true; }
	public PHIKActuatorState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKActuatorState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKActuatorState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKActuatorState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKActuatorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKActuatorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKActuatorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKActuatorState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKActuatorState() { if (_flag) { SprExport.Spr_delete_PHIKActuatorState(_thisArray[0]); _flag = false; } }
	public Posed solidTempPose {
	    get { return new Posed(SprExport.Spr_PHIKActuatorState_addr_solidTempPose(_thisArray[0])); }
	    set { SprExport.Spr_PHIKActuatorState_set_solidTempPose(_thisArray[0], value); }
	}
	public Quaterniond jointTempOri {
	    get { return new Quaterniond(SprExport.Spr_PHIKActuatorState_addr_jointTempOri(_thisArray[0])); }
	    set { SprExport.Spr_PHIKActuatorState_set_jointTempOri(_thisArray[0], value); }
	}
	public Vec3d jointTempOriIntp {
	    get { return new Vec3d(SprExport.Spr_PHIKActuatorState_addr_jointTempOriIntp(_thisArray[0])); }
	    set { SprExport.Spr_PHIKActuatorState_set_jointTempOriIntp(_thisArray[0], value); }
	}
	public double jointTempAngle {
	    get { return SprExport.Spr_PHIKActuatorState_get_jointTempAngle(_thisArray[0]); }
	    set { SprExport.Spr_PHIKActuatorState_set_jointTempAngle(_thisArray[0], value); }
	}
	public double jointTempAngleIntp {
	    get { return SprExport.Spr_PHIKActuatorState_get_jointTempAngleIntp(_thisArray[0]); }
	    set { SprExport.Spr_PHIKActuatorState_set_jointTempAngleIntp(_thisArray[0], value); }
	}
	public Posed solidPullbackPose {
	    get { return new Posed(SprExport.Spr_PHIKActuatorState_addr_solidPullbackPose(_thisArray[0])); }
	    set { SprExport.Spr_PHIKActuatorState_set_solidPullbackPose(_thisArray[0], value); }
	}
	public Posed jointTempPose {
	    get { return new Posed(SprExport.Spr_PHIKActuatorState_addr_jointTempPose(_thisArray[0])); }
	    set { SprExport.Spr_PHIKActuatorState_set_jointTempPose(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKActuatorStateStruct : CsObject {
        public PHIKActuatorStateStruct() {
            PHIKActuatorState desc = new PHIKActuatorState();
            ApplyFrom(desc, false);
        }
	public PosedStruct solidTempPose;
	public QuaterniondStruct jointTempOri;
	public Vec3dStruct jointTempOriIntp;
	public double jointTempAngle;
	public double jointTempAngleIntp;
	public PosedStruct solidPullbackPose;
	public PosedStruct jointTempPose;
	public void ApplyTo(PHIKActuatorState r, bool apply_to_base_class = false) {
		r.solidTempPose = solidTempPose;
		r.jointTempOri = jointTempOri;
		r.jointTempOriIntp = jointTempOriIntp;
		r.jointTempAngle = jointTempAngle;
		r.jointTempAngleIntp = jointTempAngleIntp;
		r.solidPullbackPose = solidPullbackPose;
		r.jointTempPose = jointTempPose;
	}
	public void ApplyFrom(PHIKActuatorState r, bool apply_to_base_class = false) {
		solidTempPose = r.solidTempPose;
		jointTempOri = r.jointTempOri;
		jointTempOriIntp = r.jointTempOriIntp;
		jointTempAngle = r.jointTempAngle;
		jointTempAngleIntp = r.jointTempAngleIntp;
		solidPullbackPose = r.solidPullbackPose;
		jointTempPose = r.jointTempPose;
	}
	public static implicit operator PHIKActuatorState(PHIKActuatorStateStruct m) {
	    PHIKActuatorState r = new PHIKActuatorState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKActuatorStateStruct(PHIKActuatorState r) {
	    PHIKActuatorStateStruct m = new PHIKActuatorStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKActuatorDesc : PHIKActuatorState {
	public PHIKActuatorDesc() { _thisArray[0] = SprExport.Spr_new_PHIKActuatorDesc(); _flag = true; }
	public PHIKActuatorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKActuatorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKActuatorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKActuatorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKActuatorDesc() { if (_flag) { SprExport.Spr_delete_PHIKActuatorDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHIKActuatorDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHIKActuatorDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public float bias {
	    get { return SprExport.Spr_PHIKActuatorDesc_get_bias(_thisArray[0]); }
	    set { SprExport.Spr_PHIKActuatorDesc_set_bias(_thisArray[0], value); }
	}
	public double pullbackRate {
	    get { return SprExport.Spr_PHIKActuatorDesc_get_pullbackRate(_thisArray[0]); }
	    set { SprExport.Spr_PHIKActuatorDesc_set_pullbackRate(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKActuatorDescStruct : PHIKActuatorStateStruct {
        public PHIKActuatorDescStruct() {
            PHIKActuatorDesc desc = new PHIKActuatorDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public float bias;
	public double pullbackRate;
	public void ApplyTo(PHIKActuatorDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.bias = bias;
		r.pullbackRate = pullbackRate;
	}
	public void ApplyFrom(PHIKActuatorDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		bias = r.bias;
		pullbackRate = r.pullbackRate;
	}
	public static implicit operator PHIKActuatorDesc(PHIKActuatorDescStruct m) {
	    PHIKActuatorDesc r = new PHIKActuatorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKActuatorDescStruct(PHIKActuatorDesc r) {
	    PHIKActuatorDescStruct m = new PHIKActuatorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKBallActuatorDesc : PHIKActuatorDesc {
	public PHIKBallActuatorDesc() { _thisArray[0] = SprExport.Spr_new_PHIKBallActuatorDesc(); _flag = true; }
	public PHIKBallActuatorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKBallActuatorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKBallActuatorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKBallActuatorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKBallActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKBallActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKBallActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKBallActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKBallActuatorDesc() { if (_flag) { SprExport.Spr_delete_PHIKBallActuatorDesc(_thisArray[0]); _flag = false; } }
	public Quaterniond pullbackTarget {
	    get { return new Quaterniond(SprExport.Spr_PHIKBallActuatorDesc_addr_pullbackTarget(_thisArray[0])); }
	    set { SprExport.Spr_PHIKBallActuatorDesc_set_pullbackTarget(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKBallActuatorDescStruct : PHIKActuatorDescStruct {
        public PHIKBallActuatorDescStruct() {
            PHIKBallActuatorDesc desc = new PHIKBallActuatorDesc();
            ApplyFrom(desc, true);
        }
	public QuaterniondStruct pullbackTarget;
	public void ApplyTo(PHIKBallActuatorDesc r, bool apply_to_base_class = false) {
		r.pullbackTarget = pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHIKBallActuatorDesc r, bool apply_to_base_class = false) {
		pullbackTarget = r.pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHIKBallActuatorDesc(PHIKBallActuatorDescStruct m) {
	    PHIKBallActuatorDesc r = new PHIKBallActuatorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKBallActuatorDescStruct(PHIKBallActuatorDesc r) {
	    PHIKBallActuatorDescStruct m = new PHIKBallActuatorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKHingeActuatorDesc : PHIKActuatorDesc {
	public PHIKHingeActuatorDesc() { _thisArray[0] = SprExport.Spr_new_PHIKHingeActuatorDesc(); _flag = true; }
	public PHIKHingeActuatorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKHingeActuatorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKHingeActuatorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKHingeActuatorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKHingeActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKHingeActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKHingeActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKHingeActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKHingeActuatorDesc() { if (_flag) { SprExport.Spr_delete_PHIKHingeActuatorDesc(_thisArray[0]); _flag = false; } }
	public double pullbackTarget {
	    get { return SprExport.Spr_PHIKHingeActuatorDesc_get_pullbackTarget(_thisArray[0]); }
	    set { SprExport.Spr_PHIKHingeActuatorDesc_set_pullbackTarget(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKHingeActuatorDescStruct : PHIKActuatorDescStruct {
        public PHIKHingeActuatorDescStruct() {
            PHIKHingeActuatorDesc desc = new PHIKHingeActuatorDesc();
            ApplyFrom(desc, true);
        }
	public double pullbackTarget;
	public void ApplyTo(PHIKHingeActuatorDesc r, bool apply_to_base_class = false) {
		r.pullbackTarget = pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHIKHingeActuatorDesc r, bool apply_to_base_class = false) {
		pullbackTarget = r.pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHIKHingeActuatorDesc(PHIKHingeActuatorDescStruct m) {
	    PHIKHingeActuatorDesc r = new PHIKHingeActuatorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKHingeActuatorDescStruct(PHIKHingeActuatorDesc r) {
	    PHIKHingeActuatorDescStruct m = new PHIKHingeActuatorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHIKSpringActuatorDesc : PHIKActuatorDesc {
	public PHIKSpringActuatorDesc() { _thisArray[0] = SprExport.Spr_new_PHIKSpringActuatorDesc(); _flag = true; }
	public PHIKSpringActuatorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKSpringActuatorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKSpringActuatorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKSpringActuatorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKSpringActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKSpringActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKSpringActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKSpringActuatorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHIKSpringActuatorDesc() { if (_flag) { SprExport.Spr_delete_PHIKSpringActuatorDesc(_thisArray[0]); _flag = false; } }
	public Posed pullbackTarget {
	    get { return new Posed(SprExport.Spr_PHIKSpringActuatorDesc_addr_pullbackTarget(_thisArray[0])); }
	    set { SprExport.Spr_PHIKSpringActuatorDesc_set_pullbackTarget(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHIKSpringActuatorDescStruct : PHIKActuatorDescStruct {
        public PHIKSpringActuatorDescStruct() {
            PHIKSpringActuatorDesc desc = new PHIKSpringActuatorDesc();
            ApplyFrom(desc, true);
        }
	public PosedStruct pullbackTarget;
	public void ApplyTo(PHIKSpringActuatorDesc r, bool apply_to_base_class = false) {
		r.pullbackTarget = pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHIKSpringActuatorDesc r, bool apply_to_base_class = false) {
		pullbackTarget = r.pullbackTarget;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHIKSpringActuatorDesc(PHIKSpringActuatorDescStruct m) {
	    PHIKSpringActuatorDesc r = new PHIKSpringActuatorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHIKSpringActuatorDescStruct(PHIKSpringActuatorDesc r) {
	    PHIKSpringActuatorDescStruct m = new PHIKSpringActuatorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHConstraintDesc : CsObject {
	public PHConstraintDesc() { _thisArray[0] = SprExport.Spr_new_PHConstraintDesc(); _flag = true; }
	public PHConstraintDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHConstraintDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHConstraintDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHConstraintDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHConstraintDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHConstraintDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHConstraintDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHConstraintDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHConstraintDesc() { if (_flag) { SprExport.Spr_delete_PHConstraintDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHConstraintDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHConstraintDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public Posed poseSocket {
	    get { return new Posed(SprExport.Spr_PHConstraintDesc_addr_poseSocket(_thisArray[0])); }
	    set { SprExport.Spr_PHConstraintDesc_set_poseSocket(_thisArray[0], value); }
	}
	public Posed posePlug {
	    get { return new Posed(SprExport.Spr_PHConstraintDesc_addr_posePlug(_thisArray[0])); }
	    set { SprExport.Spr_PHConstraintDesc_set_posePlug(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHConstraintDescStruct : CsObject {
        public PHConstraintDescStruct() {
            PHConstraintDesc desc = new PHConstraintDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public PosedStruct poseSocket;
	public PosedStruct posePlug;
	public void ApplyTo(PHConstraintDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.poseSocket = poseSocket;
		r.posePlug = posePlug;
	}
	public void ApplyFrom(PHConstraintDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		poseSocket = r.poseSocket;
		posePlug = r.posePlug;
	}
	public static implicit operator PHConstraintDesc(PHConstraintDescStruct m) {
	    PHConstraintDesc r = new PHConstraintDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHConstraintDescStruct(PHConstraintDesc r) {
	    PHConstraintDescStruct m = new PHConstraintDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHJointDesc : PHConstraintDesc {
	public PHJointDesc() { _thisArray[0] = SprExport.Spr_new_PHJointDesc(); _flag = true; }
	public PHJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHJointDesc() { if (_flag) { SprExport.Spr_delete_PHJointDesc(_thisArray[0]); _flag = false; } }
	public double fMax {
	    get { return SprExport.Spr_PHJointDesc_get_fMax(_thisArray[0]); }
	    set { SprExport.Spr_PHJointDesc_set_fMax(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHJointDescStruct : PHConstraintDescStruct {
        public PHJointDescStruct() {
            PHJointDesc desc = new PHJointDesc();
            ApplyFrom(desc, true);
        }
	public double fMax;
	public void ApplyTo(PHJointDesc r, bool apply_to_base_class = false) {
		r.fMax = fMax;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHJointDesc r, bool apply_to_base_class = false) {
		fMax = r.fMax;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHJointDesc(PHJointDescStruct m) {
	    PHJointDesc r = new PHJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHJointDescStruct(PHJointDesc r) {
	    PHJointDescStruct m = new PHJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PH1DJointDesc : PHJointDesc {
	public PH1DJointDesc() { _thisArray[0] = SprExport.Spr_new_PH1DJointDesc(); _flag = true; }
	public PH1DJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PH1DJointDesc() { if (_flag) { SprExport.Spr_delete_PH1DJointDesc(_thisArray[0]); _flag = false; } }
	public bool cyclic {
	    get {
	        byte ret = (byte) SprExport.Spr_PH1DJointDesc_get_cyclic(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PH1DJointDesc_set_cyclic(_thisArray[0], (char) val);
	    }
	}
	public double spring {
	    get { return SprExport.Spr_PH1DJointDesc_get_spring(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_spring(_thisArray[0], value); }
	}
	public double damper {
	    get { return SprExport.Spr_PH1DJointDesc_get_damper(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_damper(_thisArray[0], value); }
	}
	public double secondDamper {
	    get { return SprExport.Spr_PH1DJointDesc_get_secondDamper(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_secondDamper(_thisArray[0], value); }
	}
	public double targetPosition {
	    get { return SprExport.Spr_PH1DJointDesc_get_targetPosition(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_targetPosition(_thisArray[0], value); }
	}
	public double targetVelocity {
	    get { return SprExport.Spr_PH1DJointDesc_get_targetVelocity(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_targetVelocity(_thisArray[0], value); }
	}
	public double offsetForce {
	    get { return SprExport.Spr_PH1DJointDesc_get_offsetForce(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_offsetForce(_thisArray[0], value); }
	}
	public double yieldStress {
	    get { return SprExport.Spr_PH1DJointDesc_get_yieldStress(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_yieldStress(_thisArray[0], value); }
	}
	public double hardnessRate {
	    get { return SprExport.Spr_PH1DJointDesc_get_hardnessRate(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_hardnessRate(_thisArray[0], value); }
	}
	public double secondMoment {
	    get { return SprExport.Spr_PH1DJointDesc_get_secondMoment(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointDesc_set_secondMoment(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PH1DJointDescStruct : PHJointDescStruct {
        public PH1DJointDescStruct() {
            PH1DJointDesc desc = new PH1DJointDesc();
            ApplyFrom(desc, true);
        }
	public bool cyclic;
	public double spring;
	public double damper;
	public double secondDamper;
	public double targetPosition;
	public double targetVelocity;
	public double offsetForce;
	public double yieldStress;
	public double hardnessRate;
	public double secondMoment;
	public void ApplyTo(PH1DJointDesc r, bool apply_to_base_class = false) {
		r.cyclic = cyclic;
		r.spring = spring;
		r.damper = damper;
		r.secondDamper = secondDamper;
		r.targetPosition = targetPosition;
		r.targetVelocity = targetVelocity;
		r.offsetForce = offsetForce;
		r.yieldStress = yieldStress;
		r.hardnessRate = hardnessRate;
		r.secondMoment = secondMoment;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PH1DJointDesc r, bool apply_to_base_class = false) {
		cyclic = r.cyclic;
		spring = r.spring;
		damper = r.damper;
		secondDamper = r.secondDamper;
		targetPosition = r.targetPosition;
		targetVelocity = r.targetVelocity;
		offsetForce = r.offsetForce;
		yieldStress = r.yieldStress;
		hardnessRate = r.hardnessRate;
		secondMoment = r.secondMoment;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PH1DJointDesc(PH1DJointDescStruct m) {
	    PH1DJointDesc r = new PH1DJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PH1DJointDescStruct(PH1DJointDesc r) {
	    PH1DJointDescStruct m = new PH1DJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHHingeJointDesc : PH1DJointDesc {
	public PHHingeJointDesc() { _thisArray[0] = SprExport.Spr_new_PHHingeJointDesc(); _flag = true; }
	public PHHingeJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHingeJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHingeJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHingeJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHingeJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHingeJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHingeJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHingeJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHingeJointDesc() { if (_flag) { SprExport.Spr_delete_PHHingeJointDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHHingeJointDescStruct : PH1DJointDescStruct {
        public PHHingeJointDescStruct() {
            PHHingeJointDesc desc = new PHHingeJointDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHHingeJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHHingeJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHHingeJointDesc(PHHingeJointDescStruct m) {
	    PHHingeJointDesc r = new PHHingeJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHingeJointDescStruct(PHHingeJointDesc r) {
	    PHHingeJointDescStruct m = new PHHingeJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSliderJointDesc : PH1DJointDesc {
	public PHSliderJointDesc() { _thisArray[0] = SprExport.Spr_new_PHSliderJointDesc(); _flag = true; }
	public PHSliderJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSliderJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSliderJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSliderJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSliderJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSliderJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSliderJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSliderJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSliderJointDesc() { if (_flag) { SprExport.Spr_delete_PHSliderJointDesc(_thisArray[0]); _flag = false; } }
	public bool bConstraintY {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSliderJointDesc_get_bConstraintY(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSliderJointDesc_set_bConstraintY(_thisArray[0], (char) val);
	    }
	}
	public bool bConstraintRollX {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSliderJointDesc_get_bConstraintRollX(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSliderJointDesc_set_bConstraintRollX(_thisArray[0], (char) val);
	    }
	}
	public bool bConstraintRollZ {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSliderJointDesc_get_bConstraintRollZ(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSliderJointDesc_set_bConstraintRollZ(_thisArray[0], (char) val);
	    }
	}
    }
    [System.Serializable]
    public class PHSliderJointDescStruct : PH1DJointDescStruct {
        public PHSliderJointDescStruct() {
            PHSliderJointDesc desc = new PHSliderJointDesc();
            ApplyFrom(desc, true);
        }
	public bool bConstraintY;
	public bool bConstraintRollX;
	public bool bConstraintRollZ;
	public void ApplyTo(PHSliderJointDesc r, bool apply_to_base_class = false) {
		r.bConstraintY = bConstraintY;
		r.bConstraintRollX = bConstraintRollX;
		r.bConstraintRollZ = bConstraintRollZ;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHSliderJointDesc r, bool apply_to_base_class = false) {
		bConstraintY = r.bConstraintY;
		bConstraintRollX = r.bConstraintRollX;
		bConstraintRollZ = r.bConstraintRollZ;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHSliderJointDesc(PHSliderJointDescStruct m) {
	    PHSliderJointDesc r = new PHSliderJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSliderJointDescStruct(PHSliderJointDesc r) {
	    PHSliderJointDescStruct m = new PHSliderJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPathPoint : CsObject {
	public PHPathPoint() { _thisArray[0] = SprExport.Spr_new_PHPathPoint(); _flag = true; }
	public PHPathPoint(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathPoint(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathPoint(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathPoint(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathPoint(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathPoint(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathPoint(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathPoint(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public PHPathPoint(double _s, Posed _pose) { _thisArray[0] = SprExport.Spr_new_PHPathPoint_4(_s, _pose); _flag = true; }
	~PHPathPoint() { if (_flag) { SprExport.Spr_delete_PHPathPoint(_thisArray[0]); _flag = false; } }
	public double s {
	    get { return SprExport.Spr_PHPathPoint_get_s(_thisArray[0]); }
	    set { SprExport.Spr_PHPathPoint_set_s(_thisArray[0], value); }
	}
	public Posed pose {
	    get { return new Posed(SprExport.Spr_PHPathPoint_addr_pose(_thisArray[0])); }
	    set { SprExport.Spr_PHPathPoint_set_pose(_thisArray[0], value); }
	}
    }
    public partial class PHPathDesc : CsObject {
	public PHPathDesc() { _thisArray[0] = SprExport.Spr_new_PHPathDesc(); _flag = true; }
	public PHPathDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPathDesc() { if (_flag) { SprExport.Spr_delete_PHPathDesc(_thisArray[0]); _flag = false; } }
        public vectorwrapper_PHPathPoint points {
            get { return new vectorwrapper_PHPathPoint(SprExport.Spr_PHPathDesc_addr_points(_thisArray[0])); }
            set { SprExport.Spr_PHPathDesc_set_points(_thisArray[0], value); }
        }
	public bool bLoop {
	    get {
	        byte ret = (byte) SprExport.Spr_PHPathDesc_get_bLoop(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHPathDesc_set_bLoop(_thisArray[0], (char) val);
	    }
	}
    }
    [System.Serializable]
    public class PHPathDescStruct : CsObject {
        public PHPathDescStruct() {
            PHPathDesc desc = new PHPathDesc();
            ApplyFrom(desc, false);
        }
	public vectorwrapper_PHPathPoint points;
	public bool bLoop;
	public void ApplyTo(PHPathDesc r, bool apply_to_base_class = false) {
		r.points = points;
		r.bLoop = bLoop;
	}
	public void ApplyFrom(PHPathDesc r, bool apply_to_base_class = false) {
		points = r.points;
		bLoop = r.bLoop;
	}
	public static implicit operator PHPathDesc(PHPathDescStruct m) {
	    PHPathDesc r = new PHPathDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPathDescStruct(PHPathDesc r) {
	    PHPathDescStruct m = new PHPathDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPathJointDesc : PH1DJointDesc {
	public PHPathJointDesc() { _thisArray[0] = SprExport.Spr_new_PHPathJointDesc(); _flag = true; }
	public PHPathJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPathJointDesc() { if (_flag) { SprExport.Spr_delete_PHPathJointDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHPathJointDescStruct : PH1DJointDescStruct {
        public PHPathJointDescStruct() {
            PHPathJointDesc desc = new PHPathJointDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHPathJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPathJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPathJointDesc(PHPathJointDescStruct m) {
	    PHPathJointDesc r = new PHPathJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPathJointDescStruct(PHPathJointDesc r) {
	    PHPathJointDescStruct m = new PHPathJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHGenericJointCallback : CsObject {
	public PHGenericJointCallback() { _thisArray[0] = SprExport.Spr_new_PHGenericJointCallback(); _flag = true; }
	public PHGenericJointCallback(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGenericJointCallback(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGenericJointCallback(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGenericJointCallback(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGenericJointCallback(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGenericJointCallback(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGenericJointCallback(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGenericJointCallback(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHGenericJointCallback() { if (_flag) { SprExport.Spr_delete_PHGenericJointCallback(_thisArray[0]); _flag = false; } }
	public void SetParam(PHGenericJointIf jnt, string name, double value) {
            IntPtr remote2 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointCallback_SetParam((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) remote2, (double) value);
            Marshal.FreeBSTR(remote2);
	}
	public bool IsCyclic(PHGenericJointIf jnt) {
	    char ret = SprExport.Spr_PHGenericJointCallback_IsCyclic((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0]);
	    return (ret == 0) ? false : true;
	}
	public void GetMovableAxes(PHGenericJointIf jnt, int n, int indices) {
	    SprExport.Spr_PHGenericJointCallback_GetMovableAxes((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (int) n, (int) indices);
	}
	public void CompBias(PHGenericJointIf jnt, Vec3d dbv, Vec3d dbw, Vec3d prel, Quaterniond qrel, Vec3d vrel, Vec3d wrel) {
	    SprExport.Spr_PHGenericJointCallback_CompBias((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) dbv, (IntPtr) dbw, (IntPtr) prel, (IntPtr) qrel, (IntPtr) vrel, (IntPtr) wrel);
	}
	public void CompError(PHGenericJointIf jnt, Vec3d Bv, Vec3d Bw, Vec3d prel, Quaterniond qrel) {
	    SprExport.Spr_PHGenericJointCallback_CompError((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) Bv, (IntPtr) Bw, (IntPtr) prel, (IntPtr) qrel);
	}
	public void UpdateJointState(PHGenericJointIf jnt, double pos, double vel, Vec3d prel, Quaterniond qrel, Vec3d vrel, Vec3d wrel) {
	    SprExport.Spr_PHGenericJointCallback_UpdateJointState((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (double) pos, (double) vel, (IntPtr) prel, (IntPtr) qrel, (IntPtr) vrel, (IntPtr) wrel);
	}
	public void CompJointJacobian(PHGenericJointIf jnt, Vec3d Jv, Vec3d Jw, double pos) {
	    SprExport.Spr_PHGenericJointCallback_CompJointJacobian((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) Jv, (IntPtr) Jw, (double) pos);
	}
	public void CompJointCoriolisAccel(PHGenericJointIf jnt, Vec3d cv, Vec3d cw, double pos, double vel) {
	    SprExport.Spr_PHGenericJointCallback_CompJointCoriolisAccel((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) cv, (IntPtr) cw, (double) pos, (double) vel);
	}
	public void CompRelativePosition(PHGenericJointIf jnt, Vec3d prel, Quaterniond qrel, double pos) {
	    SprExport.Spr_PHGenericJointCallback_CompRelativePosition((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) prel, (IntPtr) qrel, (double) pos);
	}
	public void CompRelativeVelocity(PHGenericJointIf jnt, Vec3d vrel, Vec3d wrel, double pos, double vel) {
	    SprExport.Spr_PHGenericJointCallback_CompRelativeVelocity((IntPtr) _thisArray[0], (IntPtr) jnt._thisArray[0], (IntPtr) vrel, (IntPtr) wrel, (double) pos, (double) vel);
	}
    }
    public partial class PHGenericJointDesc : PH1DJointDesc {
	public PHGenericJointDesc() { _thisArray[0] = SprExport.Spr_new_PHGenericJointDesc(); _flag = true; }
	public PHGenericJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGenericJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGenericJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGenericJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGenericJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGenericJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGenericJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGenericJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHGenericJointDesc() { if (_flag) { SprExport.Spr_delete_PHGenericJointDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHGenericJointDescStruct : PH1DJointDescStruct {
        public PHGenericJointDescStruct() {
            PHGenericJointDesc desc = new PHGenericJointDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHGenericJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHGenericJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHGenericJointDesc(PHGenericJointDescStruct m) {
	    PHGenericJointDesc r = new PHGenericJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHGenericJointDescStruct(PHGenericJointDesc r) {
	    PHGenericJointDescStruct m = new PHGenericJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointDesc : PHJointDesc {
	public PHBallJointDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointDesc(); _flag = true; }
	public PHBallJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointDesc(_thisArray[0]); _flag = false; } }
	public double spring {
	    get { return SprExport.Spr_PHBallJointDesc_get_spring(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointDesc_set_spring(_thisArray[0], value); }
	}
	public double damper {
	    get { return SprExport.Spr_PHBallJointDesc_get_damper(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointDesc_set_damper(_thisArray[0], value); }
	}
	public Vec3d secondDamper {
	    get { return new Vec3d(SprExport.Spr_PHBallJointDesc_addr_secondDamper(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointDesc_set_secondDamper(_thisArray[0], value); }
	}
	public Quaterniond targetPosition {
	    get { return new Quaterniond(SprExport.Spr_PHBallJointDesc_addr_targetPosition(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointDesc_set_targetPosition(_thisArray[0], value); }
	}
	public Vec3d targetVelocity {
	    get { return new Vec3d(SprExport.Spr_PHBallJointDesc_addr_targetVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointDesc_set_targetVelocity(_thisArray[0], value); }
	}
	public Vec3d offsetForce {
	    get { return new Vec3d(SprExport.Spr_PHBallJointDesc_addr_offsetForce(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointDesc_set_offsetForce(_thisArray[0], value); }
	}
	public double yieldStress {
	    get { return SprExport.Spr_PHBallJointDesc_get_yieldStress(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointDesc_set_yieldStress(_thisArray[0], value); }
	}
	public double hardnessRate {
	    get { return SprExport.Spr_PHBallJointDesc_get_hardnessRate(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointDesc_set_hardnessRate(_thisArray[0], value); }
	}
	public Vec3d secondMoment {
	    get { return new Vec3d(SprExport.Spr_PHBallJointDesc_addr_secondMoment(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointDesc_set_secondMoment(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHBallJointDescStruct : PHJointDescStruct {
        public PHBallJointDescStruct() {
            PHBallJointDesc desc = new PHBallJointDesc();
            ApplyFrom(desc, true);
        }
	public double spring;
	public double damper;
	public Vec3dStruct secondDamper;
	public QuaterniondStruct targetPosition;
	public Vec3dStruct targetVelocity;
	public Vec3dStruct offsetForce;
	public double yieldStress;
	public double hardnessRate;
	public Vec3dStruct secondMoment;
	public void ApplyTo(PHBallJointDesc r, bool apply_to_base_class = false) {
		r.spring = spring;
		r.damper = damper;
		r.secondDamper = secondDamper;
		r.targetPosition = targetPosition;
		r.targetVelocity = targetVelocity;
		r.offsetForce = offsetForce;
		r.yieldStress = yieldStress;
		r.hardnessRate = hardnessRate;
		r.secondMoment = secondMoment;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointDesc r, bool apply_to_base_class = false) {
		spring = r.spring;
		damper = r.damper;
		secondDamper = r.secondDamper;
		targetPosition = r.targetPosition;
		targetVelocity = r.targetVelocity;
		offsetForce = r.offsetForce;
		yieldStress = r.yieldStress;
		hardnessRate = r.hardnessRate;
		secondMoment = r.secondMoment;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointDesc(PHBallJointDescStruct m) {
	    PHBallJointDesc r = new PHBallJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointDescStruct(PHBallJointDesc r) {
	    PHBallJointDescStruct m = new PHBallJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFixJointDesc : PHJointDesc {
	public PHFixJointDesc() { _thisArray[0] = SprExport.Spr_new_PHFixJointDesc(); _flag = true; }
	public PHFixJointDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFixJointDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFixJointDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFixJointDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFixJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFixJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFixJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFixJointDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFixJointDesc() { if (_flag) { SprExport.Spr_delete_PHFixJointDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHFixJointDescStruct : PHJointDescStruct {
        public PHFixJointDescStruct() {
            PHFixJointDesc desc = new PHFixJointDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHFixJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFixJointDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFixJointDesc(PHFixJointDescStruct m) {
	    PHFixJointDesc r = new PHFixJointDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFixJointDescStruct(PHFixJointDesc r) {
	    PHFixJointDescStruct m = new PHFixJointDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSpringDesc : PHJointDesc {
	public PHSpringDesc() { _thisArray[0] = SprExport.Spr_new_PHSpringDesc(); _flag = true; }
	public PHSpringDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSpringDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSpringDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSpringDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSpringDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSpringDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSpringDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSpringDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSpringDesc() { if (_flag) { SprExport.Spr_delete_PHSpringDesc(_thisArray[0]); _flag = false; } }
	public Vec3d targetPosition {
	    get { return new Vec3d(SprExport.Spr_PHSpringDesc_addr_targetPosition(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_targetPosition(_thisArray[0], value); }
	}
	public Quaterniond targetOrientation {
	    get { return new Quaterniond(SprExport.Spr_PHSpringDesc_addr_targetOrientation(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_targetOrientation(_thisArray[0], value); }
	}
	public Vec3d spring {
	    get { return new Vec3d(SprExport.Spr_PHSpringDesc_addr_spring(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_spring(_thisArray[0], value); }
	}
	public Vec3d damper {
	    get { return new Vec3d(SprExport.Spr_PHSpringDesc_addr_damper(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_damper(_thisArray[0], value); }
	}
	public Vec3d secondDamper {
	    get { return new Vec3d(SprExport.Spr_PHSpringDesc_addr_secondDamper(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_secondDamper(_thisArray[0], value); }
	}
	public double springOri {
	    get { return SprExport.Spr_PHSpringDesc_get_springOri(_thisArray[0]); }
	    set { SprExport.Spr_PHSpringDesc_set_springOri(_thisArray[0], value); }
	}
	public double damperOri {
	    get { return SprExport.Spr_PHSpringDesc_get_damperOri(_thisArray[0]); }
	    set { SprExport.Spr_PHSpringDesc_set_damperOri(_thisArray[0], value); }
	}
	public double secondDamperOri {
	    get { return SprExport.Spr_PHSpringDesc_get_secondDamperOri(_thisArray[0]); }
	    set { SprExport.Spr_PHSpringDesc_set_secondDamperOri(_thisArray[0], value); }
	}
	public double yieldStress {
	    get { return SprExport.Spr_PHSpringDesc_get_yieldStress(_thisArray[0]); }
	    set { SprExport.Spr_PHSpringDesc_set_yieldStress(_thisArray[0], value); }
	}
	public double hardnessRate {
	    get { return SprExport.Spr_PHSpringDesc_get_hardnessRate(_thisArray[0]); }
	    set { SprExport.Spr_PHSpringDesc_set_hardnessRate(_thisArray[0], value); }
	}
	public Vec3d secondMoment {
	    get { return new Vec3d(SprExport.Spr_PHSpringDesc_addr_secondMoment(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_secondMoment(_thisArray[0], value); }
	}
	public Vec6d targetVelocity {
	    get { return new Vec6d(SprExport.Spr_PHSpringDesc_addr_targetVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_targetVelocity(_thisArray[0], value); }
	}
	public Vec6d offsetForce {
	    get { return new Vec6d(SprExport.Spr_PHSpringDesc_addr_offsetForce(_thisArray[0])); }
	    set { SprExport.Spr_PHSpringDesc_set_offsetForce(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHSpringDescStruct : PHJointDescStruct {
        public PHSpringDescStruct() {
            PHSpringDesc desc = new PHSpringDesc();
            ApplyFrom(desc, true);
        }
	public Vec3dStruct targetPosition;
	public QuaterniondStruct targetOrientation;
	public Vec3dStruct spring;
	public Vec3dStruct damper;
	public Vec3dStruct secondDamper;
	public double springOri;
	public double damperOri;
	public double secondDamperOri;
	public double yieldStress;
	public double hardnessRate;
	public Vec3dStruct secondMoment;
	public Vec6dStruct targetVelocity;
	public Vec6dStruct offsetForce;
	public void ApplyTo(PHSpringDesc r, bool apply_to_base_class = false) {
		r.targetPosition = targetPosition;
		r.targetOrientation = targetOrientation;
		r.spring = spring;
		r.damper = damper;
		r.secondDamper = secondDamper;
		r.springOri = springOri;
		r.damperOri = damperOri;
		r.secondDamperOri = secondDamperOri;
		r.yieldStress = yieldStress;
		r.hardnessRate = hardnessRate;
		r.secondMoment = secondMoment;
		r.targetVelocity = targetVelocity;
		r.offsetForce = offsetForce;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHSpringDesc r, bool apply_to_base_class = false) {
		targetPosition = r.targetPosition;
		targetOrientation = r.targetOrientation;
		spring = r.spring;
		damper = r.damper;
		secondDamper = r.secondDamper;
		springOri = r.springOri;
		damperOri = r.damperOri;
		secondDamperOri = r.secondDamperOri;
		yieldStress = r.yieldStress;
		hardnessRate = r.hardnessRate;
		secondMoment = r.secondMoment;
		targetVelocity = r.targetVelocity;
		offsetForce = r.offsetForce;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHSpringDesc(PHSpringDescStruct m) {
	    PHSpringDesc r = new PHSpringDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSpringDescStruct(PHSpringDesc r) {
	    PHSpringDescStruct m = new PHSpringDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHMateDesc : PHJointDesc {
	public PHMateDesc() { _thisArray[0] = SprExport.Spr_new_PHMateDesc(); _flag = true; }
	public PHMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHMateDesc() { if (_flag) { SprExport.Spr_delete_PHMateDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHMateDescStruct : PHJointDescStruct {
        public PHMateDescStruct() {
            PHMateDesc desc = new PHMateDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHMateDesc(PHMateDescStruct m) {
	    PHMateDesc r = new PHMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHMateDescStruct(PHMateDesc r) {
	    PHMateDescStruct m = new PHMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPointToPointMateDesc : PHMateDesc {
	public PHPointToPointMateDesc() { _thisArray[0] = SprExport.Spr_new_PHPointToPointMateDesc(); _flag = true; }
	public PHPointToPointMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToPointMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToPointMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToPointMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToPointMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToPointMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToPointMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToPointMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPointToPointMateDesc() { if (_flag) { SprExport.Spr_delete_PHPointToPointMateDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHPointToPointMateDescStruct : PHMateDescStruct {
        public PHPointToPointMateDescStruct() {
            PHPointToPointMateDesc desc = new PHPointToPointMateDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHPointToPointMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPointToPointMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPointToPointMateDesc(PHPointToPointMateDescStruct m) {
	    PHPointToPointMateDesc r = new PHPointToPointMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPointToPointMateDescStruct(PHPointToPointMateDesc r) {
	    PHPointToPointMateDescStruct m = new PHPointToPointMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPointToLineMateDesc : PHMateDesc {
	public PHPointToLineMateDesc() { _thisArray[0] = SprExport.Spr_new_PHPointToLineMateDesc(); _flag = true; }
	public PHPointToLineMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToLineMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToLineMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToLineMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPointToLineMateDesc() { if (_flag) { SprExport.Spr_delete_PHPointToLineMateDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHPointToLineMateDescStruct : PHMateDescStruct {
        public PHPointToLineMateDescStruct() {
            PHPointToLineMateDesc desc = new PHPointToLineMateDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHPointToLineMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPointToLineMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPointToLineMateDesc(PHPointToLineMateDescStruct m) {
	    PHPointToLineMateDesc r = new PHPointToLineMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPointToLineMateDescStruct(PHPointToLineMateDesc r) {
	    PHPointToLineMateDescStruct m = new PHPointToLineMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPointToPlaneMateDesc : PHMateDesc {
	public PHPointToPlaneMateDesc() { _thisArray[0] = SprExport.Spr_new_PHPointToPlaneMateDesc(); _flag = true; }
	public PHPointToPlaneMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToPlaneMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToPlaneMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToPlaneMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPointToPlaneMateDesc() { if (_flag) { SprExport.Spr_delete_PHPointToPlaneMateDesc(_thisArray[0]); _flag = false; } }
	public Vec2d range {
	    get { return new Vec2d(SprExport.Spr_PHPointToPlaneMateDesc_addr_range(_thisArray[0])); }
	    set { SprExport.Spr_PHPointToPlaneMateDesc_set_range(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHPointToPlaneMateDescStruct : PHMateDescStruct {
        public PHPointToPlaneMateDescStruct() {
            PHPointToPlaneMateDesc desc = new PHPointToPlaneMateDesc();
            ApplyFrom(desc, true);
        }
	public Vec2dStruct range;
	public void ApplyTo(PHPointToPlaneMateDesc r, bool apply_to_base_class = false) {
		r.range = range;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPointToPlaneMateDesc r, bool apply_to_base_class = false) {
		range = r.range;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPointToPlaneMateDesc(PHPointToPlaneMateDescStruct m) {
	    PHPointToPlaneMateDesc r = new PHPointToPlaneMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPointToPlaneMateDescStruct(PHPointToPlaneMateDesc r) {
	    PHPointToPlaneMateDescStruct m = new PHPointToPlaneMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHLineToLineMateDesc : PHMateDesc {
	public PHLineToLineMateDesc() { _thisArray[0] = SprExport.Spr_new_PHLineToLineMateDesc(); _flag = true; }
	public PHLineToLineMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHLineToLineMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHLineToLineMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHLineToLineMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHLineToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHLineToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHLineToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHLineToLineMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHLineToLineMateDesc() { if (_flag) { SprExport.Spr_delete_PHLineToLineMateDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHLineToLineMateDescStruct : PHMateDescStruct {
        public PHLineToLineMateDescStruct() {
            PHLineToLineMateDesc desc = new PHLineToLineMateDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHLineToLineMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHLineToLineMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHLineToLineMateDesc(PHLineToLineMateDescStruct m) {
	    PHLineToLineMateDesc r = new PHLineToLineMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHLineToLineMateDescStruct(PHLineToLineMateDesc r) {
	    PHLineToLineMateDescStruct m = new PHLineToLineMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPlaneToPlaneMateDesc : PHMateDesc {
	public PHPlaneToPlaneMateDesc() { _thisArray[0] = SprExport.Spr_new_PHPlaneToPlaneMateDesc(); _flag = true; }
	public PHPlaneToPlaneMateDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPlaneToPlaneMateDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPlaneToPlaneMateDesc() { if (_flag) { SprExport.Spr_delete_PHPlaneToPlaneMateDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHPlaneToPlaneMateDescStruct : PHMateDescStruct {
        public PHPlaneToPlaneMateDescStruct() {
            PHPlaneToPlaneMateDesc desc = new PHPlaneToPlaneMateDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHPlaneToPlaneMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPlaneToPlaneMateDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPlaneToPlaneMateDesc(PHPlaneToPlaneMateDescStruct m) {
	    PHPlaneToPlaneMateDesc r = new PHPlaneToPlaneMateDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPlaneToPlaneMateDescStruct(PHPlaneToPlaneMateDesc r) {
	    PHPlaneToPlaneMateDescStruct m = new PHPlaneToPlaneMateDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHTreeNodeDesc : CsObject {
	public PHTreeNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHTreeNodeDesc(); _flag = true; }
	public PHTreeNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHTreeNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHTreeNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHTreeNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHTreeNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHTreeNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHTreeNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHTreeNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHTreeNodeDesc() { if (_flag) { SprExport.Spr_delete_PHTreeNodeDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHTreeNodeDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHTreeNodeDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
    }
    [System.Serializable]
    public class PHTreeNodeDescStruct : CsObject {
        public PHTreeNodeDescStruct() {
            PHTreeNodeDesc desc = new PHTreeNodeDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public void ApplyTo(PHTreeNodeDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
	}
	public void ApplyFrom(PHTreeNodeDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
	}
	public static implicit operator PHTreeNodeDesc(PHTreeNodeDescStruct m) {
	    PHTreeNodeDesc r = new PHTreeNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHTreeNodeDescStruct(PHTreeNodeDesc r) {
	    PHTreeNodeDescStruct m = new PHTreeNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHRootNodeDesc : PHTreeNodeDesc {
	public PHRootNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHRootNodeDesc(); _flag = true; }
	public PHRootNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHRootNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHRootNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHRootNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHRootNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHRootNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHRootNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHRootNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHRootNodeDesc() { if (_flag) { SprExport.Spr_delete_PHRootNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHRootNodeDescStruct : PHTreeNodeDescStruct {
        public PHRootNodeDescStruct() {
            PHRootNodeDesc desc = new PHRootNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHRootNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHRootNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHRootNodeDesc(PHRootNodeDescStruct m) {
	    PHRootNodeDesc r = new PHRootNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHRootNodeDescStruct(PHRootNodeDesc r) {
	    PHRootNodeDescStruct m = new PHRootNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHTreeNode1DDesc : PHTreeNodeDesc {
	public PHTreeNode1DDesc() { _thisArray[0] = SprExport.Spr_new_PHTreeNode1DDesc(); _flag = true; }
	public PHTreeNode1DDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHTreeNode1DDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHTreeNode1DDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHTreeNode1DDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHTreeNode1DDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHTreeNode1DDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHTreeNode1DDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHTreeNode1DDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHTreeNode1DDesc() { if (_flag) { SprExport.Spr_delete_PHTreeNode1DDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHTreeNode1DDescStruct : PHTreeNodeDescStruct {
        public PHTreeNode1DDescStruct() {
            PHTreeNode1DDesc desc = new PHTreeNode1DDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHTreeNode1DDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHTreeNode1DDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHTreeNode1DDesc(PHTreeNode1DDescStruct m) {
	    PHTreeNode1DDesc r = new PHTreeNode1DDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHTreeNode1DDescStruct(PHTreeNode1DDesc r) {
	    PHTreeNode1DDescStruct m = new PHTreeNode1DDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHHingeJointNodeDesc : PHTreeNode1DDesc {
	public PHHingeJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHHingeJointNodeDesc(); _flag = true; }
	public PHHingeJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHingeJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHingeJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHingeJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHingeJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHingeJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHingeJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHingeJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHingeJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHHingeJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHHingeJointNodeDescStruct : PHTreeNode1DDescStruct {
        public PHHingeJointNodeDescStruct() {
            PHHingeJointNodeDesc desc = new PHHingeJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHHingeJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHHingeJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHHingeJointNodeDesc(PHHingeJointNodeDescStruct m) {
	    PHHingeJointNodeDesc r = new PHHingeJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHingeJointNodeDescStruct(PHHingeJointNodeDesc r) {
	    PHHingeJointNodeDescStruct m = new PHHingeJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSliderJointNodeDesc : PHTreeNode1DDesc {
	public PHSliderJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHSliderJointNodeDesc(); _flag = true; }
	public PHSliderJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSliderJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSliderJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSliderJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSliderJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSliderJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSliderJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSliderJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSliderJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHSliderJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHSliderJointNodeDescStruct : PHTreeNode1DDescStruct {
        public PHSliderJointNodeDescStruct() {
            PHSliderJointNodeDesc desc = new PHSliderJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHSliderJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHSliderJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHSliderJointNodeDesc(PHSliderJointNodeDescStruct m) {
	    PHSliderJointNodeDesc r = new PHSliderJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSliderJointNodeDescStruct(PHSliderJointNodeDesc r) {
	    PHSliderJointNodeDescStruct m = new PHSliderJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHPathJointNodeDesc : PHTreeNode1DDesc {
	public PHPathJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHPathJointNodeDesc(); _flag = true; }
	public PHPathJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHPathJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHPathJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHPathJointNodeDescStruct : PHTreeNode1DDescStruct {
        public PHPathJointNodeDescStruct() {
            PHPathJointNodeDesc desc = new PHPathJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHPathJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHPathJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHPathJointNodeDesc(PHPathJointNodeDescStruct m) {
	    PHPathJointNodeDesc r = new PHPathJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHPathJointNodeDescStruct(PHPathJointNodeDesc r) {
	    PHPathJointNodeDescStruct m = new PHPathJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHGenericJointNodeDesc : PHTreeNode1DDesc {
	public PHGenericJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHGenericJointNodeDesc(); _flag = true; }
	public PHGenericJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGenericJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGenericJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGenericJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGenericJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGenericJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGenericJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGenericJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHGenericJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHGenericJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHGenericJointNodeDescStruct : PHTreeNode1DDescStruct {
        public PHGenericJointNodeDescStruct() {
            PHGenericJointNodeDesc desc = new PHGenericJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHGenericJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHGenericJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHGenericJointNodeDesc(PHGenericJointNodeDescStruct m) {
	    PHGenericJointNodeDesc r = new PHGenericJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHGenericJointNodeDescStruct(PHGenericJointNodeDesc r) {
	    PHGenericJointNodeDescStruct m = new PHGenericJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointNodeDesc : PHTreeNodeDesc {
	public PHBallJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointNodeDesc(); _flag = true; }
	public PHBallJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHBallJointNodeDescStruct : PHTreeNodeDescStruct {
        public PHBallJointNodeDescStruct() {
            PHBallJointNodeDesc desc = new PHBallJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHBallJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointNodeDesc(PHBallJointNodeDescStruct m) {
	    PHBallJointNodeDesc r = new PHBallJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointNodeDescStruct(PHBallJointNodeDesc r) {
	    PHBallJointNodeDescStruct m = new PHBallJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHFixJointNodeDesc : PHTreeNodeDesc {
	public PHFixJointNodeDesc() { _thisArray[0] = SprExport.Spr_new_PHFixJointNodeDesc(); _flag = true; }
	public PHFixJointNodeDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFixJointNodeDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFixJointNodeDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFixJointNodeDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFixJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFixJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFixJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFixJointNodeDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHFixJointNodeDesc() { if (_flag) { SprExport.Spr_delete_PHFixJointNodeDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHFixJointNodeDescStruct : PHTreeNodeDescStruct {
        public PHFixJointNodeDescStruct() {
            PHFixJointNodeDesc desc = new PHFixJointNodeDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHFixJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHFixJointNodeDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHFixJointNodeDesc(PHFixJointNodeDescStruct m) {
	    PHFixJointNodeDesc r = new PHFixJointNodeDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHFixJointNodeDescStruct(PHFixJointNodeDesc r) {
	    PHFixJointNodeDescStruct m = new PHFixJointNodeDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHGearDesc : CsObject {
	public PHGearDesc() { _thisArray[0] = SprExport.Spr_new_PHGearDesc(); _flag = true; }
	public PHGearDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGearDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGearDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGearDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGearDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGearDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGearDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGearDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHGearDesc() { if (_flag) { SprExport.Spr_delete_PHGearDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHGearDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHGearDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public double ratio {
	    get { return SprExport.Spr_PHGearDesc_get_ratio(_thisArray[0]); }
	    set { SprExport.Spr_PHGearDesc_set_ratio(_thisArray[0], value); }
	}
	public double offset {
	    get { return SprExport.Spr_PHGearDesc_get_offset(_thisArray[0]); }
	    set { SprExport.Spr_PHGearDesc_set_offset(_thisArray[0], value); }
	}
	public int mode {
	    get { return SprExport.Spr_PHGearDesc_get_mode(_thisArray[0]); }
	    set { SprExport.Spr_PHGearDesc_set_mode(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHGearDescStruct : CsObject {
        public PHGearDescStruct() {
            PHGearDesc desc = new PHGearDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public double ratio;
	public double offset;
	public int mode;
	public void ApplyTo(PHGearDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.ratio = ratio;
		r.offset = offset;
		r.mode = mode;
	}
	public void ApplyFrom(PHGearDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		ratio = r.ratio;
		offset = r.offset;
		mode = r.mode;
	}
	public static implicit operator PHGearDesc(PHGearDescStruct m) {
	    PHGearDesc r = new PHGearDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHGearDescStruct(PHGearDesc r) {
	    PHGearDescStruct m = new PHGearDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PH1DJointLimitDesc : CsObject {
	public PH1DJointLimitDesc() { _thisArray[0] = SprExport.Spr_new_PH1DJointLimitDesc(); _flag = true; }
	public PH1DJointLimitDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointLimitDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointLimitDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointLimitDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PH1DJointLimitDesc() { if (_flag) { SprExport.Spr_delete_PH1DJointLimitDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PH1DJointLimitDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PH1DJointLimitDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public double spring {
	    get { return SprExport.Spr_PH1DJointLimitDesc_get_spring(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointLimitDesc_set_spring(_thisArray[0], value); }
	}
	public double damper {
	    get { return SprExport.Spr_PH1DJointLimitDesc_get_damper(_thisArray[0]); }
	    set { SprExport.Spr_PH1DJointLimitDesc_set_damper(_thisArray[0], value); }
	}
	public Vec2d range {
	    get { return new Vec2d(SprExport.Spr_PH1DJointLimitDesc_addr_range(_thisArray[0])); }
	    set { SprExport.Spr_PH1DJointLimitDesc_set_range(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PH1DJointLimitDescStruct : CsObject {
        public PH1DJointLimitDescStruct() {
            PH1DJointLimitDesc desc = new PH1DJointLimitDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public double spring;
	public double damper;
	public Vec2dStruct range;
	public void ApplyTo(PH1DJointLimitDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.spring = spring;
		r.damper = damper;
		r.range = range;
	}
	public void ApplyFrom(PH1DJointLimitDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		spring = r.spring;
		damper = r.damper;
		range = r.range;
	}
	public static implicit operator PH1DJointLimitDesc(PH1DJointLimitDescStruct m) {
	    PH1DJointLimitDesc r = new PH1DJointLimitDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PH1DJointLimitDescStruct(PH1DJointLimitDesc r) {
	    PH1DJointLimitDescStruct m = new PH1DJointLimitDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointLimitDesc : CsObject {
	public PHBallJointLimitDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointLimitDesc(); _flag = true; }
	public PHBallJointLimitDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointLimitDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointLimitDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointLimitDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointLimitDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointLimitDesc(_thisArray[0]); _flag = false; } }
	public bool bEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHBallJointLimitDesc_get_bEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHBallJointLimitDesc_set_bEnabled(_thisArray[0], (char) val);
	    }
	}
	public double spring {
	    get { return SprExport.Spr_PHBallJointLimitDesc_get_spring(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointLimitDesc_set_spring(_thisArray[0], value); }
	}
	public double damper {
	    get { return SprExport.Spr_PHBallJointLimitDesc_get_damper(_thisArray[0]); }
	    set { SprExport.Spr_PHBallJointLimitDesc_set_damper(_thisArray[0], value); }
	}
	public Vec3d limitDir {
	    get { return new Vec3d(SprExport.Spr_PHBallJointLimitDesc_addr_limitDir(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointLimitDesc_set_limitDir(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHBallJointLimitDescStruct : CsObject {
        public PHBallJointLimitDescStruct() {
            PHBallJointLimitDesc desc = new PHBallJointLimitDesc();
            ApplyFrom(desc, false);
        }
	public bool bEnabled;
	public double spring;
	public double damper;
	public Vec3dStruct limitDir;
	public void ApplyTo(PHBallJointLimitDesc r, bool apply_to_base_class = false) {
		r.bEnabled = bEnabled;
		r.spring = spring;
		r.damper = damper;
		r.limitDir = limitDir;
	}
	public void ApplyFrom(PHBallJointLimitDesc r, bool apply_to_base_class = false) {
		bEnabled = r.bEnabled;
		spring = r.spring;
		damper = r.damper;
		limitDir = r.limitDir;
	}
	public static implicit operator PHBallJointLimitDesc(PHBallJointLimitDescStruct m) {
	    PHBallJointLimitDesc r = new PHBallJointLimitDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointLimitDescStruct(PHBallJointLimitDesc r) {
	    PHBallJointLimitDescStruct m = new PHBallJointLimitDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointConeLimitDesc : PHBallJointLimitDesc {
	public PHBallJointConeLimitDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointConeLimitDesc(); _flag = true; }
	public PHBallJointConeLimitDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointConeLimitDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointConeLimitDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointConeLimitDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointConeLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointConeLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointConeLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointConeLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointConeLimitDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointConeLimitDesc(_thisArray[0]); _flag = false; } }
	public Vec2d limitSwing {
	    get { return new Vec2d(SprExport.Spr_PHBallJointConeLimitDesc_addr_limitSwing(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointConeLimitDesc_set_limitSwing(_thisArray[0], value); }
	}
	public Vec2d limitSwingDir {
	    get { return new Vec2d(SprExport.Spr_PHBallJointConeLimitDesc_addr_limitSwingDir(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointConeLimitDesc_set_limitSwingDir(_thisArray[0], value); }
	}
	public Vec2d limitTwist {
	    get { return new Vec2d(SprExport.Spr_PHBallJointConeLimitDesc_addr_limitTwist(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointConeLimitDesc_set_limitTwist(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHBallJointConeLimitDescStruct : PHBallJointLimitDescStruct {
        public PHBallJointConeLimitDescStruct() {
            PHBallJointConeLimitDesc desc = new PHBallJointConeLimitDesc();
            ApplyFrom(desc, true);
        }
	public Vec2dStruct limitSwing;
	public Vec2dStruct limitSwingDir;
	public Vec2dStruct limitTwist;
	public void ApplyTo(PHBallJointConeLimitDesc r, bool apply_to_base_class = false) {
		r.limitSwing = limitSwing;
		r.limitSwingDir = limitSwingDir;
		r.limitTwist = limitTwist;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointConeLimitDesc r, bool apply_to_base_class = false) {
		limitSwing = r.limitSwing;
		limitSwingDir = r.limitSwingDir;
		limitTwist = r.limitTwist;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointConeLimitDesc(PHBallJointConeLimitDescStruct m) {
	    PHBallJointConeLimitDesc r = new PHBallJointConeLimitDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointConeLimitDescStruct(PHBallJointConeLimitDesc r) {
	    PHBallJointConeLimitDescStruct m = new PHBallJointConeLimitDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSplineLimitNode : CsObject {
	public PHSplineLimitNode() { _thisArray[0] = SprExport.Spr_new_PHSplineLimitNode(); _flag = true; }
	public PHSplineLimitNode(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSplineLimitNode(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSplineLimitNode(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSplineLimitNode(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSplineLimitNode(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSplineLimitNode(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSplineLimitNode(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSplineLimitNode(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public PHSplineLimitNode(double s, double sd, double ds, double dsd, double tmn, double tmx) { _thisArray[0] = SprExport.Spr_new_PHSplineLimitNode_8(s, sd, ds, dsd, tmn, tmx); _flag = true; }
	~PHSplineLimitNode() { if (_flag) { SprExport.Spr_delete_PHSplineLimitNode(_thisArray[0]); _flag = false; } }
	public double swing {
	    get { return SprExport.Spr_PHSplineLimitNode_get_swing(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_swing(_thisArray[0], value); }
	}
	public double swingDir {
	    get { return SprExport.Spr_PHSplineLimitNode_get_swingDir(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_swingDir(_thisArray[0], value); }
	}
	public double dSwing {
	    get { return SprExport.Spr_PHSplineLimitNode_get_dSwing(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_dSwing(_thisArray[0], value); }
	}
	public double dSwingDir {
	    get { return SprExport.Spr_PHSplineLimitNode_get_dSwingDir(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_dSwingDir(_thisArray[0], value); }
	}
	public double twistMin {
	    get { return SprExport.Spr_PHSplineLimitNode_get_twistMin(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_twistMin(_thisArray[0], value); }
	}
	public double twistMax {
	    get { return SprExport.Spr_PHSplineLimitNode_get_twistMax(_thisArray[0]); }
	    set { SprExport.Spr_PHSplineLimitNode_set_twistMax(_thisArray[0], value); }
	}
    }
    public partial class PHBallJointSplineLimitDesc : PHBallJointLimitDesc {
	public PHBallJointSplineLimitDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointSplineLimitDesc(); _flag = true; }
	public PHBallJointSplineLimitDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointSplineLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointSplineLimitDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointSplineLimitDesc(_thisArray[0]); _flag = false; } }
        public vectorwrapper_PHSplineLimitNode nodes {
            get { return new vectorwrapper_PHSplineLimitNode(SprExport.Spr_PHBallJointSplineLimitDesc_addr_nodes(_thisArray[0])); }
            set { SprExport.Spr_PHBallJointSplineLimitDesc_set_nodes(_thisArray[0], value); }
        }
	public Vec2d poleTwist {
	    get { return new Vec2d(SprExport.Spr_PHBallJointSplineLimitDesc_addr_poleTwist(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointSplineLimitDesc_set_poleTwist(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHBallJointSplineLimitDescStruct : PHBallJointLimitDescStruct {
        public PHBallJointSplineLimitDescStruct() {
            PHBallJointSplineLimitDesc desc = new PHBallJointSplineLimitDesc();
            ApplyFrom(desc, true);
        }
	public vectorwrapper_PHSplineLimitNode nodes;
	public Vec2dStruct poleTwist;
	public void ApplyTo(PHBallJointSplineLimitDesc r, bool apply_to_base_class = false) {
		r.nodes = nodes;
		r.poleTwist = poleTwist;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointSplineLimitDesc r, bool apply_to_base_class = false) {
		nodes = r.nodes;
		poleTwist = r.poleTwist;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointSplineLimitDesc(PHBallJointSplineLimitDescStruct m) {
	    PHBallJointSplineLimitDesc r = new PHBallJointSplineLimitDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointSplineLimitDescStruct(PHBallJointSplineLimitDesc r) {
	    PHBallJointSplineLimitDescStruct m = new PHBallJointSplineLimitDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointIndependentLimitDesc : PHBallJointLimitDesc {
	public PHBallJointIndependentLimitDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointIndependentLimitDesc(); _flag = true; }
	public PHBallJointIndependentLimitDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointIndependentLimitDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointIndependentLimitDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointIndependentLimitDesc(_thisArray[0]); _flag = false; } }
	public Vec2d limitX {
	    get { return new Vec2d(SprExport.Spr_PHBallJointIndependentLimitDesc_addr_limitX(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointIndependentLimitDesc_set_limitX(_thisArray[0], value); }
	}
	public Vec2d limitY {
	    get { return new Vec2d(SprExport.Spr_PHBallJointIndependentLimitDesc_addr_limitY(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointIndependentLimitDesc_set_limitY(_thisArray[0], value); }
	}
	public Vec2d limitZ {
	    get { return new Vec2d(SprExport.Spr_PHBallJointIndependentLimitDesc_addr_limitZ(_thisArray[0])); }
	    set { SprExport.Spr_PHBallJointIndependentLimitDesc_set_limitZ(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHBallJointIndependentLimitDescStruct : PHBallJointLimitDescStruct {
        public PHBallJointIndependentLimitDescStruct() {
            PHBallJointIndependentLimitDesc desc = new PHBallJointIndependentLimitDesc();
            ApplyFrom(desc, true);
        }
	public Vec2dStruct limitX;
	public Vec2dStruct limitY;
	public Vec2dStruct limitZ;
	public void ApplyTo(PHBallJointIndependentLimitDesc r, bool apply_to_base_class = false) {
		r.limitX = limitX;
		r.limitY = limitY;
		r.limitZ = limitZ;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointIndependentLimitDesc r, bool apply_to_base_class = false) {
		limitX = r.limitX;
		limitY = r.limitY;
		limitZ = r.limitZ;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointIndependentLimitDesc(PHBallJointIndependentLimitDescStruct m) {
	    PHBallJointIndependentLimitDesc r = new PHBallJointIndependentLimitDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointIndependentLimitDescStruct(PHBallJointIndependentLimitDesc r) {
	    PHBallJointIndependentLimitDescStruct m = new PHBallJointIndependentLimitDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PH1DJointMotorDesc : CsObject {
	public PH1DJointMotorDesc() { _thisArray[0] = SprExport.Spr_new_PH1DJointMotorDesc(); _flag = true; }
	public PH1DJointMotorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointMotorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointMotorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointMotorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PH1DJointMotorDesc() { if (_flag) { SprExport.Spr_delete_PH1DJointMotorDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PH1DJointMotorDescStruct : CsObject {
        public PH1DJointMotorDescStruct() {
            PH1DJointMotorDesc desc = new PH1DJointMotorDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PH1DJointMotorDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PH1DJointMotorDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PH1DJointMotorDesc(PH1DJointMotorDescStruct m) {
	    PH1DJointMotorDesc r = new PH1DJointMotorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PH1DJointMotorDescStruct(PH1DJointMotorDesc r) {
	    PH1DJointMotorDescStruct m = new PH1DJointMotorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PH1DJointNonLinearMotorDesc : PH1DJointMotorDesc {
	public PH1DJointNonLinearMotorDesc() { _thisArray[0] = SprExport.Spr_new_PH1DJointNonLinearMotorDesc(); _flag = true; }
	public PH1DJointNonLinearMotorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PH1DJointNonLinearMotorDesc() { if (_flag) { SprExport.Spr_delete_PH1DJointNonLinearMotorDesc(_thisArray[0]); _flag = false; } }
	public enum FunctionMode : int {
	    LINEAR = 0, HUMANJOINTRESITANCE = LINEAR + 1
	}
    }
    [System.Serializable]
    public class PH1DJointNonLinearMotorDescStruct : PH1DJointMotorDescStruct {
        public PH1DJointNonLinearMotorDescStruct() {
            PH1DJointNonLinearMotorDesc desc = new PH1DJointNonLinearMotorDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PH1DJointNonLinearMotorDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PH1DJointNonLinearMotorDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PH1DJointNonLinearMotorDesc(PH1DJointNonLinearMotorDescStruct m) {
	    PH1DJointNonLinearMotorDesc r = new PH1DJointNonLinearMotorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PH1DJointNonLinearMotorDescStruct(PH1DJointNonLinearMotorDesc r) {
	    PH1DJointNonLinearMotorDescStruct m = new PH1DJointNonLinearMotorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHHuman1DJointResistanceDesc : PH1DJointNonLinearMotorDesc {
	public PHHuman1DJointResistanceDesc() { _thisArray[0] = SprExport.Spr_new_PHHuman1DJointResistanceDesc(); _flag = true; }
	public PHHuman1DJointResistanceDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHuman1DJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHuman1DJointResistanceDesc() { if (_flag) { SprExport.Spr_delete_PHHuman1DJointResistanceDesc(_thisArray[0]); _flag = false; } }
	public Vec4d coefficient {
	    get { return new Vec4d(SprExport.Spr_PHHuman1DJointResistanceDesc_addr_coefficient(_thisArray[0])); }
	    set { SprExport.Spr_PHHuman1DJointResistanceDesc_set_coefficient(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHHuman1DJointResistanceDescStruct : PH1DJointNonLinearMotorDescStruct {
        public PHHuman1DJointResistanceDescStruct() {
            PHHuman1DJointResistanceDesc desc = new PHHuman1DJointResistanceDesc();
            ApplyFrom(desc, true);
        }
	public Vec4dStruct coefficient;
	public void ApplyTo(PHHuman1DJointResistanceDesc r, bool apply_to_base_class = false) {
		r.coefficient = coefficient;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHHuman1DJointResistanceDesc r, bool apply_to_base_class = false) {
		coefficient = r.coefficient;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHHuman1DJointResistanceDesc(PHHuman1DJointResistanceDescStruct m) {
	    PHHuman1DJointResistanceDesc r = new PHHuman1DJointResistanceDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHuman1DJointResistanceDescStruct(PHHuman1DJointResistanceDesc r) {
	    PHHuman1DJointResistanceDescStruct m = new PHHuman1DJointResistanceDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointMotorDesc : CsObject {
	public PHBallJointMotorDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointMotorDesc(); _flag = true; }
	public PHBallJointMotorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointMotorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointMotorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointMotorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointMotorDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointMotorDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHBallJointMotorDescStruct : CsObject {
        public PHBallJointMotorDescStruct() {
            PHBallJointMotorDesc desc = new PHBallJointMotorDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHBallJointMotorDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHBallJointMotorDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHBallJointMotorDesc(PHBallJointMotorDescStruct m) {
	    PHBallJointMotorDesc r = new PHBallJointMotorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointMotorDescStruct(PHBallJointMotorDesc r) {
	    PHBallJointMotorDescStruct m = new PHBallJointMotorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBallJointNonLinearMotorDesc : PHBallJointMotorDesc {
	public PHBallJointNonLinearMotorDesc() { _thisArray[0] = SprExport.Spr_new_PHBallJointNonLinearMotorDesc(); _flag = true; }
	public PHBallJointNonLinearMotorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointNonLinearMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBallJointNonLinearMotorDesc() { if (_flag) { SprExport.Spr_delete_PHBallJointNonLinearMotorDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHBallJointNonLinearMotorDescStruct : PHBallJointMotorDescStruct {
        public PHBallJointNonLinearMotorDescStruct() {
            PHBallJointNonLinearMotorDesc desc = new PHBallJointNonLinearMotorDesc();
            ApplyFrom(desc, true);
        }
	public void ApplyTo(PHBallJointNonLinearMotorDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHBallJointNonLinearMotorDesc r, bool apply_to_base_class = false) {
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHBallJointNonLinearMotorDesc(PHBallJointNonLinearMotorDescStruct m) {
	    PHBallJointNonLinearMotorDesc r = new PHBallJointNonLinearMotorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBallJointNonLinearMotorDescStruct(PHBallJointNonLinearMotorDesc r) {
	    PHBallJointNonLinearMotorDescStruct m = new PHBallJointNonLinearMotorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHHumanBallJointResistanceDesc : PHBallJointNonLinearMotorDesc {
	public PHHumanBallJointResistanceDesc() { _thisArray[0] = SprExport.Spr_new_PHHumanBallJointResistanceDesc(); _flag = true; }
	public PHHumanBallJointResistanceDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHumanBallJointResistanceDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHHumanBallJointResistanceDesc() { if (_flag) { SprExport.Spr_delete_PHHumanBallJointResistanceDesc(_thisArray[0]); _flag = false; } }
	public Vec4d xCoefficient {
	    get { return new Vec4d(SprExport.Spr_PHHumanBallJointResistanceDesc_addr_xCoefficient(_thisArray[0])); }
	    set { SprExport.Spr_PHHumanBallJointResistanceDesc_set_xCoefficient(_thisArray[0], value); }
	}
	public Vec4d yCoefficient {
	    get { return new Vec4d(SprExport.Spr_PHHumanBallJointResistanceDesc_addr_yCoefficient(_thisArray[0])); }
	    set { SprExport.Spr_PHHumanBallJointResistanceDesc_set_yCoefficient(_thisArray[0], value); }
	}
	public Vec4d zCoefficient {
	    get { return new Vec4d(SprExport.Spr_PHHumanBallJointResistanceDesc_addr_zCoefficient(_thisArray[0])); }
	    set { SprExport.Spr_PHHumanBallJointResistanceDesc_set_zCoefficient(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHHumanBallJointResistanceDescStruct : PHBallJointNonLinearMotorDescStruct {
        public PHHumanBallJointResistanceDescStruct() {
            PHHumanBallJointResistanceDesc desc = new PHHumanBallJointResistanceDesc();
            ApplyFrom(desc, true);
        }
	public Vec4dStruct xCoefficient;
	public Vec4dStruct yCoefficient;
	public Vec4dStruct zCoefficient;
	public void ApplyTo(PHHumanBallJointResistanceDesc r, bool apply_to_base_class = false) {
		r.xCoefficient = xCoefficient;
		r.yCoefficient = yCoefficient;
		r.zCoefficient = zCoefficient;
		if (apply_to_base_class) {
		    base.ApplyTo(r, apply_to_base_class);
		}
	}
	public void ApplyFrom(PHHumanBallJointResistanceDesc r, bool apply_to_base_class = false) {
		xCoefficient = r.xCoefficient;
		yCoefficient = r.yCoefficient;
		zCoefficient = r.zCoefficient;
		if (apply_to_base_class) {
		    base.ApplyFrom(r, apply_to_base_class);
		}
	}
	public static implicit operator PHHumanBallJointResistanceDesc(PHHumanBallJointResistanceDescStruct m) {
	    PHHumanBallJointResistanceDesc r = new PHHumanBallJointResistanceDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHHumanBallJointResistanceDescStruct(PHHumanBallJointResistanceDesc r) {
	    PHHumanBallJointResistanceDescStruct m = new PHHumanBallJointResistanceDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSpringMotorDesc : CsObject {
	public PHSpringMotorDesc() { _thisArray[0] = SprExport.Spr_new_PHSpringMotorDesc(); _flag = true; }
	public PHSpringMotorDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSpringMotorDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSpringMotorDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSpringMotorDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSpringMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSpringMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSpringMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSpringMotorDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSpringMotorDesc() { if (_flag) { SprExport.Spr_delete_PHSpringMotorDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHSpringMotorDescStruct : CsObject {
        public PHSpringMotorDescStruct() {
            PHSpringMotorDesc desc = new PHSpringMotorDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHSpringMotorDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHSpringMotorDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHSpringMotorDesc(PHSpringMotorDescStruct m) {
	    PHSpringMotorDesc r = new PHSpringMotorDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSpringMotorDescStruct(PHSpringMotorDesc r) {
	    PHSpringMotorDescStruct m = new PHSpringMotorDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHInactiveSolids : CsObject {
	public PHInactiveSolids() { _thisArray[0] = SprExport.Spr_new_PHInactiveSolids(); _flag = true; }
	public PHInactiveSolids(IntPtr ptr) : base(ptr, 0, false) {}
	public PHInactiveSolids(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHInactiveSolids(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHInactiveSolids(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHInactiveSolids(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHInactiveSolids(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHInactiveSolids(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHInactiveSolids(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHInactiveSolids() { if (_flag) { SprExport.Spr_delete_PHInactiveSolids(_thisArray[0]); _flag = false; } }
        public vectorwrapper_string solids {
            get { return new vectorwrapper_string(SprExport.Spr_PHInactiveSolids_addr_solids(_thisArray[0])); }
            set { SprExport.Spr_PHInactiveSolids_set_solids(_thisArray[0], value); }
        }
    }
    public partial class PHOpObjState : CsObject {
	public PHOpObjState() { _thisArray[0] = SprExport.Spr_new_PHOpObjState(); _flag = true; }
	public PHOpObjState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpObjState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpObjState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpObjState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpObjState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpObjState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpObjState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpObjState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpObjState() { if (_flag) { SprExport.Spr_delete_PHOpObjState(_thisArray[0]); _flag = false; } }
	public Vec3d velocity {
	    get { return new Vec3d(SprExport.Spr_PHOpObjState_addr_velocity(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjState_set_velocity(_thisArray[0], value); }
	}
	public Vec3d angVelocity {
	    get { return new Vec3d(SprExport.Spr_PHOpObjState_addr_angVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjState_set_angVelocity(_thisArray[0], value); }
	}
	public Posed pose {
	    get { return new Posed(SprExport.Spr_PHOpObjState_addr_pose(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjState_set_pose(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpObjStateStruct : CsObject {
        public PHOpObjStateStruct() {
            PHOpObjState desc = new PHOpObjState();
            ApplyFrom(desc, false);
        }
	public Vec3dStruct velocity;
	public Vec3dStruct angVelocity;
	public PosedStruct pose;
	public void ApplyTo(PHOpObjState r, bool apply_to_base_class = false) {
		r.velocity = velocity;
		r.angVelocity = angVelocity;
		r.pose = pose;
	}
	public void ApplyFrom(PHOpObjState r, bool apply_to_base_class = false) {
		velocity = r.velocity;
		angVelocity = r.angVelocity;
		pose = r.pose;
	}
	public static implicit operator PHOpObjState(PHOpObjStateStruct m) {
	    PHOpObjState r = new PHOpObjState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpObjStateStruct(PHOpObjState r) {
	    PHOpObjStateStruct m = new PHOpObjStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpHapticRendererDesc : CsObject {
	public PHOpHapticRendererDesc() { _thisArray[0] = SprExport.Spr_new_PHOpHapticRendererDesc(); _flag = true; }
	public PHOpHapticRendererDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpHapticRendererDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpHapticRendererDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpHapticRendererDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpHapticRendererDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpHapticRendererDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpHapticRendererDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpHapticRendererDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpHapticRendererDesc() { if (_flag) { SprExport.Spr_delete_PHOpHapticRendererDesc(_thisArray[0]); _flag = false; } }
	public float extForceSpring {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_extForceSpring(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_extForceSpring(_thisArray[0], value); }
	}
	public float outForceSpring {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_outForceSpring(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_outForceSpring(_thisArray[0], value); }
	}
	public float constraintSpring {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_constraintSpring(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_constraintSpring(_thisArray[0], value); }
	}
	public float timeStep {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_timeStep(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_timeStep(_thisArray[0], value); }
	}
	public float forceOnRadius {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_forceOnRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_forceOnRadius(_thisArray[0], value); }
	}
	public bool useConstrainForce {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_useConstrainForce(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_useConstrainForce(_thisArray[0], (char) val);
	    }
	}
	public bool useProxyfixSubitr {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_useProxyfixSubitr(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_useProxyfixSubitr(_thisArray[0], (char) val);
	    }
	}
	public bool useIncreaseMeshMove {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_useIncreaseMeshMove(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_useIncreaseMeshMove(_thisArray[0], (char) val);
	    }
	}
	public bool sqrtAlphaForce {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_sqrtAlphaForce(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_sqrtAlphaForce(_thisArray[0], (char) val);
	    }
	}
	public bool hitWall {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_hitWall(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_hitWall(_thisArray[0], (char) val);
	    }
	}
	public bool useDualTranFix {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_useDualTranFix(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_useDualTranFix(_thisArray[0], (char) val);
	    }
	}
	public bool rigid {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticRendererDesc_get_rigid(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticRendererDesc_set_rigid(_thisArray[0], (char) val);
	    }
	}
	public int proxyItrtNum {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_proxyItrtNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_proxyItrtNum(_thisArray[0], value); }
	}
	public int proxyItrtMaxNum {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_proxyItrtMaxNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_proxyItrtMaxNum(_thisArray[0], value); }
	}
	public int currDtType {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_currDtType(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_currDtType(_thisArray[0], value); }
	}
	public int objNum {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_objNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_objNum(_thisArray[0], value); }
	}
	public int noCtcItrNum {
	    get { return SprExport.Spr_PHOpHapticRendererDesc_get_noCtcItrNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_noCtcItrNum(_thisArray[0], value); }
	}
	public Vec3f proxyFixPos {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticRendererDesc_addr_proxyFixPos(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticRendererDesc_set_proxyFixPos(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpHapticRendererDescStruct : CsObject {
        public PHOpHapticRendererDescStruct() {
            PHOpHapticRendererDesc desc = new PHOpHapticRendererDesc();
            ApplyFrom(desc, false);
        }
	public float extForceSpring;
	public float outForceSpring;
	public float constraintSpring;
	public float timeStep;
	public float forceOnRadius;
	public bool useConstrainForce;
	public bool useProxyfixSubitr;
	public bool useIncreaseMeshMove;
	public bool sqrtAlphaForce;
	public bool hitWall;
	public bool useDualTranFix;
	public bool rigid;
	public int proxyItrtNum;
	public int proxyItrtMaxNum;
	public int currDtType;
	public int objNum;
	public int noCtcItrNum;
	public Vec3fStruct proxyFixPos;
	public void ApplyTo(PHOpHapticRendererDesc r, bool apply_to_base_class = false) {
		r.extForceSpring = extForceSpring;
		r.outForceSpring = outForceSpring;
		r.constraintSpring = constraintSpring;
		r.timeStep = timeStep;
		r.forceOnRadius = forceOnRadius;
		r.useConstrainForce = useConstrainForce;
		r.useProxyfixSubitr = useProxyfixSubitr;
		r.useIncreaseMeshMove = useIncreaseMeshMove;
		r.sqrtAlphaForce = sqrtAlphaForce;
		r.hitWall = hitWall;
		r.useDualTranFix = useDualTranFix;
		r.rigid = rigid;
		r.proxyItrtNum = proxyItrtNum;
		r.proxyItrtMaxNum = proxyItrtMaxNum;
		r.currDtType = currDtType;
		r.objNum = objNum;
		r.noCtcItrNum = noCtcItrNum;
		r.proxyFixPos = proxyFixPos;
	}
	public void ApplyFrom(PHOpHapticRendererDesc r, bool apply_to_base_class = false) {
		extForceSpring = r.extForceSpring;
		outForceSpring = r.outForceSpring;
		constraintSpring = r.constraintSpring;
		timeStep = r.timeStep;
		forceOnRadius = r.forceOnRadius;
		useConstrainForce = r.useConstrainForce;
		useProxyfixSubitr = r.useProxyfixSubitr;
		useIncreaseMeshMove = r.useIncreaseMeshMove;
		sqrtAlphaForce = r.sqrtAlphaForce;
		hitWall = r.hitWall;
		useDualTranFix = r.useDualTranFix;
		rigid = r.rigid;
		proxyItrtNum = r.proxyItrtNum;
		proxyItrtMaxNum = r.proxyItrtMaxNum;
		currDtType = r.currDtType;
		objNum = r.objNum;
		noCtcItrNum = r.noCtcItrNum;
		proxyFixPos = r.proxyFixPos;
	}
	public static implicit operator PHOpHapticRendererDesc(PHOpHapticRendererDescStruct m) {
	    PHOpHapticRendererDesc r = new PHOpHapticRendererDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpHapticRendererDescStruct(PHOpHapticRendererDesc r) {
	    PHOpHapticRendererDescStruct m = new PHOpHapticRendererDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpObjDesc : PHOpObjState {
	public PHOpObjDesc() { _thisArray[0] = SprExport.Spr_new_PHOpObjDesc(); _flag = true; }
	public PHOpObjDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpObjDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpObjDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpObjDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpObjDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpObjDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpObjDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpObjDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpObjDesc() { if (_flag) { SprExport.Spr_delete_PHOpObjDesc(_thisArray[0]); _flag = false; } }
	public double mass {
	    get { return SprExport.Spr_PHOpObjDesc_get_mass(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_mass(_thisArray[0], value); }
	}
	public Matrix3d inertia {
	    get { return new Matrix3d(SprExport.Spr_PHOpObjDesc_addr_inertia(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjDesc_set_inertia(_thisArray[0], value); }
	}
	public Vec3d center {
	    get { return new Vec3d(SprExport.Spr_PHOpObjDesc_addr_center(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjDesc_set_center(_thisArray[0], value); }
	}
	public bool dynamical {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpObjDesc_get_dynamical(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpObjDesc_set_dynamical(_thisArray[0], (char) val);
	    }
	}
	public Vec3f objTargetVts {
	    get { return new Vec3f(SprExport.Spr_PHOpObjDesc_get_objTargetVts(_thisArray[0])); }
	    set { SprExport.Spr_PHOpObjDesc_set_objTargetVts(_thisArray[0], value); }
	}
        public arraywrapper_float objTargetVtsArr {
            get { return new arraywrapper_float(SprExport.Spr_PHOpObjDesc_addr_objTargetVtsArr(_thisArray[0])); }
            set { SprExport.Spr_PHOpObjDesc_set_objTargetVtsArr(_thisArray[0], value); }
        }
	public int objTargetVtsNum {
	    get { return SprExport.Spr_PHOpObjDesc_get_objTargetVtsNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objTargetVtsNum(_thisArray[0], value); }
	}
	public int assPsNum {
	    get { return SprExport.Spr_PHOpObjDesc_get_assPsNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_assPsNum(_thisArray[0], value); }
	}
	public int assGrpNum {
	    get { return SprExport.Spr_PHOpObjDesc_get_assGrpNum(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_assGrpNum(_thisArray[0], value); }
	}
	public int objGrouplinkCount {
	    get { return SprExport.Spr_PHOpObjDesc_get_objGrouplinkCount(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objGrouplinkCount(_thisArray[0], value); }
	}
	public int objId {
	    get { return SprExport.Spr_PHOpObjDesc_get_objId(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objId(_thisArray[0], value); }
	}
	public bool objUseDistCstr {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpObjDesc_get_objUseDistCstr(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpObjDesc_set_objUseDistCstr(_thisArray[0], (char) val);
	    }
	}
	public bool objNoMeshObj {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpObjDesc_get_objNoMeshObj(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpObjDesc_set_objNoMeshObj(_thisArray[0], (char) val);
	    }
	}
	public bool isRigid {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpObjDesc_get_isRigid(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpObjDesc_set_isRigid(_thisArray[0], (char) val);
	    }
	}
	public int objType {
	    get { return SprExport.Spr_PHOpObjDesc_get_objType(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objType(_thisArray[0], value); }
	}
	public float objAverRadius {
	    get { return SprExport.Spr_PHOpObjDesc_get_objAverRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objAverRadius(_thisArray[0], value); }
	}
	public float objMaxRadius {
	    get { return SprExport.Spr_PHOpObjDesc_get_objMaxRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objMaxRadius(_thisArray[0], value); }
	}
	public int objitrTime {
	    get { return SprExport.Spr_PHOpObjDesc_get_objitrTime(_thisArray[0]); }
	    set { SprExport.Spr_PHOpObjDesc_set_objitrTime(_thisArray[0], value); }
	}
	public bool updateNormals {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpObjDesc_get_updateNormals(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpObjDesc_set_updateNormals(_thisArray[0], (char) val);
	    }
	}
	public void Init() {
	    SprExport.Spr_PHOpObjDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHOpObjDescStruct : PHOpObjStateStruct {
        public PHOpObjDescStruct() {
            PHOpObjDesc desc = new PHOpObjDesc();
            ApplyFrom(desc, false);
        }
	public double mass;
	public Matrix3dStruct inertia;
	public Vec3dStruct center;
	public bool dynamical;
	public Vec3fStruct objTargetVts;
	public arraywrapper_float objTargetVtsArr;
	public int objTargetVtsNum;
	public int assPsNum;
	public int assGrpNum;
	public int objGrouplinkCount;
	public int objId;
	public bool objUseDistCstr;
	public bool objNoMeshObj;
	public bool isRigid;
	public int objType;
	public float objAverRadius;
	public float objMaxRadius;
	public int objitrTime;
	public bool updateNormals;
	public void ApplyTo(PHOpObjDesc r, bool apply_to_base_class = false) {
		r.mass = mass;
		r.inertia = inertia;
		r.center = center;
		r.dynamical = dynamical;
		r.objTargetVts = objTargetVts;
		r.objTargetVtsArr = objTargetVtsArr;
		r.objTargetVtsNum = objTargetVtsNum;
		r.assPsNum = assPsNum;
		r.assGrpNum = assGrpNum;
		r.objGrouplinkCount = objGrouplinkCount;
		r.objId = objId;
		r.objUseDistCstr = objUseDistCstr;
		r.objNoMeshObj = objNoMeshObj;
		r.isRigid = isRigid;
		r.objType = objType;
		r.objAverRadius = objAverRadius;
		r.objMaxRadius = objMaxRadius;
		r.objitrTime = objitrTime;
		r.updateNormals = updateNormals;
	}
	public void ApplyFrom(PHOpObjDesc r, bool apply_to_base_class = false) {
		mass = r.mass;
		inertia = r.inertia;
		center = r.center;
		dynamical = r.dynamical;
		objTargetVts = r.objTargetVts;
		objTargetVtsArr = r.objTargetVtsArr;
		objTargetVtsNum = r.objTargetVtsNum;
		assPsNum = r.assPsNum;
		assGrpNum = r.assGrpNum;
		objGrouplinkCount = r.objGrouplinkCount;
		objId = r.objId;
		objUseDistCstr = r.objUseDistCstr;
		objNoMeshObj = r.objNoMeshObj;
		isRigid = r.isRigid;
		objType = r.objType;
		objAverRadius = r.objAverRadius;
		objMaxRadius = r.objMaxRadius;
		objitrTime = r.objitrTime;
		updateNormals = r.updateNormals;
	}
	public static implicit operator PHOpObjDesc(PHOpObjDescStruct m) {
	    PHOpObjDesc r = new PHOpObjDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpObjDescStruct(PHOpObjDesc r) {
	    PHOpObjDescStruct m = new PHOpObjDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpParticleDesc : CsObject {
	public PHOpParticleDesc() { _thisArray[0] = SprExport.Spr_new_PHOpParticleDesc(); _flag = true; }
	public PHOpParticleDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpParticleDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpParticleDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpParticleDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpParticleDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpParticleDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpParticleDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpParticleDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpParticleDesc() { if (_flag) { SprExport.Spr_delete_PHOpParticleDesc(_thisArray[0]); _flag = false; } }
	public int pNvertex {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pNvertex(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pNvertex(_thisArray[0], value); }
	}
	public int pMyGroupInd {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pMyGroupInd(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pMyGroupInd(_thisArray[0], value); }
	}
	public int pPId {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pPId(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pPId(_thisArray[0], value); }
	}
	public int pObjId {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pObjId(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pObjId(_thisArray[0], value); }
	}
	public float pParaAlpha {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pParaAlpha(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pParaAlpha(_thisArray[0], value); }
	}
	public bool hitedByMouse {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_hitedByMouse(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_hitedByMouse(_thisArray[0], (char) val);
	    }
	}
	public float pSingleVMass {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pSingleVMass(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pSingleVMass(_thisArray[0], value); }
	}
	public float pTotalMass {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pTotalMass(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pTotalMass(_thisArray[0], value); }
	}
	public float pRadii {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pRadii(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pRadii(_thisArray[0], value); }
	}
	public float pDynamicRadius {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pDynamicRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pDynamicRadius(_thisArray[0], value); }
	}
	public Vec3f pMainRadiusVec {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pMainRadiusVec(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pMainRadiusVec(_thisArray[0], value); }
	}
	public Vec3f pSecRadiusVec {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pSecRadiusVec(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pSecRadiusVec(_thisArray[0], value); }
	}
	public Vec3f pThrRadiusVec {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pThrRadiusVec(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pThrRadiusVec(_thisArray[0], value); }
	}
	public float pMainRadius {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pMainRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pMainRadius(_thisArray[0], value); }
	}
	public float pSecRadius {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pSecRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pSecRadius(_thisArray[0], value); }
	}
	public float pThrRadius {
	    get { return SprExport.Spr_PHOpParticleDesc_get_pThrRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pThrRadius(_thisArray[0], value); }
	}
	public Vec3f pCurrCtr {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pCurrCtr(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pCurrCtr(_thisArray[0], value); }
	}
	public Vec3f pOrigCtr {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pOrigCtr(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pOrigCtr(_thisArray[0], value); }
	}
	public Vec3f pNewCtr {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pNewCtr(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pNewCtr(_thisArray[0], value); }
	}
	public Vec3f pVelocity {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pVelocity(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pVelocity(_thisArray[0], value); }
	}
	public bool isColliedbySphash {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isColliedbySphash(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isColliedbySphash(_thisArray[0], (char) val);
	    }
	}
	public bool isColliedbyColliCube {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isColliedbyColliCube(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isColliedbyColliCube(_thisArray[0], (char) val);
	    }
	}
	public bool isFixedbyMouse {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isFixedbyMouse(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isFixedbyMouse(_thisArray[0], (char) val);
	    }
	}
	public bool isFixed {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isFixed(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isFixed(_thisArray[0], (char) val);
	    }
	}
	public bool isColliedSphashSolved {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isColliedSphashSolved(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isColliedSphashSolved(_thisArray[0], (char) val);
	    }
	}
	public bool isColliedSphashSolvedReady {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpParticleDesc_get_isColliedSphashSolvedReady(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpParticleDesc_set_isColliedSphashSolvedReady(_thisArray[0], (char) val);
	    }
	}
	public Vec3f pExternalForce {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pExternalForce(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pExternalForce(_thisArray[0], value); }
	}
	public Vec3f pExternalTorque {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pExternalTorque(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pExternalTorque(_thisArray[0], value); }
	}
	public Vec3f pExternalDisplacement {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pExternalDisplacement(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pExternalDisplacement(_thisArray[0], value); }
	}
        public vectorwrapper_int pFaceInd {
            get { return new vectorwrapper_int(SprExport.Spr_PHOpParticleDesc_addr_pFaceInd(_thisArray[0])); }
            set { SprExport.Spr_PHOpParticleDesc_set_pFaceInd(_thisArray[0], value); }
        }
	public Matrix3f pMomentR {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_pMomentR(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pMomentR(_thisArray[0], value); }
	}
	public Matrix3f pSmR {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_pSmR(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pSmR(_thisArray[0], value); }
	}
	public Matrix3f pMomentInertia {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_pMomentInertia(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pMomentInertia(_thisArray[0], value); }
	}
	public Matrix3f pInverseOfMomentInertia {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_pInverseOfMomentInertia(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pInverseOfMomentInertia(_thisArray[0], value); }
	}
	public Matrix3f ellipRotMatrix {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_ellipRotMatrix(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_ellipRotMatrix(_thisArray[0], value); }
	}
	public Quaternionf ellipOrigOrint {
	    get { return new Quaternionf(SprExport.Spr_PHOpParticleDesc_addr_ellipOrigOrint(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_ellipOrigOrint(_thisArray[0], value); }
	}
	public Vec3f pWvel {
	    get { return new Vec3f(SprExport.Spr_PHOpParticleDesc_addr_pWvel(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pWvel(_thisArray[0], value); }
	}
	public Matrix3f pPreEllipA {
	    get { return new Matrix3f(SprExport.Spr_PHOpParticleDesc_addr_pPreEllipA(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pPreEllipA(_thisArray[0], value); }
	}
	public Quaternionf pCurrOrint {
	    get { return new Quaternionf(SprExport.Spr_PHOpParticleDesc_addr_pCurrOrint(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pCurrOrint(_thisArray[0], value); }
	}
	public Quaternionf pOrigOrint {
	    get { return new Quaternionf(SprExport.Spr_PHOpParticleDesc_addr_pOrigOrint(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pOrigOrint(_thisArray[0], value); }
	}
	public Quaternionf pNewOrint {
	    get { return new Quaternionf(SprExport.Spr_PHOpParticleDesc_addr_pNewOrint(_thisArray[0])); }
	    set { SprExport.Spr_PHOpParticleDesc_set_pNewOrint(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpParticleDescStruct : CsObject {
        public PHOpParticleDescStruct() {
            PHOpParticleDesc desc = new PHOpParticleDesc();
            ApplyFrom(desc, false);
        }
	public int pNvertex;
	public int pMyGroupInd;
	public int pPId;
	public int pObjId;
	public float pParaAlpha;
	public bool hitedByMouse;
	public float pSingleVMass;
	public float pTotalMass;
	public float pRadii;
	public float pDynamicRadius;
	public Vec3fStruct pMainRadiusVec;
	public Vec3fStruct pSecRadiusVec;
	public Vec3fStruct pThrRadiusVec;
	public float pMainRadius;
	public float pSecRadius;
	public float pThrRadius;
	public Vec3fStruct pCurrCtr;
	public Vec3fStruct pOrigCtr;
	public Vec3fStruct pNewCtr;
	public Vec3fStruct pVelocity;
	public bool isColliedbySphash;
	public bool isColliedbyColliCube;
	public bool isFixedbyMouse;
	public bool isFixed;
	public bool isColliedSphashSolved;
	public bool isColliedSphashSolvedReady;
	public Vec3fStruct pExternalForce;
	public Vec3fStruct pExternalTorque;
	public Vec3fStruct pExternalDisplacement;
	public vectorwrapper_int pFaceInd;
	public Matrix3fStruct pMomentR;
	public Matrix3fStruct pSmR;
	public Matrix3fStruct pMomentInertia;
	public Matrix3fStruct pInverseOfMomentInertia;
	public Matrix3fStruct ellipRotMatrix;
	public QuaternionfStruct ellipOrigOrint;
	public Vec3fStruct pWvel;
	public Matrix3fStruct pPreEllipA;
	public QuaternionfStruct pCurrOrint;
	public QuaternionfStruct pOrigOrint;
	public QuaternionfStruct pNewOrint;
	public void ApplyTo(PHOpParticleDesc r, bool apply_to_base_class = false) {
		r.pNvertex = pNvertex;
		r.pMyGroupInd = pMyGroupInd;
		r.pPId = pPId;
		r.pObjId = pObjId;
		r.pParaAlpha = pParaAlpha;
		r.hitedByMouse = hitedByMouse;
		r.pSingleVMass = pSingleVMass;
		r.pTotalMass = pTotalMass;
		r.pRadii = pRadii;
		r.pDynamicRadius = pDynamicRadius;
		r.pMainRadiusVec = pMainRadiusVec;
		r.pSecRadiusVec = pSecRadiusVec;
		r.pThrRadiusVec = pThrRadiusVec;
		r.pMainRadius = pMainRadius;
		r.pSecRadius = pSecRadius;
		r.pThrRadius = pThrRadius;
		r.pCurrCtr = pCurrCtr;
		r.pOrigCtr = pOrigCtr;
		r.pNewCtr = pNewCtr;
		r.pVelocity = pVelocity;
		r.isColliedbySphash = isColliedbySphash;
		r.isColliedbyColliCube = isColliedbyColliCube;
		r.isFixedbyMouse = isFixedbyMouse;
		r.isFixed = isFixed;
		r.isColliedSphashSolved = isColliedSphashSolved;
		r.isColliedSphashSolvedReady = isColliedSphashSolvedReady;
		r.pExternalForce = pExternalForce;
		r.pExternalTorque = pExternalTorque;
		r.pExternalDisplacement = pExternalDisplacement;
		r.pFaceInd = pFaceInd;
		r.pMomentR = pMomentR;
		r.pSmR = pSmR;
		r.pMomentInertia = pMomentInertia;
		r.pInverseOfMomentInertia = pInverseOfMomentInertia;
		r.ellipRotMatrix = ellipRotMatrix;
		r.ellipOrigOrint = ellipOrigOrint;
		r.pWvel = pWvel;
		r.pPreEllipA = pPreEllipA;
		r.pCurrOrint = pCurrOrint;
		r.pOrigOrint = pOrigOrint;
		r.pNewOrint = pNewOrint;
	}
	public void ApplyFrom(PHOpParticleDesc r, bool apply_to_base_class = false) {
		pNvertex = r.pNvertex;
		pMyGroupInd = r.pMyGroupInd;
		pPId = r.pPId;
		pObjId = r.pObjId;
		pParaAlpha = r.pParaAlpha;
		hitedByMouse = r.hitedByMouse;
		pSingleVMass = r.pSingleVMass;
		pTotalMass = r.pTotalMass;
		pRadii = r.pRadii;
		pDynamicRadius = r.pDynamicRadius;
		pMainRadiusVec = r.pMainRadiusVec;
		pSecRadiusVec = r.pSecRadiusVec;
		pThrRadiusVec = r.pThrRadiusVec;
		pMainRadius = r.pMainRadius;
		pSecRadius = r.pSecRadius;
		pThrRadius = r.pThrRadius;
		pCurrCtr = r.pCurrCtr;
		pOrigCtr = r.pOrigCtr;
		pNewCtr = r.pNewCtr;
		pVelocity = r.pVelocity;
		isColliedbySphash = r.isColliedbySphash;
		isColliedbyColliCube = r.isColliedbyColliCube;
		isFixedbyMouse = r.isFixedbyMouse;
		isFixed = r.isFixed;
		isColliedSphashSolved = r.isColliedSphashSolved;
		isColliedSphashSolvedReady = r.isColliedSphashSolvedReady;
		pExternalForce = r.pExternalForce;
		pExternalTorque = r.pExternalTorque;
		pExternalDisplacement = r.pExternalDisplacement;
		pFaceInd = r.pFaceInd;
		pMomentR = r.pMomentR;
		pSmR = r.pSmR;
		pMomentInertia = r.pMomentInertia;
		pInverseOfMomentInertia = r.pInverseOfMomentInertia;
		ellipRotMatrix = r.ellipRotMatrix;
		ellipOrigOrint = r.ellipOrigOrint;
		pWvel = r.pWvel;
		pPreEllipA = r.pPreEllipA;
		pCurrOrint = r.pCurrOrint;
		pOrigOrint = r.pOrigOrint;
		pNewOrint = r.pNewOrint;
	}
	public static implicit operator PHOpParticleDesc(PHOpParticleDescStruct m) {
	    PHOpParticleDesc r = new PHOpParticleDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpParticleDescStruct(PHOpParticleDesc r) {
	    PHOpParticleDescStruct m = new PHOpParticleDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpGroupDesc : CsObject {
	public PHOpGroupDesc() { _thisArray[0] = SprExport.Spr_new_PHOpGroupDesc(); _flag = true; }
	public PHOpGroupDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpGroupDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpGroupDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpGroupDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpGroupDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpGroupDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpGroupDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpGroupDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpGroupDesc() { if (_flag) { SprExport.Spr_delete_PHOpGroupDesc(_thisArray[0]); _flag = false; } }
	public int gMyIndex {
	    get { return SprExport.Spr_PHOpGroupDesc_get_gMyIndex(_thisArray[0]); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gMyIndex(_thisArray[0], value); }
	}
	public Matrix3f gAgroup {
	    get { return new Matrix3f(SprExport.Spr_PHOpGroupDesc_addr_gAgroup(_thisArray[0])); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gAgroup(_thisArray[0], value); }
	}
	public Matrix3f gEigen {
	    get { return new Matrix3f(SprExport.Spr_PHOpGroupDesc_addr_gEigen(_thisArray[0])); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gEigen(_thisArray[0], value); }
	}
	public float gtotalMass {
	    get { return SprExport.Spr_PHOpGroupDesc_get_gtotalMass(_thisArray[0]); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gtotalMass(_thisArray[0], value); }
	}
	public Vec3f gOrigCenter {
	    get { return new Vec3f(SprExport.Spr_PHOpGroupDesc_addr_gOrigCenter(_thisArray[0])); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gOrigCenter(_thisArray[0], value); }
	}
	public Vec3f gCurrCenter {
	    get { return new Vec3f(SprExport.Spr_PHOpGroupDesc_addr_gCurrCenter(_thisArray[0])); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gCurrCenter(_thisArray[0], value); }
	}
	public int gNptcl {
	    get { return SprExport.Spr_PHOpGroupDesc_get_gNptcl(_thisArray[0]); }
	    set { SprExport.Spr_PHOpGroupDesc_set_gNptcl(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpGroupDescStruct : CsObject {
        public PHOpGroupDescStruct() {
            PHOpGroupDesc desc = new PHOpGroupDesc();
            ApplyFrom(desc, false);
        }
	public int gMyIndex;
	public Matrix3fStruct gAgroup;
	public Matrix3fStruct gEigen;
	public float gtotalMass;
	public Vec3fStruct gOrigCenter;
	public Vec3fStruct gCurrCenter;
	public int gNptcl;
	public void ApplyTo(PHOpGroupDesc r, bool apply_to_base_class = false) {
		r.gMyIndex = gMyIndex;
		r.gAgroup = gAgroup;
		r.gEigen = gEigen;
		r.gtotalMass = gtotalMass;
		r.gOrigCenter = gOrigCenter;
		r.gCurrCenter = gCurrCenter;
		r.gNptcl = gNptcl;
	}
	public void ApplyFrom(PHOpGroupDesc r, bool apply_to_base_class = false) {
		gMyIndex = r.gMyIndex;
		gAgroup = r.gAgroup;
		gEigen = r.gEigen;
		gtotalMass = r.gtotalMass;
		gOrigCenter = r.gOrigCenter;
		gCurrCenter = r.gCurrCenter;
		gNptcl = r.gNptcl;
	}
	public static implicit operator PHOpGroupDesc(PHOpGroupDescStruct m) {
	    PHOpGroupDesc r = new PHOpGroupDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpGroupDescStruct(PHOpGroupDesc r) {
	    PHOpGroupDescStruct m = new PHOpGroupDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpHapticControllerDesc : CsObject {
	public PHOpHapticControllerDesc() { _thisArray[0] = SprExport.Spr_new_PHOpHapticControllerDesc(); _flag = true; }
	public PHOpHapticControllerDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpHapticControllerDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpHapticControllerDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpHapticControllerDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpHapticControllerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpHapticControllerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpHapticControllerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpHapticControllerDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpHapticControllerDesc() { if (_flag) { SprExport.Spr_delete_PHOpHapticControllerDesc(_thisArray[0]); _flag = false; } }
	public float posScale {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_posScale(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_posScale(_thisArray[0], value); }
	}
	public float rotScale {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_rotScale(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_rotScale(_thisArray[0], value); }
	}
	public float forceScale {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_forceScale(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_forceScale(_thisArray[0], value); }
	}
	public Vec3f userPos {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_userPos(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_userPos(_thisArray[0], value); }
	}
	public Posef userPose {
	    get { return new Posef(SprExport.Spr_PHOpHapticControllerDesc_addr_userPose(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_userPose(_thisArray[0], value); }
	}
	public Vec3f hcCurrPPos {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_hcCurrPPos(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcCurrPPos(_thisArray[0], value); }
	}
	public Vec3f hcCurrUPos {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_hcCurrUPos(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcCurrUPos(_thisArray[0], value); }
	}
	public Vec3f hcLastUPos {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_hcLastUPos(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcLastUPos(_thisArray[0], value); }
	}
	public Vec3f hcFixsubGoal {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_hcFixsubGoal(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcFixsubGoal(_thisArray[0], value); }
	}
	public float c_obstRadius {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_c_obstRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_c_obstRadius(_thisArray[0], value); }
	}
	public int hpObjIndex {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_hpObjIndex(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hpObjIndex(_thisArray[0], value); }
	}
	public HapticDOFType hcType {
	    get { return (HapticDOFType) SprExport.Spr_PHOpHapticControllerDesc_get_hcType(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcType(_thisArray[0], (int) value); }
	}
	public bool logForce {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticControllerDesc_get_logForce(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticControllerDesc_set_logForce(_thisArray[0], (char) val);
	    }
	}
	public bool hcReady {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticControllerDesc_get_hcReady(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticControllerDesc_set_hcReady(_thisArray[0], (char) val);
	    }
	}
	public bool IsSetForceReady {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticControllerDesc_get_IsSetForceReady(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticControllerDesc_set_IsSetForceReady(_thisArray[0], (char) val);
	    }
	}
	public int fileindex {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_fileindex(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_fileindex(_thisArray[0], value); }
	}
	public Vec3f lastHpRateF {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_lastHpRateF(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_lastHpRateF(_thisArray[0], value); }
	}
	public bool hcCollied {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticControllerDesc_get_hcCollied(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticControllerDesc_set_hcCollied(_thisArray[0], (char) val);
	    }
	}
	public int constrainCount {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_constrainCount(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_constrainCount(_thisArray[0], value); }
	}
	public int constrainCountHc {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_constrainCountHc(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_constrainCountHc(_thisArray[0], value); }
	}
	public Vec3f couterPlaneN {
	    get { return new Vec3f(SprExport.Spr_PHOpHapticControllerDesc_addr_couterPlaneN(_thisArray[0])); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_couterPlaneN(_thisArray[0], value); }
	}
	public float hcElmDtcRadius {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_hcElmDtcRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_hcElmDtcRadius(_thisArray[0], value); }
	}
	public int collectCount {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_collectCount(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_collectCount(_thisArray[0], value); }
	}
	public int collectItrtor {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_collectItrtor(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_collectItrtor(_thisArray[0], value); }
	}
	public bool hcProxyOn {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpHapticControllerDesc_get_hcProxyOn(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpHapticControllerDesc_set_hcProxyOn(_thisArray[0], (char) val);
	    }
	}
	public int suspObjid {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_suspObjid(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_suspObjid(_thisArray[0], value); }
	}
	public float proxyRadius {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_proxyRadius(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_proxyRadius(_thisArray[0], value); }
	}
	public int surrCnstrs {
	    get { return SprExport.Spr_PHOpHapticControllerDesc_get_surrCnstrs(_thisArray[0]); }
	    set { SprExport.Spr_PHOpHapticControllerDesc_set_surrCnstrs(_thisArray[0], value); }
	}
	public enum HapticDOFType : int {
	    _3DOF = 0, _6DOF = _3DOF + 1
	}
	public enum cstrainType : int {
	    cstPoint, cstEdge = cstPoint + 1, cstFace = cstEdge + 1
	}
    }
    [System.Serializable]
    public class PHOpHapticControllerDescStruct : CsObject {
        public PHOpHapticControllerDescStruct() {
            PHOpHapticControllerDesc desc = new PHOpHapticControllerDesc();
            ApplyFrom(desc, false);
        }
	public float posScale;
	public float rotScale;
	public float forceScale;
	public Vec3fStruct userPos;
	public PosefStruct userPose;
	public Vec3fStruct hcCurrPPos;
	public Vec3fStruct hcCurrUPos;
	public Vec3fStruct hcLastUPos;
	public Vec3fStruct hcFixsubGoal;
	public float c_obstRadius;
	public int hpObjIndex;
	public PHOpHapticControllerDesc.HapticDOFType hcType;
	public bool logForce;
	public bool hcReady;
	public bool IsSetForceReady;
	public int fileindex;
	public Vec3fStruct lastHpRateF;
	public bool hcCollied;
	public int constrainCount;
	public int constrainCountHc;
	public Vec3fStruct couterPlaneN;
	public float hcElmDtcRadius;
	public int collectCount;
	public int collectItrtor;
	public bool hcProxyOn;
	public int suspObjid;
	public float proxyRadius;
	public int surrCnstrs;
	public void ApplyTo(PHOpHapticControllerDesc r, bool apply_to_base_class = false) {
		r.posScale = posScale;
		r.rotScale = rotScale;
		r.forceScale = forceScale;
		r.userPos = userPos;
		r.userPose = userPose;
		r.hcCurrPPos = hcCurrPPos;
		r.hcCurrUPos = hcCurrUPos;
		r.hcLastUPos = hcLastUPos;
		r.hcFixsubGoal = hcFixsubGoal;
		r.c_obstRadius = c_obstRadius;
		r.hpObjIndex = hpObjIndex;
		r.hcType = hcType;
		r.logForce = logForce;
		r.hcReady = hcReady;
		r.IsSetForceReady = IsSetForceReady;
		r.fileindex = fileindex;
		r.lastHpRateF = lastHpRateF;
		r.hcCollied = hcCollied;
		r.constrainCount = constrainCount;
		r.constrainCountHc = constrainCountHc;
		r.couterPlaneN = couterPlaneN;
		r.hcElmDtcRadius = hcElmDtcRadius;
		r.collectCount = collectCount;
		r.collectItrtor = collectItrtor;
		r.hcProxyOn = hcProxyOn;
		r.suspObjid = suspObjid;
		r.proxyRadius = proxyRadius;
		r.surrCnstrs = surrCnstrs;
	}
	public void ApplyFrom(PHOpHapticControllerDesc r, bool apply_to_base_class = false) {
		posScale = r.posScale;
		rotScale = r.rotScale;
		forceScale = r.forceScale;
		userPos = r.userPos;
		userPose = r.userPose;
		hcCurrPPos = r.hcCurrPPos;
		hcCurrUPos = r.hcCurrUPos;
		hcLastUPos = r.hcLastUPos;
		hcFixsubGoal = r.hcFixsubGoal;
		c_obstRadius = r.c_obstRadius;
		hpObjIndex = r.hpObjIndex;
		hcType = r.hcType;
		logForce = r.logForce;
		hcReady = r.hcReady;
		IsSetForceReady = r.IsSetForceReady;
		fileindex = r.fileindex;
		lastHpRateF = r.lastHpRateF;
		hcCollied = r.hcCollied;
		constrainCount = r.constrainCount;
		constrainCountHc = r.constrainCountHc;
		couterPlaneN = r.couterPlaneN;
		hcElmDtcRadius = r.hcElmDtcRadius;
		collectCount = r.collectCount;
		collectItrtor = r.collectItrtor;
		hcProxyOn = r.hcProxyOn;
		suspObjid = r.suspObjid;
		proxyRadius = r.proxyRadius;
		surrCnstrs = r.surrCnstrs;
	}
	public static implicit operator PHOpHapticControllerDesc(PHOpHapticControllerDescStruct m) {
	    PHOpHapticControllerDesc r = new PHOpHapticControllerDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpHapticControllerDescStruct(PHOpHapticControllerDesc r) {
	    PHOpHapticControllerDescStruct m = new PHOpHapticControllerDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpAnimationDesc : CsObject {
	public PHOpAnimationDesc() { _thisArray[0] = SprExport.Spr_new_PHOpAnimationDesc(); _flag = true; }
	public PHOpAnimationDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpAnimationDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpAnimationDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpAnimationDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpAnimationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpAnimationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpAnimationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpAnimationDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpAnimationDesc() { if (_flag) { SprExport.Spr_delete_PHOpAnimationDesc(_thisArray[0]); _flag = false; } }
	public float timestep {
	    get { return SprExport.Spr_PHOpAnimationDesc_get_timestep(_thisArray[0]); }
	    set { SprExport.Spr_PHOpAnimationDesc_set_timestep(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpAnimationDescStruct : CsObject {
        public PHOpAnimationDescStruct() {
            PHOpAnimationDesc desc = new PHOpAnimationDesc();
            ApplyFrom(desc, false);
        }
	public float timestep;
	public void ApplyTo(PHOpAnimationDesc r, bool apply_to_base_class = false) {
		r.timestep = timestep;
	}
	public void ApplyFrom(PHOpAnimationDesc r, bool apply_to_base_class = false) {
		timestep = r.timestep;
	}
	public static implicit operator PHOpAnimationDesc(PHOpAnimationDescStruct m) {
	    PHOpAnimationDesc r = new PHOpAnimationDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpAnimationDescStruct(PHOpAnimationDesc r) {
	    PHOpAnimationDescStruct m = new PHOpAnimationDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHOpSpHashColliAgentDesc : CsObject {
	public PHOpSpHashColliAgentDesc() { _thisArray[0] = SprExport.Spr_new_PHOpSpHashColliAgentDesc(); _flag = true; }
	public PHOpSpHashColliAgentDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpSpHashColliAgentDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHOpSpHashColliAgentDesc() { if (_flag) { SprExport.Spr_delete_PHOpSpHashColliAgentDesc(_thisArray[0]); _flag = false; } }
	public bool useDirColli {
	    get {
	        byte ret = (byte) SprExport.Spr_PHOpSpHashColliAgentDesc_get_useDirColli(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHOpSpHashColliAgentDesc_set_useDirColli(_thisArray[0], (char) val);
	    }
	}
	public float collisionCstrStiffness {
	    get { return SprExport.Spr_PHOpSpHashColliAgentDesc_get_collisionCstrStiffness(_thisArray[0]); }
	    set { SprExport.Spr_PHOpSpHashColliAgentDesc_set_collisionCstrStiffness(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHOpSpHashColliAgentDescStruct : CsObject {
        public PHOpSpHashColliAgentDescStruct() {
            PHOpSpHashColliAgentDesc desc = new PHOpSpHashColliAgentDesc();
            ApplyFrom(desc, false);
        }
	public bool useDirColli;
	public float collisionCstrStiffness;
	public void ApplyTo(PHOpSpHashColliAgentDesc r, bool apply_to_base_class = false) {
		r.useDirColli = useDirColli;
		r.collisionCstrStiffness = collisionCstrStiffness;
	}
	public void ApplyFrom(PHOpSpHashColliAgentDesc r, bool apply_to_base_class = false) {
		useDirColli = r.useDirColli;
		collisionCstrStiffness = r.collisionCstrStiffness;
	}
	public static implicit operator PHOpSpHashColliAgentDesc(PHOpSpHashColliAgentDescStruct m) {
	    PHOpSpHashColliAgentDesc r = new PHOpSpHashColliAgentDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHOpSpHashColliAgentDescStruct(PHOpSpHashColliAgentDesc r) {
	    PHOpSpHashColliAgentDescStruct m = new PHOpSpHashColliAgentDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHRaycastHit : CsObject {
	public PHRaycastHit() { _thisArray[0] = SprExport.Spr_new_PHRaycastHit(); _flag = true; }
	public PHRaycastHit(IntPtr ptr) : base(ptr, 0, false) {}
	public PHRaycastHit(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHRaycastHit(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHRaycastHit(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHRaycastHit(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHRaycastHit(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHRaycastHit(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHRaycastHit(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHRaycastHit() { if (_flag) { SprExport.Spr_delete_PHRaycastHit(_thisArray[0]); _flag = false; } }
	public PHSolidIf solid {
	    get { return new PHSolidIf(SprExport.Spr_PHRaycastHit_get_solid(_thisArray[0])); }
	    set { SprExport.Spr_PHRaycastHit_set_solid(_thisArray[0], value); }
	}
	public CDShapeIf shape {
	    get { return new CDShapeIf(SprExport.Spr_PHRaycastHit_get_shape(_thisArray[0])); }
	    set { SprExport.Spr_PHRaycastHit_set_shape(_thisArray[0], value); }
	}
	public Vec3f point {
	    get { return new Vec3f(SprExport.Spr_PHRaycastHit_addr_point(_thisArray[0])); }
	    set { SprExport.Spr_PHRaycastHit_set_point(_thisArray[0], value); }
	}
	public float distance {
	    get { return SprExport.Spr_PHRaycastHit_get_distance(_thisArray[0]); }
	    set { SprExport.Spr_PHRaycastHit_set_distance(_thisArray[0], value); }
	}
    }
    public partial class PHRayDesc : CsObject {
	public PHRayDesc() { _thisArray[0] = SprExport.Spr_new_PHRayDesc(); _flag = true; }
	public PHRayDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHRayDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHRayDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHRayDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHRayDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHRayDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHRayDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHRayDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHRayDesc() { if (_flag) { SprExport.Spr_delete_PHRayDesc(_thisArray[0]); _flag = false; } }
	public Vec3d origin {
	    get { return new Vec3d(SprExport.Spr_PHRayDesc_addr_origin(_thisArray[0])); }
	    set { SprExport.Spr_PHRayDesc_set_origin(_thisArray[0], value); }
	}
	public Vec3d direction {
	    get { return new Vec3d(SprExport.Spr_PHRayDesc_addr_direction(_thisArray[0])); }
	    set { SprExport.Spr_PHRayDesc_set_direction(_thisArray[0], value); }
	}
    }
    [System.Serializable]
    public class PHRayDescStruct : CsObject {
        public PHRayDescStruct() {
            PHRayDesc desc = new PHRayDesc();
            ApplyFrom(desc, false);
        }
	public Vec3dStruct origin;
	public Vec3dStruct direction;
	public void ApplyTo(PHRayDesc r, bool apply_to_base_class = false) {
		r.origin = origin;
		r.direction = direction;
	}
	public void ApplyFrom(PHRayDesc r, bool apply_to_base_class = false) {
		origin = r.origin;
		direction = r.direction;
	}
	public static implicit operator PHRayDesc(PHRayDescStruct m) {
	    PHRayDesc r = new PHRayDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHRayDescStruct(PHRayDesc r) {
	    PHRayDescStruct m = new PHRayDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSceneState : CsObject {
	public PHSceneState() { _thisArray[0] = SprExport.Spr_new_PHSceneState(); _flag = true; }
	public PHSceneState(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSceneState(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSceneState(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSceneState(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSceneState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSceneState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSceneState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSceneState(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSceneState() { if (_flag) { SprExport.Spr_delete_PHSceneState(_thisArray[0]); _flag = false; } }
	public double timeStep {
	    get { return SprExport.Spr_PHSceneState_get_timeStep(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneState_set_timeStep(_thisArray[0], value); }
	}
	public double haptictimeStep {
	    get { return SprExport.Spr_PHSceneState_get_haptictimeStep(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneState_set_haptictimeStep(_thisArray[0], value); }
	}
	public uint count {
	    get { return SprExport.Spr_PHSceneState_get_count(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneState_set_count(_thisArray[0], value); }
	}
	public void Init() {
	    SprExport.Spr_PHSceneState_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHSceneStateStruct : CsObject {
        public PHSceneStateStruct() {
            PHSceneState desc = new PHSceneState();
            ApplyFrom(desc, false);
        }
	public double timeStep;
	public double haptictimeStep;
	public uint count;
	public void ApplyTo(PHSceneState r, bool apply_to_base_class = false) {
		r.timeStep = timeStep;
		r.haptictimeStep = haptictimeStep;
		r.count = count;
	}
	public void ApplyFrom(PHSceneState r, bool apply_to_base_class = false) {
		timeStep = r.timeStep;
		haptictimeStep = r.haptictimeStep;
		count = r.count;
	}
	public static implicit operator PHSceneState(PHSceneStateStruct m) {
	    PHSceneState r = new PHSceneState();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSceneStateStruct(PHSceneState r) {
	    PHSceneStateStruct m = new PHSceneStateStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSceneDesc : PHSceneState {
	public PHSceneDesc() { _thisArray[0] = SprExport.Spr_new_PHSceneDesc(); _flag = true; }
	public PHSceneDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSceneDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSceneDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSceneDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSceneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSceneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSceneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSceneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSceneDesc() { if (_flag) { SprExport.Spr_delete_PHSceneDesc(_thisArray[0]); _flag = false; } }
	public Vec3d gravity {
	    get { return new Vec3d(SprExport.Spr_PHSceneDesc_addr_gravity(_thisArray[0])); }
	    set { SprExport.Spr_PHSceneDesc_set_gravity(_thisArray[0], value); }
	}
	public double airResistanceRateForVelocity {
	    get { return SprExport.Spr_PHSceneDesc_get_airResistanceRateForVelocity(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_airResistanceRateForVelocity(_thisArray[0], value); }
	}
	public double airResistanceRateForAngularVelocity {
	    get { return SprExport.Spr_PHSceneDesc_get_airResistanceRateForAngularVelocity(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_airResistanceRateForAngularVelocity(_thisArray[0], value); }
	}
	public double contactTolerance {
	    get { return SprExport.Spr_PHSceneDesc_get_contactTolerance(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_contactTolerance(_thisArray[0], value); }
	}
	public double impactThreshold {
	    get { return SprExport.Spr_PHSceneDesc_get_impactThreshold(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_impactThreshold(_thisArray[0], value); }
	}
	public double frictionThreshold {
	    get { return SprExport.Spr_PHSceneDesc_get_frictionThreshold(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_frictionThreshold(_thisArray[0], value); }
	}
	public double maxDeltaPosition {
	    get { return SprExport.Spr_PHSceneDesc_get_maxDeltaPosition(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxDeltaPosition(_thisArray[0], value); }
	}
	public double maxDeltaOrientation {
	    get { return SprExport.Spr_PHSceneDesc_get_maxDeltaOrientation(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxDeltaOrientation(_thisArray[0], value); }
	}
	public double maxVelocity {
	    get { return SprExport.Spr_PHSceneDesc_get_maxVelocity(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxVelocity(_thisArray[0], value); }
	}
	public double maxAngularVelocity {
	    get { return SprExport.Spr_PHSceneDesc_get_maxAngularVelocity(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxAngularVelocity(_thisArray[0], value); }
	}
	public double maxForce {
	    get { return SprExport.Spr_PHSceneDesc_get_maxForce(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxForce(_thisArray[0], value); }
	}
	public double maxMoment {
	    get { return SprExport.Spr_PHSceneDesc_get_maxMoment(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_maxMoment(_thisArray[0], value); }
	}
	public int numIteration {
	    get { return SprExport.Spr_PHSceneDesc_get_numIteration(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_numIteration(_thisArray[0], value); }
	}
	public int method {
	    get { return SprExport.Spr_PHSceneDesc_get_method(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_method(_thisArray[0], value); }
	}
	public bool bContactDetectionEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSceneDesc_get_bContactDetectionEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSceneDesc_set_bContactDetectionEnabled(_thisArray[0], (char) val);
	    }
	}
	public bool bCCDEnabled {
	    get {
	        byte ret = (byte) SprExport.Spr_PHSceneDesc_get_bCCDEnabled(_thisArray[0]);
	        return (ret == 0) ? false : true;
	    }
	    set {
	        byte val = (byte) (value ? 1 : 0);
	        SprExport.Spr_PHSceneDesc_set_bCCDEnabled(_thisArray[0], (char) val);
	    }
	}
	public int broadPhaseMode {
	    get { return SprExport.Spr_PHSceneDesc_get_broadPhaseMode(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_broadPhaseMode(_thisArray[0], value); }
	}
	public int blendMode {
	    get { return SprExport.Spr_PHSceneDesc_get_blendMode(_thisArray[0]); }
	    set { SprExport.Spr_PHSceneDesc_set_blendMode(_thisArray[0], value); }
	}
	public enum BroadPhaseMode : int {
	    MODE_SORT_AND_SWEEP_X = 0, MODE_SORT_AND_SWEEP_Y = MODE_SORT_AND_SWEEP_X + 1, MODE_SORT_AND_SWEEP_Z = MODE_SORT_AND_SWEEP_Y + 1, MODE_PARTITION = MODE_SORT_AND_SWEEP_Z + 1
	}
	public enum ContactMode : int {
	    MODE_NONE = 0, MODE_PENALTY = MODE_NONE + 1, MODE_LCP = MODE_PENALTY + 1
	}
	public enum MatrialBlending : int {
	    BLEND_MIN = 0, BLEND_MAX = BLEND_MIN + 1, BLEND_AVE_ADD = BLEND_MAX + 1, BLEND_AVE_MUL = BLEND_AVE_ADD + 1
	}
	public enum LCPSolver : int {
	    SOLVER_GS = 0, SOLVER_CG = SOLVER_GS + 1
	}
	public void Init() {
	    SprExport.Spr_PHSceneDesc_Init((IntPtr) _thisArray[0]);
	}
    }
    [System.Serializable]
    public class PHSceneDescStruct : PHSceneStateStruct {
        public PHSceneDescStruct() {
            PHSceneDesc desc = new PHSceneDesc();
            ApplyFrom(desc, false);
        }
	public Vec3dStruct gravity;
	public double airResistanceRateForVelocity;
	public double airResistanceRateForAngularVelocity;
	public double contactTolerance;
	public double impactThreshold;
	public double frictionThreshold;
	public double maxDeltaPosition;
	public double maxDeltaOrientation;
	public double maxVelocity;
	public double maxAngularVelocity;
	public double maxForce;
	public double maxMoment;
	public int numIteration;
	public int method;
	public bool bContactDetectionEnabled;
	public bool bCCDEnabled;
	public int broadPhaseMode;
	public int blendMode;
	public void ApplyTo(PHSceneDesc r, bool apply_to_base_class = false) {
		r.gravity = gravity;
		r.airResistanceRateForVelocity = airResistanceRateForVelocity;
		r.airResistanceRateForAngularVelocity = airResistanceRateForAngularVelocity;
		r.contactTolerance = contactTolerance;
		r.impactThreshold = impactThreshold;
		r.frictionThreshold = frictionThreshold;
		r.maxDeltaPosition = maxDeltaPosition;
		r.maxDeltaOrientation = maxDeltaOrientation;
		r.maxVelocity = maxVelocity;
		r.maxAngularVelocity = maxAngularVelocity;
		r.maxForce = maxForce;
		r.maxMoment = maxMoment;
		r.numIteration = numIteration;
		r.method = method;
		r.bContactDetectionEnabled = bContactDetectionEnabled;
		r.bCCDEnabled = bCCDEnabled;
		r.broadPhaseMode = broadPhaseMode;
		r.blendMode = blendMode;
	}
	public void ApplyFrom(PHSceneDesc r, bool apply_to_base_class = false) {
		gravity = r.gravity;
		airResistanceRateForVelocity = r.airResistanceRateForVelocity;
		airResistanceRateForAngularVelocity = r.airResistanceRateForAngularVelocity;
		contactTolerance = r.contactTolerance;
		impactThreshold = r.impactThreshold;
		frictionThreshold = r.frictionThreshold;
		maxDeltaPosition = r.maxDeltaPosition;
		maxDeltaOrientation = r.maxDeltaOrientation;
		maxVelocity = r.maxVelocity;
		maxAngularVelocity = r.maxAngularVelocity;
		maxForce = r.maxForce;
		maxMoment = r.maxMoment;
		numIteration = r.numIteration;
		method = r.method;
		bContactDetectionEnabled = r.bContactDetectionEnabled;
		bCCDEnabled = r.bCCDEnabled;
		broadPhaseMode = r.broadPhaseMode;
		blendMode = r.blendMode;
	}
	public static implicit operator PHSceneDesc(PHSceneDescStruct m) {
	    PHSceneDesc r = new PHSceneDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSceneDescStruct(PHSceneDesc r) {
	    PHSceneDescStruct m = new PHSceneDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSdkDesc : CsObject {
	public PHSdkDesc() { _thisArray[0] = SprExport.Spr_new_PHSdkDesc(); _flag = true; }
	public PHSdkDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSdkDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSdkDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSdkDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSdkDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSdkDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSdkDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSdkDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSdkDesc() { if (_flag) { SprExport.Spr_delete_PHSdkDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHSdkDescStruct : CsObject {
        public PHSdkDescStruct() {
            PHSdkDesc desc = new PHSdkDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHSdkDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHSdkDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHSdkDesc(PHSdkDescStruct m) {
	    PHSdkDesc r = new PHSdkDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSdkDescStruct(PHSdkDesc r) {
	    PHSdkDescStruct m = new PHSdkDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHBoneDesc : CsObject {
	public PHBoneDesc() { _thisArray[0] = SprExport.Spr_new_PHBoneDesc(); _flag = true; }
	public PHBoneDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBoneDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBoneDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBoneDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBoneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBoneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBoneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBoneDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHBoneDesc() { if (_flag) { SprExport.Spr_delete_PHBoneDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHBoneDescStruct : CsObject {
        public PHBoneDescStruct() {
            PHBoneDesc desc = new PHBoneDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHBoneDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHBoneDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHBoneDesc(PHBoneDescStruct m) {
	    PHBoneDesc r = new PHBoneDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHBoneDescStruct(PHBoneDesc r) {
	    PHBoneDescStruct m = new PHBoneDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHSkeletonDesc : CsObject {
	public PHSkeletonDesc() { _thisArray[0] = SprExport.Spr_new_PHSkeletonDesc(); _flag = true; }
	public PHSkeletonDesc(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSkeletonDesc(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSkeletonDesc(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSkeletonDesc(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSkeletonDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSkeletonDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSkeletonDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSkeletonDesc(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	~PHSkeletonDesc() { if (_flag) { SprExport.Spr_delete_PHSkeletonDesc(_thisArray[0]); _flag = false; } }
    }
    [System.Serializable]
    public class PHSkeletonDescStruct : CsObject {
        public PHSkeletonDescStruct() {
            PHSkeletonDesc desc = new PHSkeletonDesc();
            ApplyFrom(desc, false);
        }
	public void ApplyTo(PHSkeletonDesc r, bool apply_to_base_class = false) {
	}
	public void ApplyFrom(PHSkeletonDesc r, bool apply_to_base_class = false) {
	}
	public static implicit operator PHSkeletonDesc(PHSkeletonDescStruct m) {
	    PHSkeletonDesc r = new PHSkeletonDesc();
	    m.ApplyTo(r, true);
	    return r;
	}
	public static implicit operator PHSkeletonDescStruct(PHSkeletonDesc r) {
	    PHSkeletonDescStruct m = new PHSkeletonDescStruct();
	    m.ApplyFrom(r, true);
	    return m;
	}
    }
    public partial class PHEngineIf : SceneObjectIf {
	public PHEngineIf() { _thisArray[0] = SprExport.Spr_new_PHEngineIf(); _flag = true; }
	public PHEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHEngineIf.GetIfInfoStatic()) ? new PHEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHEngineIf() { if (_flag) { SprExport.Spr_delete_PHEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int GetPriority() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHEngineIf_GetPriority((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHEngineIf_GetPriority((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHEngineIf_GetPriority((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void Step() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHEngineIf_Step((IntPtr) _thisArray[0]);
		}
	}
	public void Enable(bool on) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
					},
					() => {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
						});
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
					} else {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
					}
				}
			}
		} else {
	    SprExport.Spr_PHEngineIf_Enable((IntPtr) _thisArray[0], (bool) on);
		}
	}
	public void Enable() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHEngineIf_Enable_1((IntPtr) _thisArray[0]);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHEngineIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHEngineIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHEngineIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PHSceneIf GetScene() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHEngineIf_GetScene((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHEngineIf_GetScene((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHEngineIf_GetScene((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHConstraintEngineIf : PHEngineIf {
	public PHConstraintEngineIf() { _thisArray[0] = SprExport.Spr_new_PHConstraintEngineIf(); _flag = true; }
	public PHConstraintEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHConstraintEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHConstraintEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHConstraintEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHConstraintEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHConstraintEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHConstraintEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHConstraintEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHConstraintEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHConstraintEngineIf.GetIfInfoStatic()) ? new PHConstraintEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHConstraintEngineIf() { if (_flag) { SprExport.Spr_delete_PHConstraintEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHConstraintEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHConstraintEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHConstraintEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHConstraintsIf GetContactPoints() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintEngineIf_GetContactPoints((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHConstraintsIf obj = new PHConstraintsIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintEngineIf_GetContactPoints((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHConstraintsIf obj = new PHConstraintsIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintEngineIf_GetContactPoints((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHConstraintsIf obj = new PHConstraintsIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetVelCorrectionRate(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetVelCorrectionRate((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetVelCorrectionRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetVelCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetVelCorrectionRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetPosCorrectionRate(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetPosCorrectionRate((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetPosCorrectionRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetPosCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetPosCorrectionRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetContactCorrectionRate(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetContactCorrectionRate((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetContactCorrectionRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetContactCorrectionRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetContactCorrectionRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetBSaveConstraints(bool value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) value);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) value);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) value);
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) value);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) value);
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) value);
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetBSaveConstraints((IntPtr) _thisArray[0], (bool) value);
		}
	}
	public void SetUpdateAllSolidState(bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetUpdateAllSolidState((IntPtr) _thisArray[0], (bool) flag);
		}
	}
	public void SetUseContactSurface(bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetUseContactSurface((IntPtr) _thisArray[0], (bool) flag);
		}
	}
	public void SetShrinkRate(double data) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRate((IntPtr) _thisArray[0], (double) data);
		}
	}
	public double GetShrinkRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetShrinkRateCorrection(double data) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) data);
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) data);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetShrinkRateCorrection((IntPtr) _thisArray[0], (double) data);
		}
	}
	public double GetShrinkRateCorrection() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRateCorrection((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetShrinkRateCorrection((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetRegularization(double reg) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) reg);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) reg);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) reg);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) reg);
						});
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) reg);
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) reg);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) reg);
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) reg);
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) reg);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_SetRegularization((IntPtr) _thisArray[0], (double) reg);
		}
	}
	public double GetRegularization() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHConstraintEngineIf_GetRegularization((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHConstraintEngineIf_GetRegularization((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHConstraintEngineIf_GetRegularization((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void EnableRenderContact(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintEngineIf_EnableRenderContact((IntPtr) _thisArray[0], (bool) enable);
		}
	}
    }
    public partial class PHGravityEngineIf : PHEngineIf {
	public PHGravityEngineIf() { _thisArray[0] = SprExport.Spr_new_PHGravityEngineIf(); _flag = true; }
	public PHGravityEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGravityEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGravityEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGravityEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGravityEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGravityEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGravityEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGravityEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHGravityEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHGravityEngineIf.GetIfInfoStatic()) ? new PHGravityEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHGravityEngineIf() { if (_flag) { SprExport.Spr_delete_PHGravityEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHGravityEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHGravityEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHGravityEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHGravityEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHGravityEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHGravityEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPenaltyEngineIf : PHEngineIf {
	public PHPenaltyEngineIf() { _thisArray[0] = SprExport.Spr_new_PHPenaltyEngineIf(); _flag = true; }
	public PHPenaltyEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPenaltyEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPenaltyEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPenaltyEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPenaltyEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPenaltyEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPenaltyEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPenaltyEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPenaltyEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHPenaltyEngineIf.GetIfInfoStatic()) ? new PHPenaltyEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHPenaltyEngineIf() { if (_flag) { SprExport.Spr_delete_PHPenaltyEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPenaltyEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPenaltyEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPenaltyEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPenaltyEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPenaltyEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPenaltyEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHIKEngineIf : PHEngineIf {
	public PHIKEngineIf() { _thisArray[0] = SprExport.Spr_new_PHIKEngineIf(); _flag = true; }
	public PHIKEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHIKEngineIf.GetIfInfoStatic()) ? new PHIKEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKEngineIf() { if (_flag) { SprExport.Spr_delete_PHIKEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public void SetMaxVelocity(double maxVel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxVel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxVel);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxVel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxVel);
						});
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxVel);
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxVel);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxVel);
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxVel);
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxVel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxVelocity((IntPtr) _thisArray[0], (double) maxVel);
		}
	}
	public double GetMaxVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEngineIf_GetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEngineIf_GetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEngineIf_GetMaxVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxAngularVelocity(double maxAV) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
						});
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxAngularVelocity((IntPtr) _thisArray[0], (double) maxAV);
		}
	}
	public double GetMaxAngularVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEngineIf_GetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEngineIf_GetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEngineIf_GetMaxAngularVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxActuatorVelocity(double maxAV) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
						});
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) maxAV);
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) maxAV);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetMaxActuatorVelocity((IntPtr) _thisArray[0], (double) maxAV);
		}
	}
	public double GetMaxActuatorVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEngineIf_GetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEngineIf_GetMaxActuatorVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEngineIf_GetMaxActuatorVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetRegularizeParam(double epsilon) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
						});
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetRegularizeParam((IntPtr) _thisArray[0], (double) epsilon);
		}
	}
	public double GetRegularizeParam() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEngineIf_GetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEngineIf_GetRegularizeParam((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEngineIf_GetRegularizeParam((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetIterCutOffAngVel(double epsilon) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
						});
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) epsilon);
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) epsilon);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetIterCutOffAngVel((IntPtr) _thisArray[0], (double) epsilon);
		}
	}
	public double GetIterCutOffAngVel() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEngineIf_GetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEngineIf_GetIterCutOffAngVel((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEngineIf_GetIterCutOffAngVel((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetIntpRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetIntpRate((IntPtr) _thisArray[0]);
		}
	}
	public int GetIntpRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHIKEngineIf_GetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHIKEngineIf_GetIntpRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHIKEngineIf_GetIntpRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void ApplyExactState(bool reverse) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
						});
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
					} else {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState((IntPtr) _thisArray[0], (bool) reverse);
		}
	}
	public void ApplyExactState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_ApplyExactState_1((IntPtr) _thisArray[0]);
		}
	}
	public void SetNumIter(int numIter) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) numIter);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) numIter);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) numIter);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) numIter);
						});
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) numIter);
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) numIter);
					} else {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) numIter);
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) numIter);
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) numIter);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_SetNumIter((IntPtr) _thisArray[0], (int) numIter);
		}
	}
	public int GetNumIter() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHIKEngineIf_GetNumIter((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHIKEngineIf_GetNumIter((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHIKEngineIf_GetNumIter((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void FK() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEngineIf_FK((IntPtr) _thisArray[0]);
		}
	}
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHFemEngineIf : PHEngineIf {
	public PHFemEngineIf() { _thisArray[0] = SprExport.Spr_new_PHFemEngineIf(); _flag = true; }
	public PHFemEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHFemEngineIf.GetIfInfoStatic()) ? new PHFemEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemEngineIf() { if (_flag) { SprExport.Spr_delete_PHFemEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public double GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemEngineIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemEngineIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemEngineIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVibrationTransfer(bool bEnable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
						});
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					} else {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_SetVibrationTransfer((IntPtr) _thisArray[0], (bool) bEnable);
		}
	}
	public void SetThermalTransfer(bool bEnable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
						});
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					} else {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_SetThermalTransfer((IntPtr) _thisArray[0], (bool) bEnable);
		}
	}
	public int NMeshNew() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemEngineIf_NMeshNew((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemEngineIf_NMeshNew((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemEngineIf_NMeshNew((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHFemMeshNewIf GetMeshNew(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemEngineIf_GetMeshNew((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemEngineIf_GetMeshNew((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemEngineIf_GetMeshNew((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public bool AddMeshPair(PHFemMeshNewIf m0, PHFemMeshNewIf m1) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    char retStep = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemEngineIf_AddMeshPair((IntPtr) _thisArray[0], (IntPtr) m0._thisArray[0], (IntPtr) m1._thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool RemoveMeshPair(PHFemMeshNewIf m0, PHFemMeshNewIf m1) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    char retStep = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m0._thisArray[phSceneIf.sceneForStep], (IntPtr) m1._thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m0._thisArray[phSceneIf.sceneForBuffer], (IntPtr) m1._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m0._thisArray[phSceneIf.sceneForGet], (IntPtr) m1._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemEngineIf_RemoveMeshPair((IntPtr) _thisArray[0], (IntPtr) m0._thisArray[0], (IntPtr) m1._thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void ThermalTransfer() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_ThermalTransfer((IntPtr) _thisArray[0]);
		}
	}
	public void setheatTransferRatio(double setheatTransferRatio) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setheatTransferRatio);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setheatTransferRatio);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setheatTransferRatio);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setheatTransferRatio);
						});
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setheatTransferRatio);
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setheatTransferRatio);
					} else {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setheatTransferRatio);
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setheatTransferRatio);
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setheatTransferRatio);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_setheatTransferRatio((IntPtr) _thisArray[0], (double) setheatTransferRatio);
		}
	}
	public void FEMSolidMatchRefresh() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_FEMSolidMatchRefresh((IntPtr) _thisArray[0]);
		}
	}
	public void InitContacts() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_InitContacts((IntPtr) _thisArray[0]);
		}
	}
	public void ClearContactVectors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemEngineIf_ClearContactVectors((IntPtr) _thisArray[0]);
		}
	}
	public int NMesh() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemEngineIf_NMesh((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemEngineIf_NMesh((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemEngineIf_NMesh((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHFemMeshIf GetMesh(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemEngineIf_GetMesh((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemEngineIf_GetMesh((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemEngineIf_GetMesh((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptr, 0);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHOpEngineIf : PHEngineIf {
	public PHOpEngineIf() { _thisArray[0] = SprExport.Spr_new_PHOpEngineIf(); _flag = true; }
	public PHOpEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHOpEngineIf.GetIfInfoStatic()) ? new PHOpEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpEngineIf() { if (_flag) { SprExport.Spr_delete_PHOpEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public double GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHOpEngineIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHOpEngineIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHOpEngineIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetGravity(bool gflag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) gflag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) gflag);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) gflag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) gflag);
						});
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) gflag);
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) gflag);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) gflag);
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) gflag);
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) gflag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetGravity((IntPtr) _thisArray[0], (bool) gflag);
		}
	}
	public void InitialHapticRenderer(int objId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objId);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objId);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objId);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objId);
						});
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objId);
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objId);
					} else {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objId);
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objId);
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objId);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_InitialHapticRenderer((IntPtr) _thisArray[0], (int) objId);
		}
	}
	public arraywrapper_PHOpObjDesc GetOpObj(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            return new arraywrapper_PHOpObjDesc(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            return new arraywrapper_PHOpObjDesc(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetOpObj((IntPtr) _thisArray[0], (int) i);
            return new arraywrapper_PHOpObjDesc(ptr);
		}
		throw new InvalidOperationException();
	}
	public void StepWithBlend() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_StepWithBlend((IntPtr) _thisArray[0]);
		}
	}
	public int AddOpObj() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    int resultBuffer = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    int resultGet = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    int resultStep = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    int resultBuffer = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    int resultGet = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
					} else {
	    int resultStep = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    int resultBuffer = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    int resultGet = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
					}
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpEngineIf_AddOpObj((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetHapticSolveEnable(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetHapticSolveEnable((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsHapticSolve() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpEngineIf_IsHapticSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpEngineIf_IsHapticSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpEngineIf_IsHapticSolve((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetProxyCorrectionEnable(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetProxyCorrectionEnable((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsProxyCorrection() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpEngineIf_IsProxyCorrection((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpEngineIf_IsProxyCorrection((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpEngineIf_IsProxyCorrection((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetUpdateNormal(bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
						});
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetUpdateNormal((IntPtr) _thisArray[0], (bool) flag);
		}
	}
	public bool IsUpdateNormal(int obji) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpEngineIf_IsUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) obji);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpEngineIf_IsUpdateNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) obji);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpEngineIf_IsUpdateNormal((IntPtr) _thisArray[0], (int) obji);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetUseHaptic(bool hapticUsage) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) hapticUsage);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) hapticUsage);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) hapticUsage);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) hapticUsage);
						});
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) hapticUsage);
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) hapticUsage);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) hapticUsage);
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) hapticUsage);
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) hapticUsage);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetUseHaptic((IntPtr) _thisArray[0], (bool) hapticUsage);
		}
	}
	public bool GetUseHaptic() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpEngineIf_GetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpEngineIf_GetUseHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpEngineIf_GetUseHaptic((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PHOpObjIf GetOpObjIf(int obji) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetOpObjIf((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) obji);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHOpObjIf obj = new PHOpObjIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetOpObjIf((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) obji);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHOpObjIf obj = new PHOpObjIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetOpObjIf((IntPtr) _thisArray[0], (int) obji);
            if (ptr == IntPtr.Zero) { return null; } 
            PHOpObjIf obj = new PHOpObjIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int GetOpObjNum() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpEngineIf_GetOpObjNum((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHOpEngineIf_GetOpObjNum((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpEngineIf_GetOpObjNum((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public ObjectIf GetOpAnimator() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetOpAnimator((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetOpAnimator((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetOpAnimator((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptr, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public ObjectIf GetOpHapticController() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetOpHapticController((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetOpHapticController((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetOpHapticController((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptr, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public ObjectIf GetOpHapticRenderer() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpEngineIf_GetOpHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpEngineIf_GetOpHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpEngineIf_GetOpHapticRenderer((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptr, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetIterationCount(int count) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) count);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) count);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) count);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) count);
						});
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) count);
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) count);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) count);
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) count);
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) count);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetIterationCount((IntPtr) _thisArray[0], (int) count);
		}
	}
	public int GetIterationCount() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpEngineIf_GetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHOpEngineIf_GetIterationCount((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpEngineIf_GetIterationCount((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetAnimationFlag(bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
						});
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetAnimationFlag((IntPtr) _thisArray[0], (bool) flag);
		}
	}
	public bool GetAnimationFlag() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpEngineIf_GetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpEngineIf_GetAnimationFlag((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpEngineIf_GetAnimationFlag((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetDrawPtclR(float r) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
						});
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					} else {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_SetDrawPtclR((IntPtr) _thisArray[0], (float) r);
		}
	}
	public float GetDrawPtclR() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpEngineIf_GetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpEngineIf_GetDrawPtclR((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpEngineIf_GetDrawPtclR((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void InitialNoMeshHapticRenderer() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpEngineIf_InitialNoMeshHapticRenderer((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHFemMeshIf : SceneObjectIf {
	public PHFemMeshIf() { _thisArray[0] = SprExport.Spr_new_PHFemMeshIf(); _flag = true; }
	public PHFemMeshIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemMeshIf(CsCastObject target) {
		return (target._info.Inherit(PHFemMeshIf.GetIfInfoStatic()) ? new PHFemMeshIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemMeshIf() { if (_flag) { SprExport.Spr_delete_PHFemMeshIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemMeshIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemMeshIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemMeshIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHFemMeshThermoIf : PHFemMeshIf {
	public PHFemMeshThermoIf() { _thisArray[0] = SprExport.Spr_new_PHFemMeshThermoIf(); _flag = true; }
	public PHFemMeshThermoIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshThermoIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshThermoIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshThermoIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemMeshThermoIf(CsCastObject target) {
		return (target._info.Inherit(PHFemMeshThermoIf.GetIfInfoStatic()) ? new PHFemMeshThermoIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemMeshThermoIf() { if (_flag) { SprExport.Spr_delete_PHFemMeshThermoIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemMeshThermoIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int GetSurfaceVertex(int id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshThermoIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshThermoIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshThermoIf_GetSurfaceVertex((IntPtr) _thisArray[0], (int) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NSurfaceVertices() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshThermoIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshThermoIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshThermoIf_NSurfaceVertices((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexTc(int id, double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc((IntPtr) _thisArray[0], (int) id, (double) temp);
		}
	}
	public void SetVertexTc(int id, double temp, double heatTrans) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTc_1((IntPtr) _thisArray[0], (int) id, (double) temp, (double) heatTrans);
		}
	}
	public Vec3d GetPose(int id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetPose((IntPtr) _thisArray[0], (int) id);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetSufVtxPose(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetSufVtxPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetSufVtxPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetSufVtxPose((IntPtr) _thisArray[0], (uint) id);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public uint GetStepCount() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCount((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCount((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCount((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public uint GetStepCountCyc() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCountCyc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCountCyc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHFemMeshThermoIf_GetStepCountCyc((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVertexTemp(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshThermoIf_GetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemMeshThermoIf_GetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshThermoIf_GetVertexTemp((IntPtr) _thisArray[0], (uint) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetSufVertexTemp(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshThermoIf_GetSufVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemMeshThermoIf_GetSufVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshThermoIf_GetSufVertexTemp((IntPtr) _thisArray[0], (uint) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexTemp(uint id, double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVertexTemp((IntPtr) _thisArray[0], (uint) id, (double) temp);
		}
	}
	public void SetVerticesTempAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetVerticesTempAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void AddvecFAll(uint id, double dqdt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
						});
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_AddvecFAll((IntPtr) _thisArray[0], (uint) id, (double) dqdt);
		}
	}
	public void SetvecFAll(uint id, double dqdt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetvecFAll((IntPtr) _thisArray[0], (uint) id, (double) dqdt);
		}
	}
	public void SetRhoSpheat(double rho, double Cp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetRhoSpheat((IntPtr) _thisArray[0], (double) rho, (double) Cp);
		}
	}
	public uint GetNFace() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHFemMeshThermoIf_GetNFace((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHFemMeshThermoIf_GetNFace((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHFemMeshThermoIf_GetNFace((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public vectorwrapper_Vec3d GetFaceEdgeVtx(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
            return new vectorwrapper_Vec3d(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
            return new vectorwrapper_Vec3d(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx((IntPtr) _thisArray[0], (uint) id);
            return new vectorwrapper_Vec3d(ptr);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetFaceEdgeVtx(uint id, uint vtx) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (uint) vtx);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (uint) vtx);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetFaceEdgeVtx_1((IntPtr) _thisArray[0], (uint) id, (uint) vtx);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec2d GetIHbandDrawVtx() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec2d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec2d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[0]);
            return new Vec2d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void CalcIHdqdt_atleast(double r, double R, double dqdtAll, uint num) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
						});
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[0], (double) r, (double) R, (double) dqdtAll, (uint) num);
		}
	}
	public void UpdateIHheatband(double xS, double xE, uint heatingMODE) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
						});
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheatband((IntPtr) _thisArray[0], (double) xS, (double) xE, (uint) heatingMODE);
		}
	}
	public void UpdateIHheat(uint heating) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
						});
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateIHheat((IntPtr) _thisArray[0], (uint) heating);
		}
	}
	public void UpdateVecF() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF((IntPtr) _thisArray[0]);
		}
	}
	public void UpdateVecF_frypan() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[0]);
		}
	}
	public void DecrMoist() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist((IntPtr) _thisArray[0]);
		}
	}
	public void DecrMoist_velo(double vel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
						});
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_velo((IntPtr) _thisArray[0], (double) vel);
		}
	}
	public void DecrMoist_vel(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_DecrMoist_vel((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public void InitAllVertexTemp() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitAllVertexTemp((IntPtr) _thisArray[0]);
		}
	}
	public void SetInitThermoConductionParam(double thConduct, double rho, double specificHeat, double heatTrans) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[0], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
		}
	}
	public void SetParamAndReCreateMatrix(double thConduct0, double roh0, double specificHeat0) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[0], (double) thConduct0, (double) roh0, (double) specificHeat0);
		}
	}
	public double GetArbitraryPointTemp(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemMeshThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVtxTempInTets(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshThermoIf_GetVtxTempInTets((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemMeshThermoIf_GetVtxTempInTets((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshThermoIf_GetVtxTempInTets((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void InitVecFAlls() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitVecFAlls((IntPtr) _thisArray[0]);
		}
	}
	public double Get_thConduct() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshThermoIf_Get_thConduct((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemMeshThermoIf_Get_thConduct((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshThermoIf_Get_thConduct((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool SetConcentricHeatMap(vectorwrapper_double r, vectorwrapper_double temp, Vec2d origin) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
vectorwrapper_double new_r = new vectorwrapper_double(r);
// vector or array
vectorwrapper_double new_temp = new vectorwrapper_double(temp);
// vector or array
Vec2d new_origin = new Vec2d(origin);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
vectorwrapper_double new_r = new vectorwrapper_double(r);
// vector or array
vectorwrapper_double new_temp = new vectorwrapper_double(temp);
// vector or array
Vec2d new_origin = new Vec2d(origin);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
	    char retGet = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    char retBuffer = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    char retGet = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[0], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetThermalEmissivityToVerticesAll(double thermalEmissivity, double thermalEmissivity_const) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[0], (double) thermalEmissivity, (double) thermalEmissivity_const);
		}
	}
	public void SetOuterTemp(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetOuterTemp((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void SetThermalRadiation(double ems, double ems_const) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetThermalRadiation((IntPtr) _thisArray[0], (double) ems, (double) ems_const);
		}
	}
	public void SetGaussCalcParam(uint cyc, double epsilon) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetGaussCalcParam((IntPtr) _thisArray[0], (uint) cyc, (double) epsilon);
		}
	}
	public void InitTcAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitTcAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void InitToutAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_InitToutAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void SetWeekPow(double weekPow_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetWeekPow((IntPtr) _thisArray[0], (double) weekPow_);
		}
	}
	public void SetIHParamWEEK(double inr_, double outR_, double weekPow_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetIHParamWEEK((IntPtr) _thisArray[0], (double) inr_, (double) outR_, (double) weekPow_);
		}
	}
	public void SetHeatTransRatioToAllVertex(double heatTransR_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[0], (double) heatTransR_);
		}
	}
	public void AfterSetDesc() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_AfterSetDesc((IntPtr) _thisArray[0]);
		}
	}
	public void SetStopTimespan(double timespan) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
						});
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_SetStopTimespan((IntPtr) _thisArray[0], (double) timespan);
		}
	}
	public void UpdateMatk_RadiantHeatToAir() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[0]);
		}
	}
	public void ActivateVtxbeRadiantHeat() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[0]);
		}
	}
	public void OutputMatKall() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_OutputMatKall((IntPtr) _thisArray[0]);
		}
	}
	public void IfRadiantHeatTrans() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHFemMeshNewIf : SceneObjectIf {
	public PHFemMeshNewIf() { _thisArray[0] = SprExport.Spr_new_PHFemMeshNewIf(); _flag = true; }
	public PHFemMeshNewIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemMeshNewIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemMeshNewIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemMeshNewIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemMeshNewIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemMeshNewIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemMeshNewIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemMeshNewIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemMeshNewIf(CsCastObject target) {
		return (target._info.Inherit(PHFemMeshNewIf.GetIfInfoStatic()) ? new PHFemMeshNewIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemMeshNewIf() { if (_flag) { SprExport.Spr_delete_PHFemMeshNewIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemMeshNewIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetPHSolid(PHSolidIf s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) s._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) s._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) s._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) s._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) s._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) s._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) s._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) s._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) s._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshNewIf_SetPHSolid((IntPtr) _thisArray[0], (IntPtr) s._thisArray[0]);
		}
	}
	public PHSolidIf GetPHSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetPHSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetPHSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHFemVibrationIf GetPHFemVibration() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetPHFemVibration((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemVibrationIf obj = new PHFemVibrationIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetPHFemVibration((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemVibrationIf obj = new PHFemVibrationIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetPHFemVibration((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemVibrationIf obj = new PHFemVibrationIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHFemThermoIf GetPHFemThermo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetPHFemThermo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemThermoIf obj = new PHFemThermoIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetPHFemThermo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemThermoIf obj = new PHFemThermoIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetPHFemThermo((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemThermoIf obj = new PHFemThermoIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHFemPorousWOMoveIf GetPHFemPorousWOMove() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetPHFemPorousWOMove((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemPorousWOMoveIf obj = new PHFemPorousWOMoveIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetPHFemPorousWOMove((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemPorousWOMoveIf obj = new PHFemPorousWOMoveIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetPHFemPorousWOMove((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemPorousWOMoveIf obj = new PHFemPorousWOMoveIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NVertices() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_NVertices((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_NVertices((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_NVertices((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NFaces() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_NFaces((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_NFaces((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_NFaces((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NTets() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_NTets((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_NTets((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_NTets((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexUpdateFlags(bool flg) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flg);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flg);
					},
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flg);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flg);
						});
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flg);
					} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flg);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpdateFlags((IntPtr) _thisArray[0], (bool) flg);
		}
	}
	public void SetVertexUpateFlag(int vid, bool flg) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vid, (bool) flg);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vid, (bool) flg);
					},
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vid, (bool) flg);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vid, (bool) flg);
						});
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vid, (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vid, (bool) flg);
					} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vid, (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vid, (bool) flg);
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vid, (bool) flg);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVertexUpateFlag((IntPtr) _thisArray[0], (int) vid, (bool) flg);
		}
	}
	public double CompTetVolume(int tetID, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetID, (bool) bDeform);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    double resultBuffer = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetID, (bool) bDeform);
					},
					() => {
	    double resultGet = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetID, (bool) bDeform);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    double resultStep = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetID, (bool) bDeform);
						});
	    double resultBuffer = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetID, (bool) bDeform);
	    double resultGet = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetID, (bool) bDeform);
	    return resultGet;
					} else {
	    double resultStep = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetID, (bool) bDeform);
	    double resultBuffer = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetID, (bool) bDeform);
	    double resultGet = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetID, (bool) bDeform);
	    return resultGet;
					}
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemMeshNewIf_CompTetVolume((IntPtr) _thisArray[0], (int) tetID, (bool) bDeform);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool AddVertexDisplacementW(int vtxId, Vec3d disW) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_disW = new Vec3d(disW);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_disW);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_disW);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_disW);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_disW = new Vec3d(disW);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_disW);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_disW);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_disW);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) disW);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) disW);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) disW);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementW((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) disW);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool AddVertexDisplacementL(int vtxId, Vec3d disL) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_disL = new Vec3d(disL);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_disL);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_disL);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_disL);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_disL = new Vec3d(disL);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_disL);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_disL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_disL);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) disL);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) disL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) disL);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_AddVertexDisplacementL((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) disL);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool SetVertexPositionW(int vtxId, Vec3d posW) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posW);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posW);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posW);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posW);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posW);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posW);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) posW);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) posW);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) posW);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionW((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) posW);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool SetVertexPositionL(int vtxId, Vec3d posL) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posL);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posL);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posL);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posL);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posL);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) posL);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) posL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) posL);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_SetVertexPositionL((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) posL);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool SetVertexVelocityL(int vtxId, Vec3d posL) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posL);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posL);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posL);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_posL);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_posL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_posL);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) posL);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) posL);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) posL);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_SetVertexVelocityL((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) posL);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVertexVelocityL(int vtxId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetVertexVelocityL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetVertexVelocityL((IntPtr) _thisArray[0], (int) vtxId);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVertexPositionL(int vtxId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetVertexPositionL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetVertexPositionL((IntPtr) _thisArray[0], (int) vtxId);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVertexDisplacementL(int vtxId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetVertexDisplacementL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetVertexDisplacementL((IntPtr) _thisArray[0], (int) vtxId);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVertexInitalPositionL(int vtxId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetVertexInitalPositionL((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetVertexInitalPositionL((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetVertexInitalPositionL((IntPtr) _thisArray[0], (int) vtxId);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetVelocity(Vec3d v) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_v = new Vec3d(v);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
					},
					() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_v = new Vec3d(v);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
						});
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
					} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) v);
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) v);
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) v);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemMeshNewIf_SetVelocity((IntPtr) _thisArray[0], (IntPtr) v);
		}
	}
	public int GetTetVertexIds(int t) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_GetTetVertexIds((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) t);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_GetTetVertexIds((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) t);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_GetTetVertexIds((IntPtr) _thisArray[0], (int) t);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetFaceVertexIds(int f) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_GetFaceVertexIds((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) f);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_GetFaceVertexIds((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) f);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_GetFaceVertexIds((IntPtr) _thisArray[0], (int) f);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetFaceNormal(int f) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemMeshNewIf_GetFaceNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) f);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemMeshNewIf_GetFaceNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) f);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemMeshNewIf_GetFaceNormal((IntPtr) _thisArray[0], (int) f);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public int GetSurfaceVertex(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_GetSurfaceVertex((IntPtr) _thisArray[0], (int) i);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NSurfaceVertices() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceVertices((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NSurfaceFace() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceFace((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceFace((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_NSurfaceFace((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool CompTetShapeFunctionValue(int tetId, Vec3d posL, Vec4d value, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
Vec4d new_value = new Vec4d(value);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posL = new Vec3d(posL);
// NewArgument equal 8 8
// is_struct
Vec4d new_value = new Vec4d(value);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
						});
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posL, (IntPtr) new_value, (bool) bDeform);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posL, (IntPtr) value, (bool) bDeform);
	    char retBuffer = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) posL, (IntPtr) value, (bool) bDeform);
	    char retGet = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posL, (IntPtr) value, (bool) bDeform);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemMeshNewIf_CompTetShapeFunctionValue((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posL, (IntPtr) value, (bool) bDeform);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public int FindTetFromFace(int faceId) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) faceId);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    int resultBuffer = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) faceId);
					},
					() => {
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) faceId);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) faceId);
						});
	    int resultBuffer = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) faceId);
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) faceId);
	    return resultGet;
					} else {
	    int resultStep = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) faceId);
	    int resultBuffer = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) faceId);
	    int resultGet = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) faceId);
	    return resultGet;
					}
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemMeshNewIf_FindTetFromFace((IntPtr) _thisArray[0], (int) faceId);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHFemBaseIf : SceneObjectIf {
	public PHFemBaseIf() { _thisArray[0] = SprExport.Spr_new_PHFemBaseIf(); _flag = true; }
	public PHFemBaseIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemBaseIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemBaseIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemBaseIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemBaseIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemBaseIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemBaseIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemBaseIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemBaseIf(CsCastObject target) {
		return (target._info.Inherit(PHFemBaseIf.GetIfInfoStatic()) ? new PHFemBaseIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemBaseIf() { if (_flag) { SprExport.Spr_delete_PHFemBaseIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemBaseIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemBaseIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemBaseIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemBaseIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemBaseIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemBaseIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHFemMeshNewIf GetPHFemMesh() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemBaseIf_GetPHFemMesh((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemBaseIf_GetPHFemMesh((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemBaseIf_GetPHFemMesh((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHFemVibrationIf : PHFemBaseIf {
	public PHFemVibrationIf() { _thisArray[0] = SprExport.Spr_new_PHFemVibrationIf(); _flag = true; }
	public PHFemVibrationIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemVibrationIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemVibrationIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemVibrationIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemVibrationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemVibrationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemVibrationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemVibrationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemVibrationIf(CsCastObject target) {
		return (target._info.Inherit(PHFemVibrationIf.GetIfInfoStatic()) ? new PHFemVibrationIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemVibrationIf() { if (_flag) { SprExport.Spr_delete_PHFemVibrationIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemVibrationIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemVibrationIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemVibrationIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemVibrationIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemVibrationIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemVibrationIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public double GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetYoungModulus(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetYoungModulus((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetYoungModulus() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetYoungModulus((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetYoungModulus((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetPoissonsRatio(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetPoissonsRatio((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetPoissonsRatio() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetPoissonsRatio((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetPoissonsRatio((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDensity(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetDensity((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetDensity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetDensity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetDensity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetDensity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetAlpha(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetAlpha((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetAlpha() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetAlpha((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetBeta(double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
						});
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) value);
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) value);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetBeta((IntPtr) _thisArray[0], (double) value);
		}
	}
	public double GetBeta() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemVibrationIf_GetBeta((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemVibrationIf_GetBeta((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemVibrationIf_GetBeta((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetBoundary(int vtxIds) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxIds);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxIds);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxIds);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxIds);
						});
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxIds);
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxIds);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxIds);
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxIds);
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxIds);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetBoundary((IntPtr) _thisArray[0], (int) vtxIds);
		}
	}
	public void ClearBoundary() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_ClearBoundary((IntPtr) _thisArray[0]);
		}
	}
	public vectorwrapper_int GetBoundary() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemVibrationIf_GetBoundary((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new vectorwrapper_int(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemVibrationIf_GetBoundary((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new vectorwrapper_int(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemVibrationIf_GetBoundary((IntPtr) _thisArray[0]);
            return new vectorwrapper_int(ptr);
		}
		throw new InvalidOperationException();
	}
	public void SetAnalysisMode(PHFemVibrationDesc.ANALYSIS_MODE mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetAnalysisMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public void SetIntegrationMode(PHFemVibrationDesc.INTEGRATION_MODE mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetIntegrationMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public bool AddBoundaryCondition(int vtxId, Vec3i dof) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3i new_dof = new Vec3i(dof);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_dof);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_dof);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_dof);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3i new_dof = new Vec3i(dof);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) new_dof);
						});
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) new_dof);
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) new_dof);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vtxId, (IntPtr) dof);
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) vtxId, (IntPtr) dof);
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vtxId, (IntPtr) dof);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_AddBoundaryCondition((IntPtr) _thisArray[0], (int) vtxId, (IntPtr) dof);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void DeleteBoundaryCondition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_DeleteBoundaryCondition((IntPtr) _thisArray[0]);
		}
	}
	public bool FindNeighborTetrahedron(Vec3d posW, int tetId, Vec3d cpW, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
Vec3d new_cpW = new Vec3d(cpW);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
Vec3d new_cpW = new Vec3d(cpW);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
						});
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
	    char retGet = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_posW, (int) tetId, (IntPtr) new_cpW, (bool) bDeform);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) posW, (int) tetId, (IntPtr) cpW, (bool) bDeform);
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) posW, (int) tetId, (IntPtr) cpW, (bool) bDeform);
	    char retGet = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) posW, (int) tetId, (IntPtr) cpW, (bool) bDeform);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_FindNeighborTetrahedron((IntPtr) _thisArray[0], (IntPtr) posW, (int) tetId, (IntPtr) cpW, (bool) bDeform);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool SetDamping(int tetId, Vec3d posW, double damp_ratio) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
						});
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
	    char retGet = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posW, (double) damp_ratio);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posW, (double) damp_ratio);
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) posW, (double) damp_ratio);
	    char retGet = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posW, (double) damp_ratio);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_SetDamping((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posW, (double) damp_ratio);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool AddForce(int tetId, Vec3d posW, Vec3d fW) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
Vec3d new_fW = new Vec3d(fW);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_posW = new Vec3d(posW);
// NewArgument equal 8 8
// is_struct
Vec3d new_fW = new Vec3d(fW);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
						});
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) new_posW, (IntPtr) new_fW);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posW, (IntPtr) fW);
	    char retBuffer = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) tetId, (IntPtr) posW, (IntPtr) fW);
	    char retGet = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posW, (IntPtr) fW);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_AddForce((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posW, (IntPtr) fW);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool GetDisplacement(int tetId, Vec3d posW, Vec3d disp, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHFemVibrationIf_GetDisplacement((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posW, (IntPtr) disp, (bool) bDeform);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHFemVibrationIf_GetDisplacement((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posW, (IntPtr) disp, (bool) bDeform);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_GetDisplacement((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posW, (IntPtr) disp, (bool) bDeform);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool GetVelocity(int tetId, Vec3d posW, Vec3d vel, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHFemVibrationIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posW, (IntPtr) vel, (bool) bDeform);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHFemVibrationIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posW, (IntPtr) vel, (bool) bDeform);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_GetVelocity((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posW, (IntPtr) vel, (bool) bDeform);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool GetPosition(int tetId, Vec3d posW, Vec3d pos, bool bDeform) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHFemVibrationIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) tetId, (IntPtr) posW, (IntPtr) pos, (bool) bDeform);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHFemVibrationIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) tetId, (IntPtr) posW, (IntPtr) pos, (bool) bDeform);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemVibrationIf_GetPosition((IntPtr) _thisArray[0], (int) tetId, (IntPtr) posW, (IntPtr) pos, (bool) bDeform);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetbRecomp() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_SetbRecomp((IntPtr) _thisArray[0]);
		}
	}
	public void Init() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemVibrationIf_Init((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHFemThermoIf : PHFemBaseIf {
	public PHFemThermoIf() { _thisArray[0] = SprExport.Spr_new_PHFemThermoIf(); _flag = true; }
	public PHFemThermoIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemThermoIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemThermoIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemThermoIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemThermoIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemThermoIf(CsCastObject target) {
		return (target._info.Inherit(PHFemThermoIf.GetIfInfoStatic()) ? new PHFemThermoIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemThermoIf() { if (_flag) { SprExport.Spr_delete_PHFemThermoIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemThermoIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemThermoIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int GetSurfaceVertex(int id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemThermoIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemThermoIf_GetSurfaceVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemThermoIf_GetSurfaceVertex((IntPtr) _thisArray[0], (int) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NSurfaceVertices() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemThermoIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemThermoIf_NSurfaceVertices((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemThermoIf_NSurfaceVertices((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexTc(int id, double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc((IntPtr) _thisArray[0], (int) id, (double) temp);
		}
	}
	public void SetVertexTc(int id, double temp, double heatTrans) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) id, (double) temp, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id, (double) temp, (double) heatTrans);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTc_1((IntPtr) _thisArray[0], (int) id, (double) temp, (double) heatTrans);
		}
	}
	public Vec3d GetPose(int id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) id);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) id);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetPose((IntPtr) _thisArray[0], (int) id);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetSufVtxPose(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetSufVtxPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetSufVtxPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetSufVtxPose((IntPtr) _thisArray[0], (uint) id);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public uint GetStepCount() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHFemThermoIf_GetStepCount((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHFemThermoIf_GetStepCount((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHFemThermoIf_GetStepCount((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public uint GetStepCountCyc() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHFemThermoIf_GetStepCountCyc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHFemThermoIf_GetStepCountCyc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHFemThermoIf_GetStepCountCyc((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVertexTemp(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetVertexTemp((IntPtr) _thisArray[0], (uint) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetSufVertexTemp(uint id) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetSufVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetSufVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetSufVertexTemp((IntPtr) _thisArray[0], (uint) id);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexTemp(uint id, double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexTemp((IntPtr) _thisArray[0], (uint) id, (double) temp);
		}
	}
	public void SetVerticesTempAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVerticesTempAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void AddvecFAll(uint id, double dqdt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
						});
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					} else {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_AddvecFAll((IntPtr) _thisArray[0], (uint) id, (double) dqdt);
		}
	}
	public void SetvecFAll(uint id, double dqdt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
						});
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) id, (double) dqdt);
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (double) dqdt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetvecFAll((IntPtr) _thisArray[0], (uint) id, (double) dqdt);
		}
	}
	public void SetRhoSpheat(double rho, double Cp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
						});
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rho, (double) Cp);
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rho, (double) Cp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetRhoSpheat((IntPtr) _thisArray[0], (double) rho, (double) Cp);
		}
	}
	public Vec2d GetIHbandDrawVtx() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec2d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec2d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetIHbandDrawVtx((IntPtr) _thisArray[0]);
            return new Vec2d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void CalcIHdqdt_atleast(double r, double R, double dqdtAll, uint num) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
						});
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
					} else {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) r, (double) R, (double) dqdtAll, (uint) num);
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) r, (double) R, (double) dqdtAll, (uint) num);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_CalcIHdqdt_atleast((IntPtr) _thisArray[0], (double) r, (double) R, (double) dqdtAll, (uint) num);
		}
	}
	public void UpdateIHheatband(double xS, double xE, uint heatingMODE) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) xS, (double) xE, (uint) heatingMODE);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) xS, (double) xE, (uint) heatingMODE);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheatband((IntPtr) _thisArray[0], (double) xS, (double) xE, (uint) heatingMODE);
		}
	}
	public void UpdateIHheat(uint heating) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) heating);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) heating);
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) heating);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateIHheat((IntPtr) _thisArray[0], (uint) heating);
		}
	}
	public void UpdateVecF() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF((IntPtr) _thisArray[0]);
		}
	}
	public void UpdateVecF_frypan() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVecF_frypan((IntPtr) _thisArray[0]);
		}
	}
	public void DecrMoist() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist((IntPtr) _thisArray[0]);
		}
	}
	public void DecrMoist_velo(double vel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
						});
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
					} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vel);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vel);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_velo((IntPtr) _thisArray[0], (double) vel);
		}
	}
	public void DecrMoist_vel(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_DecrMoist_vel((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public void InitAllVertexTemp() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitAllVertexTemp((IntPtr) _thisArray[0]);
		}
	}
	public void SetInitThermoConductionParam(double thConduct, double rho, double specificHeat, double heatTrans) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
						});
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetInitThermoConductionParam((IntPtr) _thisArray[0], (double) thConduct, (double) rho, (double) specificHeat, (double) heatTrans);
		}
	}
	public void SetParamAndReCreateMatrix(double thConduct0, double roh0, double specificHeat0) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
						});
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0, (double) roh0, (double) specificHeat0);
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0, (double) roh0, (double) specificHeat0);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetParamAndReCreateMatrix((IntPtr) _thisArray[0], (double) thConduct0, (double) roh0, (double) specificHeat0);
		}
	}
	public double GetArbitraryPointTemp(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetArbitraryPointTemp((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVtxTempInTets(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetVtxTempInTets((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetVtxTempInTets((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetVtxTempInTets((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void InitVecFAlls() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitVecFAlls((IntPtr) _thisArray[0]);
		}
	}
	public double Get_thConduct() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_Get_thConduct((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_Get_thConduct((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_Get_thConduct((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool SetConcentricHeatMap(vectorwrapper_double r, vectorwrapper_double temp, Vec2d origin) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
vectorwrapper_double new_r = new vectorwrapper_double(r);
// vector or array
vectorwrapper_double new_temp = new vectorwrapper_double(temp);
// vector or array
Vec2d new_origin = new Vec2d(origin);
// NewArgument equal 8 8
// is_struct
	    char retStep = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
					},
					() => {
	    char retGet = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
vectorwrapper_double new_r = new vectorwrapper_double(r);
// vector or array
vectorwrapper_double new_temp = new vectorwrapper_double(temp);
// vector or array
Vec2d new_origin = new Vec2d(origin);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
						});
	    char retBuffer = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
	    char retGet = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) new_origin);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    char retBuffer = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    char retGet = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemThermoIf_SetConcentricHeatMap((IntPtr) _thisArray[0], (IntPtr) r, (IntPtr) temp, (IntPtr) origin);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetThermalEmissivityToVerticesAll(double thermalEmissivity, double thermalEmissivity_const) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
						});
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thermalEmissivity, (double) thermalEmissivity_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thermalEmissivity, (double) thermalEmissivity_const);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetThermalEmissivityToVerticesAll((IntPtr) _thisArray[0], (double) thermalEmissivity, (double) thermalEmissivity_const);
		}
	}
	public void SetOuterTemp(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetOuterTemp((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void SetThermalRadiation(double ems, double ems_const) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
						});
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ems, (double) ems_const);
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ems, (double) ems_const);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetThermalRadiation((IntPtr) _thisArray[0], (double) ems, (double) ems_const);
		}
	}
	public void SetGaussCalcParam(uint cyc, double epsilon) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
						});
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) cyc, (double) epsilon);
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) cyc, (double) epsilon);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetGaussCalcParam((IntPtr) _thisArray[0], (uint) cyc, (double) epsilon);
		}
	}
	public void InitTcAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitTcAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void InitToutAll(double temp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
						});
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) temp);
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) temp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitToutAll((IntPtr) _thisArray[0], (double) temp);
		}
	}
	public void SetWeekPow(double weekPow_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
						});
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetWeekPow((IntPtr) _thisArray[0], (double) weekPow_);
		}
	}
	public void SetIHParamWEEK(double inr_, double outR_, double weekPow_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
						});
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) inr_, (double) outR_, (double) weekPow_);
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) inr_, (double) outR_, (double) weekPow_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetIHParamWEEK((IntPtr) _thisArray[0], (double) inr_, (double) outR_, (double) weekPow_);
		}
	}
	public void SetHeatTransRatioToAllVertex(double heatTransR_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
						});
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) heatTransR_);
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) heatTransR_);
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) heatTransR_);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetHeatTransRatioToAllVertex((IntPtr) _thisArray[0], (double) heatTransR_);
		}
	}
	public void AfterSetDesc() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_AfterSetDesc((IntPtr) _thisArray[0]);
		}
	}
	public void SetStopTimespan(double timespan) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
						});
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) timespan);
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) timespan);
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) timespan);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetStopTimespan((IntPtr) _thisArray[0], (double) timespan);
		}
	}
	public void UpdateMatk_RadiantHeatToAir() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateMatk_RadiantHeatToAir((IntPtr) _thisArray[0]);
		}
	}
	public void ReCreateMatrix(double thConduct0) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0);
						});
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0);
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0);
					} else {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct0);
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct0);
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct0);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_ReCreateMatrix((IntPtr) _thisArray[0], (double) thConduct0);
		}
	}
	public void ActivateVtxbeRadiantHeat() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_ActivateVtxbeRadiantHeat((IntPtr) _thisArray[0]);
		}
	}
	public void OutputMatKall() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_OutputMatKall((IntPtr) _thisArray[0]);
		}
	}
	public void IfRadiantHeatTrans() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTrans((IntPtr) _thisArray[0]);
		}
	}
	public void IfRadiantHeatTransSteak() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_IfRadiantHeatTransSteak((IntPtr) _thisArray[0]);
		}
	}
	public float calcGvtx(string fwfood, int pv, uint texture_mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
string new_fwfood = string.Copy(fwfood);
// intrinsic
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
				phSceneIf.AddCallbackForStepThread(
					() => {
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
					},
					() => {
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
string new_fwfood = string.Copy(fwfood);
// intrinsic
						phSceneIf.AddCallbackForSubThread(() => {
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
						});
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
	    return resultGet;
					} else {
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
	    return resultGet;
					}
				}
			}
		} else {
            IntPtr remote1 = Marshal.StringToBSTR(fwfood);
	    float result = (float) SprExport.Spr_PHFemThermoIf_calcGvtx((IntPtr) _thisArray[0], (IntPtr) remote1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remote1);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public Vec3d GetVertexNormal(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetVertexNormal((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetVertexNormal((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetVertexNormal((IntPtr) _thisArray[0], (uint) vtxid);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetVertexHeatTransRatio(uint vtxid, double heattransRatio) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) heattransRatio);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) heattransRatio);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) heattransRatio);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) heattransRatio);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) heattransRatio);
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) heattransRatio);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) heattransRatio);
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) heattransRatio);
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) heattransRatio);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexHeatTransRatio((IntPtr) _thisArray[0], (uint) vtxid, (double) heattransRatio);
		}
	}
	public void SetVertexBeRadiantHeat(uint vtxid, bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) flag);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) flag);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) flag);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) flag);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) flag);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) flag);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeRadiantHeat((IntPtr) _thisArray[0], (uint) vtxid, (bool) flag);
		}
	}
	public double GetVertexArea(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetVertexArea((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetVertexArea((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetVertexArea((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexToofar(uint vtxid, bool tooFar) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) tooFar);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) tooFar);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) tooFar);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) tooFar);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) tooFar);
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) tooFar);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) tooFar);
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) tooFar);
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) tooFar);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexToofar((IntPtr) _thisArray[0], (uint) vtxid, (bool) tooFar);
		}
	}
	public bool GetVertexToofar(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHFemThermoIf_GetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHFemThermoIf_GetVertexToofar((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHFemThermoIf_GetVertexToofar((IntPtr) _thisArray[0], (uint) vtxid);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetVertexBeCondVtxs(uint vtxid, bool becondVtxs) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) becondVtxs);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) becondVtxs);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) becondVtxs);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) becondVtxs);
						});
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) becondVtxs);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) becondVtxs);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (bool) becondVtxs);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (bool) becondVtxs);
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (bool) becondVtxs);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetVertexBeCondVtxs((IntPtr) _thisArray[0], (uint) vtxid, (bool) becondVtxs);
		}
	}
	public void CreateVecFAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_CreateVecFAll((IntPtr) _thisArray[0]);
		}
	}
	public void CalcFaceNormalAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_CalcFaceNormalAll((IntPtr) _thisArray[0]);
		}
	}
	public void CalcVertexNormalAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_CalcVertexNormalAll((IntPtr) _thisArray[0]);
		}
	}
	public void InitFaceNormalAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitFaceNormalAll((IntPtr) _thisArray[0]);
		}
	}
	public void InitVertexNormalAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_InitVertexNormalAll((IntPtr) _thisArray[0]);
		}
	}
	public void RevVertexNormalAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_RevVertexNormalAll((IntPtr) _thisArray[0]);
		}
	}
	public void SetWeekPowFULL(double weekPow_full) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_full);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_full);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_full);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_full);
						});
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_full);
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_full);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) weekPow_full);
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) weekPow_full);
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) weekPow_full);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetWeekPowFULL((IntPtr) _thisArray[0], (double) weekPow_full);
		}
	}
	public void SetweekPow_FULL(double setweekPow_FULL) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setweekPow_FULL);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setweekPow_FULL);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setweekPow_FULL);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setweekPow_FULL);
						});
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setweekPow_FULL);
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setweekPow_FULL);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setweekPow_FULL);
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setweekPow_FULL);
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setweekPow_FULL);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetweekPow_FULL((IntPtr) _thisArray[0], (double) setweekPow_FULL);
		}
	}
	public void setIhRatio(double a) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) a);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) a);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) a);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) a);
						});
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) a);
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) a);
					} else {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) a);
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) a);
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) a);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_setIhRatio((IntPtr) _thisArray[0], (double) a);
		}
	}
	public void Setems(double setems) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems);
						});
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems);
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems);
					} else {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems);
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems);
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_Setems((IntPtr) _thisArray[0], (double) setems);
		}
	}
	public void Setems_steak(double setems_steak) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems_steak);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems_steak);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems_steak);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems_steak);
						});
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems_steak);
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems_steak);
					} else {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) setems_steak);
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) setems_steak);
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) setems_steak);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_Setems_steak((IntPtr) _thisArray[0], (double) setems_steak);
		}
	}
	public void SetthConduct(double thConduct) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct);
						});
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct);
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) thConduct);
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) thConduct);
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) thConduct);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetthConduct((IntPtr) _thisArray[0], (double) thConduct);
		}
	}
	public double GetWeekPowFULL() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetWeekPowFULL((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetWeekPowFULL((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVertexPose(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemThermoIf_GetVertexPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemThermoIf_GetVertexPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemThermoIf_GetVertexPose((IntPtr) _thisArray[0], (uint) vtxid);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void OutTetVolumeAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_OutTetVolumeAll((IntPtr) _thisArray[0]);
		}
	}
	public int GetTetsV(uint tetid, uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemThermoIf_GetTetsV((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) tetid, (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemThermoIf_GetTetsV((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) tetid, (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemThermoIf_GetTetsV((IntPtr) _thisArray[0], (uint) tetid, (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void VecFNegativeCheck() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_VecFNegativeCheck((IntPtr) _thisArray[0]);
		}
	}
	public double GetVecFElem(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetVecFElem((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetVecFElem((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetVecFElem((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetTetVNums(uint id, uint num) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHFemThermoIf_GetTetVNums((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) id, (uint) num);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHFemThermoIf_GetTetVNums((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) id, (uint) num);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHFemThermoIf_GetTetVNums((IntPtr) _thisArray[0], (uint) id, (uint) num);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetInitialTemp() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemThermoIf_GetInitialTemp((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemThermoIf_GetInitialTemp((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemThermoIf_GetInitialTemp((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void UpdateVertexTempAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_UpdateVertexTempAll((IntPtr) _thisArray[0]);
		}
	}
	public void SetThermoCameraScale(double minTemp, double maxTemp) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) minTemp, (double) maxTemp);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) minTemp, (double) maxTemp);
					},
					() => {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) minTemp, (double) maxTemp);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) minTemp, (double) maxTemp);
						});
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) minTemp, (double) maxTemp);
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) minTemp, (double) maxTemp);
					} else {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) minTemp, (double) maxTemp);
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) minTemp, (double) maxTemp);
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) minTemp, (double) maxTemp);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemThermoIf_SetThermoCameraScale((IntPtr) _thisArray[0], (double) minTemp, (double) maxTemp);
		}
	}
    }
    public partial class PHFemPorousWOMoveIf : PHFemBaseIf {
	public PHFemPorousWOMoveIf() { _thisArray[0] = SprExport.Spr_new_PHFemPorousWOMoveIf(); _flag = true; }
	public PHFemPorousWOMoveIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFemPorousWOMoveIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFemPorousWOMoveIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFemPorousWOMoveIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFemPorousWOMoveIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFemPorousWOMoveIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFemPorousWOMoveIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFemPorousWOMoveIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFemPorousWOMoveIf(CsCastObject target) {
		return (target._info.Inherit(PHFemPorousWOMoveIf.GetIfInfoStatic()) ? new PHFemPorousWOMoveIf(target._thisArray[0], target._flag) : null);
	}
	~PHFemPorousWOMoveIf() { if (_flag) { SprExport.Spr_delete_PHFemPorousWOMoveIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFemPorousWOMoveIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFemPorousWOMoveIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFemPorousWOMoveIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFemPorousWOMoveIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFemPorousWOMoveIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFemPorousWOMoveIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public double GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void UpdateVertexRhoWAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoWAll((IntPtr) _thisArray[0]);
		}
	}
	public void UpdateVertexRhoOAll() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_UpdateVertexRhoOAll((IntPtr) _thisArray[0]);
		}
	}
	public void SetVertexMw(uint vtxid, double mw) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mw);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mw);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mw);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mw);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mw);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mw);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mw);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mw);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mw);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMw((IntPtr) _thisArray[0], (uint) vtxid, (double) mw);
		}
	}
	public void SetVertexMo(uint vtxid, double mo) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mo);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mo);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mo);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mo);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mo);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mo);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid, (double) mo);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) vtxid, (double) mo);
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid, (double) mo);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_SetVertexMo((IntPtr) _thisArray[0], (uint) vtxid, (double) mo);
		}
	}
	public double GetVertexMw(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMw((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMw((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVertexMo(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMo((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexMo((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVtxWaterInTets(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxWaterInTets((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxWaterInTets((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxWaterInTets((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVtxOilInTets(Vec3d temppos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxOilInTets((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) temppos);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxOilInTets((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) temppos);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxOilInTets((IntPtr) _thisArray[0], (IntPtr) temppos);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVertexRhoW(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoW((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoW((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoW((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVertexRhoO(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoO((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoO((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVertexRhoO((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public float calcGvtx(string fwfood, int pv, uint texture_mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
string new_fwfood = string.Copy(fwfood);
// intrinsic
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
				phSceneIf.AddCallbackForStepThread(
					() => {
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
					},
					() => {
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
string new_fwfood = string.Copy(fwfood);
// intrinsic
						phSceneIf.AddCallbackForSubThread(() => {
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
						});
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
	    return resultGet;
					} else {
            IntPtr remoteStep1 = Marshal.StringToBSTR(fwfood);
	    float resultStep = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteStep1);
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(fwfood);
	    float resultBuffer = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(fwfood);
	    float resultGet = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remoteGet1);
	    return resultGet;
					}
				}
			}
		} else {
            IntPtr remote1 = Marshal.StringToBSTR(fwfood);
	    float result = (float) SprExport.Spr_PHFemPorousWOMoveIf_calcGvtx((IntPtr) _thisArray[0], (IntPtr) remote1, (int) pv, (uint) texture_mode);
            Marshal.FreeBSTR(remote1);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void setGravity(Vec3d g) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_g = new Vec3d(g);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_g);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_g);
					},
					() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_g);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_g = new Vec3d(g);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_g);
						});
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_g);
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_g);
					} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) g);
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) g);
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) g);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFemPorousWOMoveIf_setGravity((IntPtr) _thisArray[0], (IntPtr) g);
		}
	}
	public double decideWetValue(uint faceid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) faceid);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    double resultBuffer = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) faceid);
					},
					() => {
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) faceid);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) faceid);
						});
	    double resultBuffer = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) faceid);
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) faceid);
	    return resultGet;
					} else {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) faceid);
	    double resultBuffer = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) faceid);
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) faceid);
	    return resultGet;
					}
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_decideWetValue((IntPtr) _thisArray[0], (uint) faceid);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVtxSaturation(uint vtxid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxSaturation((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) vtxid);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxSaturation((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) vtxid);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHFemPorousWOMoveIf_GetVtxSaturation((IntPtr) _thisArray[0], (uint) vtxid);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHFrameIf : SceneObjectIf {
	public PHFrameIf() { _thisArray[0] = SprExport.Spr_new_PHFrameIf(); _flag = true; }
	public PHFrameIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFrameIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFrameIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFrameIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFrameIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFrameIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFrameIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFrameIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFrameIf(CsCastObject target) {
		return (target._info.Inherit(PHFrameIf.GetIfInfoStatic()) ? new PHFrameIf(target._thisArray[0], target._flag) : null);
	}
	~PHFrameIf() { if (_flag) { SprExport.Spr_delete_PHFrameIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFrameIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFrameIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFrameIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFrameIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFrameIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFrameIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public Posed GetPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFrameIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFrameIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFrameIf_GetPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetPose(Posed p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHFrameIf_SetPose((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public CDShapeIf GetShape() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFrameIf_GetShape((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFrameIf_GetShape((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFrameIf_GetShape((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBodyIf : SceneObjectIf {
	public PHBodyIf() { _thisArray[0] = SprExport.Spr_new_PHBodyIf(); _flag = true; }
	public PHBodyIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBodyIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBodyIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBodyIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBodyIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBodyIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBodyIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBodyIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBodyIf(CsCastObject target) {
		return (target._info.Inherit(PHBodyIf.GetIfInfoStatic()) ? new PHBodyIf(target._thisArray[0], target._flag) : null);
	}
	~PHBodyIf() { if (_flag) { SprExport.Spr_delete_PHBodyIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBodyIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBodyIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public Posed GetPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetAngularVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetAngularVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetCenterOfMass() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetCenterOfMass((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetFramePosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetFramePosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetCenterPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetCenterPosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public bool IsDynamical() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBodyIf_IsDynamical((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHBodyIf_IsDynamical((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBodyIf_IsDynamical((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool IsFrozen() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBodyIf_IsFrozen((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHBodyIf_IsFrozen((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBodyIf_IsFrozen((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void AddShape(CDShapeIf shape) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
					},
					() => {
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
						});
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
					} else {
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_AddShape((IntPtr) _thisArray[0], (IntPtr) shape);
		}
	}
	public void AddShapes(CDShapeIf shBegin, CDShapeIf shEnd) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shBegin, (IntPtr) shEnd);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shBegin, (IntPtr) shEnd);
					},
					() => {
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shBegin, (IntPtr) shEnd);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shBegin, (IntPtr) shEnd);
						});
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shBegin, (IntPtr) shEnd);
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shBegin, (IntPtr) shEnd);
					} else {
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shBegin, (IntPtr) shEnd);
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shBegin, (IntPtr) shEnd);
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shBegin, (IntPtr) shEnd);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_AddShapes((IntPtr) _thisArray[0], (IntPtr) shBegin, (IntPtr) shEnd);
		}
	}
	public void RemoveShape(int index) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index);
					},
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index);
						});
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index);
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index);
					} else {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index);
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index);
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_RemoveShape((IntPtr) _thisArray[0], (int) index);
		}
	}
	public void RemoveShapes(int idxBegin, int idxEnd) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) idxBegin, (int) idxEnd);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) idxBegin, (int) idxEnd);
					},
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) idxBegin, (int) idxEnd);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) idxBegin, (int) idxEnd);
						});
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) idxBegin, (int) idxEnd);
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) idxBegin, (int) idxEnd);
					} else {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) idxBegin, (int) idxEnd);
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) idxBegin, (int) idxEnd);
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) idxBegin, (int) idxEnd);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_RemoveShapes((IntPtr) _thisArray[0], (int) idxBegin, (int) idxEnd);
		}
	}
	public void RemoveShape(CDShapeIf shape) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
					},
					() => {
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
						});
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
					} else {
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) shape);
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) shape);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_RemoveShape_1((IntPtr) _thisArray[0], (IntPtr) shape);
		}
	}
	public int NShape() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHBodyIf_NShape((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHBodyIf_NShape((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHBodyIf_NShape((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public CDShapeIf GetShape(int index) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetShape((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index);
            if (ptrStep == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetShape((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index);
            if (ptrGet == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetShape((IntPtr) _thisArray[0], (int) index);
            if (ptr == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public Posed GetShapePose(int index) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBodyIf_GetShapePose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBodyIf_GetShapePose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBodyIf_GetShapePose((IntPtr) _thisArray[0], (int) index);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetShapePose(int index, Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index, (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index, (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index, (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index, (IntPtr) new_pose);
						});
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index, (IntPtr) new_pose);
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index, (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) index, (IntPtr) pose);
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) index, (IntPtr) pose);
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) index, (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_SetShapePose((IntPtr) _thisArray[0], (int) index, (IntPtr) pose);
		}
	}
	public void ClearShape() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_ClearShape((IntPtr) _thisArray[0]);
		}
	}
	public void GetBBox(Vec3d bbmin, Vec3d bbmax, bool world) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBodyIf_GetBBox((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) bbmin, (IntPtr) bbmax, (bool) world);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBodyIf_GetBBox((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) bbmin, (IntPtr) bbmax, (bool) world);
				}
			}
		} else {
	    SprExport.Spr_PHBodyIf_GetBBox((IntPtr) _thisArray[0], (IntPtr) bbmin, (IntPtr) bbmax, (bool) world);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHSolidIf : PHBodyIf {
	public PHSolidIf() { _thisArray[0] = SprExport.Spr_new_PHSolidIf(); _flag = true; }
	public PHSolidIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSolidIf(CsCastObject target) {
		return (target._info.Inherit(PHSolidIf.GetIfInfoStatic()) ? new PHSolidIf(target._thisArray[0], target._flag) : null);
	}
	~PHSolidIf() { if (_flag) { SprExport.Spr_delete_PHSolidIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSolidIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSolidIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void AddForce(Vec3d f) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_f = new Vec3d(f);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f);
					},
					() => {
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_f = new Vec3d(f);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f);
						});
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f);
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f);
					} else {
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) f);
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) f);
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) f);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_AddForce((IntPtr) _thisArray[0], (IntPtr) f);
		}
	}
	public void AddTorque(Vec3d t) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_t = new Vec3d(t);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_t);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_t);
					},
					() => {
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_t);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_t = new Vec3d(t);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_t);
						});
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_t);
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_t);
					} else {
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) t);
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) t);
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) t);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_AddTorque((IntPtr) _thisArray[0], (IntPtr) t);
		}
	}
	public void AddForce(Vec3d f, Vec3d r) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_f = new Vec3d(f);
// NewArgument equal 8 8
// is_struct
Vec3d new_r = new Vec3d(r);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f, (IntPtr) new_r);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f, (IntPtr) new_r);
					},
					() => {
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f, (IntPtr) new_r);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_f = new Vec3d(f);
// NewArgument equal 8 8
// is_struct
Vec3d new_r = new Vec3d(r);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f, (IntPtr) new_r);
						});
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f, (IntPtr) new_r);
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f, (IntPtr) new_r);
					} else {
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) f, (IntPtr) r);
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) f, (IntPtr) r);
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) f, (IntPtr) r);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_AddForce_1((IntPtr) _thisArray[0], (IntPtr) f, (IntPtr) r);
		}
	}
	public double GetMass() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSolidIf_GetMass((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSolidIf_GetMass((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSolidIf_GetMass((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetMassInv() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSolidIf_GetMassInv((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSolidIf_GetMassInv((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSolidIf_GetMassInv((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMass(double m) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) m);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) m);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) m);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) m);
						});
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) m);
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) m);
					} else {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) m);
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) m);
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) m);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetMass((IntPtr) _thisArray[0], (double) m);
		}
	}
	public void SetCenterOfMass(Vec3d center) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_center = new Vec3d(center);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_center);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_center);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_center);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_center = new Vec3d(center);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_center);
						});
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_center);
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_center);
					} else {
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) center);
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) center);
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) center);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetCenterOfMass((IntPtr) _thisArray[0], (IntPtr) center);
		}
	}
	public Matrix3d GetInertia() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetInertia((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Matrix3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetInertia((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Matrix3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetInertia((IntPtr) _thisArray[0]);
            return new Matrix3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Matrix3d GetInertiaInv() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetInertiaInv((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Matrix3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetInertiaInv((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Matrix3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetInertiaInv((IntPtr) _thisArray[0]);
            return new Matrix3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetInertia(Matrix3d I) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Matrix3d new_I = new Matrix3d(I);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_I);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_I);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_I);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Matrix3d new_I = new Matrix3d(I);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_I);
						});
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_I);
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_I);
					} else {
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) I);
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) I);
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) I);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetInertia((IntPtr) _thisArray[0], (IntPtr) I);
		}
	}
	public void CompInertia() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_CompInertia((IntPtr) _thisArray[0]);
		}
	}
	public void SetFramePosition(Vec3d p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_p = new Vec3d(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_p = new Vec3d(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetFramePosition((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public void SetCenterPosition(Vec3d p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_p = new Vec3d(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_p = new Vec3d(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetCenterPosition((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public Vec3d GetDeltaPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetDeltaPosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetDeltaPosition(Vec3d p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetDeltaPosition_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetDeltaPosition_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetDeltaPosition_1((IntPtr) _thisArray[0], (IntPtr) p);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Quaterniond GetOrientation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetOrientation((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetOrientation(Quaterniond q) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_q = new Quaterniond(q);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_q);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_q);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_q);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_q = new Quaterniond(q);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_q);
						});
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_q);
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_q);
					} else {
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) q);
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) q);
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) q);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetOrientation((IntPtr) _thisArray[0], (IntPtr) q);
		}
	}
	public void SetPose(Posed p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetPose((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public void SetVelocity(Vec3d v) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_v = new Vec3d(v);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_v = new Vec3d(v);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
						});
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
					} else {
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) v);
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) v);
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) v);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetVelocity((IntPtr) _thisArray[0], (IntPtr) v);
		}
	}
	public void SetAngularVelocity(Vec3d av) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_av = new Vec3d(av);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_av);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_av);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_av);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_av = new Vec3d(av);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_av);
						});
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_av);
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_av);
					} else {
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) av);
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) av);
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) av);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetAngularVelocity((IntPtr) _thisArray[0], (IntPtr) av);
		}
	}
	public Vec3d GetForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetTorque() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetTorque((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetTorque((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetTorque((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetGravity(bool bOn) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
						});
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					} else {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetGravity((IntPtr) _thisArray[0], (bool) bOn);
		}
	}
	public void SetDynamical(bool bOn) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
						});
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					} else {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetDynamical((IntPtr) _thisArray[0], (bool) bOn);
		}
	}
	public bool IsDynamical() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHSolidIf_IsDynamical((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHSolidIf_IsDynamical((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHSolidIf_IsDynamical((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetStationary(bool bOn) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
					},
					() => {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
						});
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					} else {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSolidIf_SetStationary((IntPtr) _thisArray[0], (bool) bOn);
		}
	}
	public bool IsStationary() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHSolidIf_IsStationary((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHSolidIf_IsStationary((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHSolidIf_IsStationary((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PHTreeNodeIf GetTreeNode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSolidIf_GetTreeNode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSolidIf_GetTreeNode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSolidIf_GetTreeNode((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptr, 0);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHShapePairForLCPIf : CDShapePairIf {
	public PHShapePairForLCPIf() { _thisArray[0] = SprExport.Spr_new_PHShapePairForLCPIf(); _flag = true; }
	public PHShapePairForLCPIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHShapePairForLCPIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHShapePairForLCPIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHShapePairForLCPIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHShapePairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHShapePairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHShapePairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHShapePairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHShapePairForLCPIf(CsCastObject target) {
		return (target._info.Inherit(PHShapePairForLCPIf.GetIfInfoStatic()) ? new PHShapePairForLCPIf(target._thisArray[0], target._flag) : null);
	}
	~PHShapePairForLCPIf() { if (_flag) { SprExport.Spr_delete_PHShapePairForLCPIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHShapePairForLCPIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int NSectionVertexes() {
	    int result = (int) SprExport.Spr_PHShapePairForLCPIf_NSectionVertexes((IntPtr) _thisArray[0]);
	    return result;
	}
	public Vec3d GetSectionVertex(int i) {
	    IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_GetSectionVertex((IntPtr) _thisArray[0], (int) i);
            return new Vec3d(ptr, true);
	}
	public double GetContactDimension() {
	    double result = (double) SprExport.Spr_PHShapePairForLCPIf_GetContactDimension((IntPtr) _thisArray[0]);
	    return result;
	}
	public Vec3d GetNormalVector() {
	    IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_GetNormalVector((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
	}
	public void GetClosestPoints(Vec3d pa, Vec3d pb) {
	    SprExport.Spr_PHShapePairForLCPIf_GetClosestPoints((IntPtr) _thisArray[0], (IntPtr) pa, (IntPtr) pb);
	}
	public CDShapeIf GetShape(int i) {
	    IntPtr ptr = SprExport.Spr_PHShapePairForLCPIf_GetShape((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptr, 0);
            return obj;
	}
    }
    public partial class PHSolidPairIf : ObjectIf {
	public PHSolidPairIf() { _thisArray[0] = SprExport.Spr_new_PHSolidPairIf(); _flag = true; }
	public PHSolidPairIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidPairIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidPairIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidPairIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidPairIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidPairIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidPairIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidPairIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSolidPairIf(CsCastObject target) {
		return (target._info.Inherit(PHSolidPairIf.GetIfInfoStatic()) ? new PHSolidPairIf(target._thisArray[0], target._flag) : null);
	}
	~PHSolidPairIf() { if (_flag) { SprExport.Spr_delete_PHSolidPairIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSolidPairIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSolidPairIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHSolidIf GetSolid(int i) {
	    IntPtr ptr = SprExport.Spr_PHSolidPairIf_GetSolid((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
	}
	public int NListener() {
	    int result = (int) SprExport.Spr_PHSolidPairIf_NListener((IntPtr) _thisArray[0]);
	    return result;
	}
	public PHCollisionListener GetListener(int i) {
	    IntPtr ptr = SprExport.Spr_PHSolidPairIf_GetListener((IntPtr) _thisArray[0], (int) i);
            return new PHCollisionListener(ptr);
	}
	public void RemoveListener(int i) {
	    SprExport.Spr_PHSolidPairIf_RemoveListener((IntPtr) _thisArray[0], (int) i);
	}
	public void AddListener(PHCollisionListener l, int pos) {
	    SprExport.Spr_PHSolidPairIf_AddListener((IntPtr) _thisArray[0], (IntPtr) l, (int) pos);
	}
	public void AddListener(PHCollisionListener l) {
	    SprExport.Spr_PHSolidPairIf_AddListener_1((IntPtr) _thisArray[0], (IntPtr) l);
	}
    }
    public partial class PHSolidPairForLCPIf : PHSolidPairIf {
	public PHSolidPairForLCPIf() { _thisArray[0] = SprExport.Spr_new_PHSolidPairForLCPIf(); _flag = true; }
	public PHSolidPairForLCPIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidPairForLCPIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidPairForLCPIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidPairForLCPIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidPairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidPairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidPairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidPairForLCPIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSolidPairForLCPIf(CsCastObject target) {
		return (target._info.Inherit(PHSolidPairForLCPIf.GetIfInfoStatic()) ? new PHSolidPairForLCPIf(target._thisArray[0], target._flag) : null);
	}
	~PHSolidPairForLCPIf() { if (_flag) { SprExport.Spr_delete_PHSolidPairForLCPIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSolidPairForLCPIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSolidPairForLCPIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForLCPIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForLCPIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public bool IsContactEnabled() {
	    char ret = SprExport.Spr_PHSolidPairForLCPIf_IsContactEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
	}
	public void EnableContact(bool enable) {
	    SprExport.Spr_PHSolidPairForLCPIf_EnableContact((IntPtr) _thisArray[0], (bool) enable);
	}
	public int GetContactState(int i, int j) {
	    int result = (int) SprExport.Spr_PHSolidPairForLCPIf_GetContactState((IntPtr) _thisArray[0], (int) i, (int) j);
	    return result;
	}
	public Vec3d GetCommonPoint(int i, int j) {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForLCPIf_GetCommonPoint((IntPtr) _thisArray[0], (int) i, (int) j);
            return new Vec3d(ptr, true);
	}
	public uint GetLastContactCount(int i, int j) {
	    uint result = (uint) SprExport.Spr_PHSolidPairForLCPIf_GetLastContactCount((IntPtr) _thisArray[0], (int) i, (int) j);
	    return result;
	}
	public double GetContactDepth(int i, int j) {
	    double result = (double) SprExport.Spr_PHSolidPairForLCPIf_GetContactDepth((IntPtr) _thisArray[0], (int) i, (int) j);
	    return result;
	}
	public PHShapePairForLCPIf GetShapePair(int i, int j) {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForLCPIf_GetShapePair((IntPtr) _thisArray[0], (int) i, (int) j);
            if (ptr == IntPtr.Zero) { return null; } 
            PHShapePairForLCPIf obj = new PHShapePairForLCPIf(ptr, 0);
            return obj;
	}
    }
    public partial class PHHapticPointerIf : PHSolidIf {
	public PHHapticPointerIf() { _thisArray[0] = SprExport.Spr_new_PHHapticPointerIf(); _flag = true; }
	public PHHapticPointerIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHapticPointerIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHapticPointerIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHapticPointerIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHapticPointerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHapticPointerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHapticPointerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHapticPointerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHapticPointerIf(CsCastObject target) {
		return (target._info.Inherit(PHHapticPointerIf.GetIfInfoStatic()) ? new PHHapticPointerIf(target._thisArray[0], target._flag) : null);
	}
	~PHHapticPointerIf() { if (_flag) { SprExport.Spr_delete_PHHapticPointerIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHapticPointerIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHapticPointerIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticPointerIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticPointerIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetHapticRenderMode(PHHapticPointerDesc.HapticRenderMode m) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m);
						});
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m);
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m);
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m);
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetHapticRenderMode((IntPtr) _thisArray[0], (int) m);
		}
	}
	public PHHapticPointerDesc.HapticRenderMode GetHapticRenderMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = SprExport.Spr_PHHapticPointerIf_GetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return (PHHapticPointerDesc.HapticRenderMode) resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = SprExport.Spr_PHHapticPointerIf_GetHapticRenderMode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return (PHHapticPointerDesc.HapticRenderMode) resultGet;
				}
			}
		} else {
	    int result = SprExport.Spr_PHHapticPointerIf_GetHapticRenderMode((IntPtr) _thisArray[0]);
            return (PHHapticPointerDesc.HapticRenderMode) result;
		}
		throw new InvalidOperationException();
	}
	public void EnableRotation(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableRotation((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsRotation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsRotation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsRotation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsRotation((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableForce(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableForce((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsForce((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableFriction(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableFriction((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsFriction() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsFriction((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsFriction((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsFriction((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableTimeVaryFriction(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableTimeVaryFriction((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsTimeVaryFriction() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsTimeVaryFriction((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsTimeVaryFriction((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableVibration(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableVibration((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsVibration() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsVibration((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsVibration((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsVibration((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableMultiPoints(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiPoints((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsMultiPoints() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsMultiPoints((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsMultiPoints((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableMultiProxy(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableMultiProxy((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsMultiProxy() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsMultiProxy((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsMultiProxy((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableSimulation(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_EnableSimulation((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsSimulation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHHapticPointerIf_IsSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHHapticPointerIf_IsSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHHapticPointerIf_IsSimulation((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetFrictionSpring(float s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
						});
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionSpring((IntPtr) _thisArray[0], (float) s);
		}
	}
	public float GetFrictionSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetFrictionDamper(float s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
						});
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetFrictionDamper((IntPtr) _thisArray[0], (float) s);
		}
	}
	public float GetFrictionDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetFrictionDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetReflexSpring(float s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
						});
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetReflexSpring((IntPtr) _thisArray[0], (float) s);
		}
	}
	public float GetReflexSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetReflexSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetReflexDamper(float d) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
						});
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetReflexDamper((IntPtr) _thisArray[0], (float) d);
		}
	}
	public float GetReflexDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetReflexDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetRotationReflexSpring(float s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
						});
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) s);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) s);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexSpring((IntPtr) _thisArray[0], (float) s);
		}
	}
	public float GetRotationReflexSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetRotationReflexDamper(float d) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
						});
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) d);
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) d);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationReflexDamper((IntPtr) _thisArray[0], (float) d);
		}
	}
	public float GetRotationReflexDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetRotationReflexDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetLocalRange(float r) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
						});
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetLocalRange((IntPtr) _thisArray[0], (float) r);
		}
	}
	public float GetLocalRange() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetLocalRange((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetLocalRange((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetPosScale(double scale) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) scale);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) scale);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) scale);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) scale);
						});
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) scale);
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) scale);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) scale);
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) scale);
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) scale);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetPosScale((IntPtr) _thisArray[0], (double) scale);
		}
	}
	public double GetPosScale() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHHapticPointerIf_GetPosScale((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHHapticPointerIf_GetPosScale((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHHapticPointerIf_GetPosScale((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetRotationalWeight(double w) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) w);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) w);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) w);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) w);
						});
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) w);
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) w);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) w);
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) w);
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) w);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetRotationalWeight((IntPtr) _thisArray[0], (double) w);
		}
	}
	public double GetRotationalWeight() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHHapticPointerIf_GetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHHapticPointerIf_GetRotationalWeight((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHHapticPointerIf_GetRotationalWeight((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDefaultPose(Posed p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_p = new Posed(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetDefaultPose((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public Posed GetDefaultPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticPointerIf_GetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticPointerIf_GetDefaultPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetDefaultPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public int NNeighborSolids() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticPointerIf_NNeighborSolids((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticPointerIf_NNeighborSolids((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticPointerIf_NNeighborSolids((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetNeighborSolidId(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticPointerIf_GetNeighborSolidId((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticPointerIf_GetNeighborSolidId((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticPointerIf_GetNeighborSolidId((IntPtr) _thisArray[0], (int) i);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHSolidIf GetNeighborSolid(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticPointerIf_GetNeighborSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticPointerIf_GetNeighborSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetNeighborSolid((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public float GetContactForce(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHHapticPointerIf_GetContactForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHHapticPointerIf_GetContactForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHHapticPointerIf_GetContactForce((IntPtr) _thisArray[0], (int) i);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public SpatialVector GetHapticForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticPointerIf_GetHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new SpatialVector(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticPointerIf_GetHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new SpatialVector(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetHapticForce((IntPtr) _thisArray[0]);
            return new SpatialVector(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public SpatialVector GetProxyVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticPointerIf_GetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new SpatialVector(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticPointerIf_GetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new SpatialVector(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticPointerIf_GetProxyVelocity((IntPtr) _thisArray[0]);
            return new SpatialVector(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetProxyN(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
						});
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetProxyN((IntPtr) _thisArray[0], (int) n);
		}
	}
	public int GetProxyN() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticPointerIf_GetProxyN((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticPointerIf_GetProxyN((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticPointerIf_GetProxyN((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetTotalSlipState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticPointerIf_GetTotalSlipState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticPointerIf_GetTotalSlipState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticPointerIf_GetTotalSlipState((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetSlipState(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticPointerIf_GetSlipState((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticPointerIf_GetSlipState((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticPointerIf_GetSlipState((IntPtr) _thisArray[0], (int) i);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetProxyVelocity(SpatialVector spv) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
SpatialVector new_spv = new SpatialVector(spv);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_spv);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_spv);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_spv);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
SpatialVector new_spv = new SpatialVector(spv);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_spv);
						});
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_spv);
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_spv);
					} else {
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) spv);
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) spv);
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) spv);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_SetProxyVelocity((IntPtr) _thisArray[0], (IntPtr) spv);
		}
	}
	public void AddHapticForce(SpatialVector f) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
SpatialVector new_f = new SpatialVector(f);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
SpatialVector new_f = new SpatialVector(f);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_f);
						});
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_f);
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_f);
					} else {
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) f);
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) f);
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) f);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_AddHapticForce((IntPtr) _thisArray[0], (IntPtr) f);
		}
	}
	public void ClearHapticForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_ClearHapticForce((IntPtr) _thisArray[0]);
		}
	}
	public void UpdateHumanInterface(Posed pose, SpatialVector vel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
SpatialVector new_vel = new SpatialVector(vel);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose, (IntPtr) new_vel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose, (IntPtr) new_vel);
					},
					() => {
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose, (IntPtr) new_vel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
SpatialVector new_vel = new SpatialVector(vel);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose, (IntPtr) new_vel);
						});
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose, (IntPtr) new_vel);
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose, (IntPtr) new_vel);
					} else {
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose, (IntPtr) vel);
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose, (IntPtr) vel);
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose, (IntPtr) vel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticPointerIf_UpdateHumanInterface((IntPtr) _thisArray[0], (IntPtr) pose, (IntPtr) vel);
		}
	}
    }
    public partial class PHShapePairForHapticIf : CDShapePairIf {
	public PHShapePairForHapticIf() { _thisArray[0] = SprExport.Spr_new_PHShapePairForHapticIf(); _flag = true; }
	public PHShapePairForHapticIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHShapePairForHapticIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHShapePairForHapticIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHShapePairForHapticIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHShapePairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHShapePairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHShapePairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHShapePairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHShapePairForHapticIf(CsCastObject target) {
		return (target._info.Inherit(PHShapePairForHapticIf.GetIfInfoStatic()) ? new PHShapePairForHapticIf(target._thisArray[0], target._flag) : null);
	}
	~PHShapePairForHapticIf() { if (_flag) { SprExport.Spr_delete_PHShapePairForHapticIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHShapePairForHapticIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHShapePairForHapticIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHShapePairForHapticIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHShapePairForHapticIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int NIrs() {
	    int result = (int) SprExport.Spr_PHShapePairForHapticIf_NIrs((IntPtr) _thisArray[0]);
	    return result;
	}
	public int NIrsNormal() {
	    int result = (int) SprExport.Spr_PHShapePairForHapticIf_NIrsNormal((IntPtr) _thisArray[0]);
	    return result;
	}
	public Vec3d GetIrForce(int i) {
	    IntPtr ptr = SprExport.Spr_PHShapePairForHapticIf_GetIrForce((IntPtr) _thisArray[0], (int) i);
            return new Vec3d(ptr, true);
	}
	public double GetMu() {
	    double result = (double) SprExport.Spr_PHShapePairForHapticIf_GetMu((IntPtr) _thisArray[0]);
	    return result;
	}
	public PHFrameIf GetFrame(int i) {
	    IntPtr ptr = SprExport.Spr_PHShapePairForHapticIf_GetFrame((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFrameIf obj = new PHFrameIf(ptr, 0);
            return obj;
	}
	public void UpdateCache() {
	    SprExport.Spr_PHShapePairForHapticIf_UpdateCache((IntPtr) _thisArray[0]);
	}
	public double GetMus(int id) {
	    double result = (double) SprExport.Spr_PHShapePairForHapticIf_GetMus((IntPtr) _thisArray[0], (int) id);
	    return result;
	}
    }
    public partial class PHSolidPairForHapticIf : PHSolidPairIf {
	public PHSolidPairForHapticIf() { _thisArray[0] = SprExport.Spr_new_PHSolidPairForHapticIf(); _flag = true; }
	public PHSolidPairForHapticIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSolidPairForHapticIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSolidPairForHapticIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSolidPairForHapticIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSolidPairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSolidPairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSolidPairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSolidPairForHapticIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSolidPairForHapticIf(CsCastObject target) {
		return (target._info.Inherit(PHSolidPairForHapticIf.GetIfInfoStatic()) ? new PHSolidPairForHapticIf(target._thisArray[0], target._flag) : null);
	}
	~PHSolidPairForHapticIf() { if (_flag) { SprExport.Spr_delete_PHSolidPairForHapticIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSolidPairForHapticIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHShapePairForHapticIf GetShapePair(int i, int j) {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_GetShapePair((IntPtr) _thisArray[0], (int) i, (int) j);
            if (ptr == IntPtr.Zero) { return null; } 
            PHShapePairForHapticIf obj = new PHShapePairForHapticIf(ptr, 0);
            return obj;
	}
	public FrictionState GetFrictionState() {
	    int result = SprExport.Spr_PHSolidPairForHapticIf_GetFrictionState((IntPtr) _thisArray[0]);
            return (PHSolidPairForHapticIf.FrictionState) result;
	}
	public uint GetContactCount() {
	    uint result = (uint) SprExport.Spr_PHSolidPairForHapticIf_GetContactCount((IntPtr) _thisArray[0]);
	    return result;
	}
	public uint GetFrictionCount() {
	    uint result = (uint) SprExport.Spr_PHSolidPairForHapticIf_GetFrictionCount((IntPtr) _thisArray[0]);
	    return result;
	}
	public void InitFrictionState(int n) {
	    SprExport.Spr_PHSolidPairForHapticIf_InitFrictionState((IntPtr) _thisArray[0], (int) n);
	}
	public void InitFrictionCount(int n) {
	    SprExport.Spr_PHSolidPairForHapticIf_InitFrictionCount((IntPtr) _thisArray[0], (int) n);
	}
	public void InitContactCount(int n) {
	    SprExport.Spr_PHSolidPairForHapticIf_InitContactCount((IntPtr) _thisArray[0], (int) n);
	}
	public void InitSlipState(int n) {
	    SprExport.Spr_PHSolidPairForHapticIf_InitSlipState((IntPtr) _thisArray[0], (int) n);
	}
	public int GetSlipState(int i) {
	    int result = (int) SprExport.Spr_PHSolidPairForHapticIf_GetSlipState((IntPtr) _thisArray[0], (int) i);
	    return result;
	}
	public Vec3d GetForce() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_GetForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
	}
	public Vec3d GetTorque() {
	    IntPtr ptr = SprExport.Spr_PHSolidPairForHapticIf_GetTorque((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
	}
	public FrictionState GetFrictionStates(int i) {
	    int result = SprExport.Spr_PHSolidPairForHapticIf_GetFrictionStates((IntPtr) _thisArray[0], (int) i);
            return (PHSolidPairForHapticIf.FrictionState) result;
	}
	public enum FrictionState : int {
	    FREE = 0, STATIC = FREE + 1, DYNAMIC = STATIC + 1
	}
    }
    public partial class PHHapticEngineIf : PHEngineIf {
	public PHHapticEngineIf() { _thisArray[0] = SprExport.Spr_new_PHHapticEngineIf(); _flag = true; }
	public PHHapticEngineIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHapticEngineIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHapticEngineIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHapticEngineIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHapticEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHapticEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHapticEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHapticEngineIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHapticEngineIf(CsCastObject target) {
		return (target._info.Inherit(PHHapticEngineIf.GetIfInfoStatic()) ? new PHHapticEngineIf(target._thisArray[0], target._flag) : null);
	}
	~PHHapticEngineIf() { if (_flag) { SprExport.Spr_delete_PHHapticEngineIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHapticEngineIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHapticEngineIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticEngineIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetHapticStepMode(PHHapticEngineDesc.HapticStepMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticEngineIf_SetHapticStepMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public PHHapticEngineDesc.HapticStepMode GetHapticStepMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = SprExport.Spr_PHHapticEngineIf_GetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return (PHHapticEngineDesc.HapticStepMode) resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = SprExport.Spr_PHHapticEngineIf_GetHapticStepMode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return (PHHapticEngineDesc.HapticStepMode) resultGet;
				}
			}
		} else {
	    int result = SprExport.Spr_PHHapticEngineIf_GetHapticStepMode((IntPtr) _thisArray[0]);
            return (PHHapticEngineDesc.HapticStepMode) result;
		}
		throw new InvalidOperationException();
	}
	public int NSolids() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticEngineIf_NSolids((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticEngineIf_NSolids((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticEngineIf_NSolids((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NPointers() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticEngineIf_NPointers((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticEngineIf_NPointers((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticEngineIf_NPointers((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHHapticPointerIf GetPointer(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticEngineIf_GetPointer((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticEngineIf_GetPointer((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetPointer((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSolidPairForHapticIf GetSolidPair(int i, int j) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticEngineIf_GetSolidPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i, (int) j);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticEngineIf_GetSolidPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i, (int) j);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetSolidPair((IntPtr) _thisArray[0], (int) i, (int) j);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NSolidsInHaptic() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticEngineIf_NSolidsInHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticEngineIf_NSolidsInHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticEngineIf_NSolidsInHaptic((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NPointersInHaptic() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHHapticEngineIf_NPointersInHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHHapticEngineIf_NPointersInHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHHapticEngineIf_NPointersInHaptic((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHHapticPointerIf GetPointerInHaptic(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticEngineIf_GetPointerInHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticEngineIf_GetPointerInHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetPointerInHaptic((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSolidPairForHapticIf GetSolidPairInHaptic(int i, int j) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHapticEngineIf_GetSolidPairInHaptic((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i, (int) j);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHapticEngineIf_GetSolidPairInHaptic((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i, (int) j);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHapticEngineIf_GetSolidPairInHaptic((IntPtr) _thisArray[0], (int) i, (int) j);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidPairForHapticIf obj = new PHSolidPairForHapticIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void StepPhysicsSimulation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticEngineIf_StepPhysicsSimulation((IntPtr) _thisArray[0]);
		}
	}
	public void ReleaseState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHHapticEngineIf_ReleaseState((IntPtr) _thisArray[0]);
		}
	}
	public IntPtr Callback(CsObject arg) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_void_ptr
	    IntPtr resultStep = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) arg);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr resultBuffer = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) arg);
					},
					() => {
	    IntPtr resultGet = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) arg);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr resultStep = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) arg);
						});
	    IntPtr resultBuffer = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) arg);
	    IntPtr resultGet = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) arg);
	    return resultGet;
					} else {
	    IntPtr resultStep = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) arg);
	    IntPtr resultBuffer = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) arg);
	    IntPtr resultGet = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) arg);
	    return resultGet;
					}
				}
			}
		} else {
	    IntPtr result = (IntPtr) SprExport.Spr_PHHapticEngineIf_Callback((IntPtr) _thisArray[0], (IntPtr) arg);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHIKEndEffectorIf : SceneObjectIf {
	public PHIKEndEffectorIf() { _thisArray[0] = SprExport.Spr_new_PHIKEndEffectorIf(); _flag = true; }
	public PHIKEndEffectorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKEndEffectorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKEndEffectorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKEndEffectorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKEndEffectorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKEndEffectorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKEndEffectorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKEndEffectorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKEndEffectorIf(CsCastObject target) {
		return (target._info.Inherit(PHIKEndEffectorIf.GetIfInfoStatic()) ? new PHIKEndEffectorIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKEndEffectorIf() { if (_flag) { SprExport.Spr_delete_PHIKEndEffectorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKEndEffectorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetSolid(PHSolidIf solid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetSolid((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0]);
		}
	}
	public PHSolidIf GetSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetParentActuator(PHIKActuatorIf ika) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ika._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ika._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ika._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ika._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ika._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ika._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ika._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ika._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ika._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetParentActuator((IntPtr) _thisArray[0], (IntPtr) ika._thisArray[0]);
		}
	}
	public PHIKActuatorIf GetParentActuator() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetParentActuator((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetParentActuator((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void Enable(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_Enable((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHIKEndEffectorIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHIKEndEffectorIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHIKEndEffectorIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetTargetLocalPosition(Vec3d localPosition) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_localPosition = new Vec3d(localPosition);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_localPosition);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_localPosition);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_localPosition);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_localPosition = new Vec3d(localPosition);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_localPosition);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_localPosition);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_localPosition);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) localPosition);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) localPosition);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) localPosition);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalPosition((IntPtr) _thisArray[0], (IntPtr) localPosition);
		}
	}
	public Vec3d GetTargetLocalPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalPosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetLocalDirection(Vec3d localDirection) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_localDirection = new Vec3d(localDirection);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_localDirection);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_localDirection);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_localDirection);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_localDirection = new Vec3d(localDirection);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_localDirection);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_localDirection);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_localDirection);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) localDirection);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) localDirection);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) localDirection);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLocalDirection((IntPtr) _thisArray[0], (IntPtr) localDirection);
		}
	}
	public Vec3d GetTargetLocalDirection() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalDirection((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetLocalDirection((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void EnablePositionControl(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnablePositionControl((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsPositionControlEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHIKEndEffectorIf_IsPositionControlEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHIKEndEffectorIf_IsPositionControlEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHIKEndEffectorIf_IsPositionControlEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetPositionPriority(double priority) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetPositionPriority((IntPtr) _thisArray[0], (double) priority);
		}
	}
	public double GetPositionPriority() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEndEffectorIf_GetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEndEffectorIf_GetPositionPriority((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEndEffectorIf_GetPositionPriority((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetTargetPosition(Vec3d position) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_position = new Vec3d(position);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_position);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_position);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_position);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_position = new Vec3d(position);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_position);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_position);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_position);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) position);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) position);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) position);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetPosition((IntPtr) _thisArray[0], (IntPtr) position);
		}
	}
	public Vec3d GetTargetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetPosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void EnableOrientationControl(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableOrientationControl((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsOrientationControlEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHIKEndEffectorIf_IsOrientationControlEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHIKEndEffectorIf_IsOrientationControlEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHIKEndEffectorIf_IsOrientationControlEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetOrientationPriority(double priority) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) priority);
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) priority);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetOrientationPriority((IntPtr) _thisArray[0], (double) priority);
		}
	}
	public double GetOrientationPriority() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKEndEffectorIf_GetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKEndEffectorIf_GetOrientationPriority((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKEndEffectorIf_GetOrientationPriority((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetOriCtlMode(PHIKEndEffectorDesc.OriCtlMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetOriCtlMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public PHIKEndEffectorDesc.OriCtlMode GetOriCtlMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = SprExport.Spr_PHIKEndEffectorIf_GetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return (PHIKEndEffectorDesc.OriCtlMode) resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = SprExport.Spr_PHIKEndEffectorIf_GetOriCtlMode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return (PHIKEndEffectorDesc.OriCtlMode) resultGet;
				}
			}
		} else {
	    int result = SprExport.Spr_PHIKEndEffectorIf_GetOriCtlMode((IntPtr) _thisArray[0]);
            return (PHIKEndEffectorDesc.OriCtlMode) result;
		}
		throw new InvalidOperationException();
	}
	public void SetTargetOrientation(Quaterniond orientation) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_orientation = new Quaterniond(orientation);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_orientation);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_orientation);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_orientation);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_orientation = new Quaterniond(orientation);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_orientation);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_orientation);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_orientation);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) orientation);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) orientation);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) orientation);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetOrientation((IntPtr) _thisArray[0], (IntPtr) orientation);
		}
	}
	public Quaterniond GetTargetOrientation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetOrientation((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetDirection(Vec3d direction) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_direction = new Vec3d(direction);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_direction);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_direction);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_direction);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_direction = new Vec3d(direction);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_direction);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_direction);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_direction);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) direction);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) direction);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) direction);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetDirection((IntPtr) _thisArray[0], (IntPtr) direction);
		}
	}
	public Vec3d GetTargetDirection() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetDirection((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetLookat(Vec3d lookat) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_lookat = new Vec3d(lookat);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_lookat);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_lookat);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_lookat);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_lookat = new Vec3d(lookat);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_lookat);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_lookat);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_lookat);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lookat);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lookat);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lookat);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetLookat((IntPtr) _thisArray[0], (IntPtr) lookat);
		}
	}
	public Vec3d GetTargetLookat() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetLookat((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetLookat((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetVelocity(Vec3d velocity) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_velocity = new Vec3d(velocity);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_velocity);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_velocity);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_velocity);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_velocity = new Vec3d(velocity);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_velocity);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_velocity);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_velocity);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) velocity);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) velocity);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) velocity);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetVelocity((IntPtr) _thisArray[0], (IntPtr) velocity);
		}
	}
	public Vec3d GetTargetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetAngularVelocity(Vec3d angVel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_angVel = new Vec3d(angVel);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_angVel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_angVel);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_angVel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_angVel = new Vec3d(angVel);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_angVel);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_angVel);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_angVel);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) angVel);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) angVel);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) angVel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetAngularVelocity((IntPtr) _thisArray[0], (IntPtr) angVel);
		}
	}
	public Vec3d GetTargetAngularVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetAngularVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void EnableForceControl(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableForceControl((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public void SetTargetForce(Vec3d force, Vec3d workingPoint) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_force = new Vec3d(force);
// NewArgument equal 8 8
// is_struct
Vec3d new_workingPoint = new Vec3d(workingPoint);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_force, (IntPtr) new_workingPoint);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_force, (IntPtr) new_workingPoint);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_force, (IntPtr) new_workingPoint);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_force = new Vec3d(force);
// NewArgument equal 8 8
// is_struct
Vec3d new_workingPoint = new Vec3d(workingPoint);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_force, (IntPtr) new_workingPoint);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_force, (IntPtr) new_workingPoint);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_force, (IntPtr) new_workingPoint);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) force, (IntPtr) workingPoint);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) force, (IntPtr) workingPoint);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) force, (IntPtr) workingPoint);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce((IntPtr) _thisArray[0], (IntPtr) force, (IntPtr) workingPoint);
		}
	}
	public void SetTargetForce(Vec3d force) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_force = new Vec3d(force);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_force);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_force);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_force);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_force = new Vec3d(force);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_force);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_force);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_force);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) force);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) force);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) force);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetForce_1((IntPtr) _thisArray[0], (IntPtr) force);
		}
	}
	public Vec3d GetTargetForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetTargetForceWorkingPoint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetForceWorkingPoint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetForceWorkingPoint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetForceWorkingPoint((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void EnableTorqueControl(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_EnableTorqueControl((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public void SetTargetTorque(Vec3d torque) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_torque = new Vec3d(torque);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_torque);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_torque);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_torque);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_torque = new Vec3d(torque);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_torque);
						});
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_torque);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_torque);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) torque);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) torque);
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) torque);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_SetTargetTorque((IntPtr) _thisArray[0], (IntPtr) torque);
		}
	}
	public Vec3d GetTargetTorque() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetTargetTorque((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetTargetTorque((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Posed GetSolidTempPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKEndEffectorIf_GetSolidTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKEndEffectorIf_GetSolidTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKEndEffectorIf_GetSolidTempPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void ApplyExactState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKEndEffectorIf_ApplyExactState((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHIKActuatorIf : SceneObjectIf {
	public PHIKActuatorIf() { _thisArray[0] = SprExport.Spr_new_PHIKActuatorIf(); _flag = true; }
	public PHIKActuatorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKActuatorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKActuatorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKActuatorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKActuatorIf(CsCastObject target) {
		return (target._info.Inherit(PHIKActuatorIf.GetIfInfoStatic()) ? new PHIKActuatorIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKActuatorIf() { if (_flag) { SprExport.Spr_delete_PHIKActuatorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKActuatorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKActuatorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void PrepareSolve() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_PrepareSolve((IntPtr) _thisArray[0]);
		}
	}
	public void ProceedSolve() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_ProceedSolve((IntPtr) _thisArray[0]);
		}
	}
	public void Move() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_Move((IntPtr) _thisArray[0]);
		}
	}
	public void ApplyExactState(bool reverse) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
						});
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
					} else {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) reverse);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) reverse);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) reverse);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState((IntPtr) _thisArray[0], (bool) reverse);
		}
	}
	public void ApplyExactState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_ApplyExactState_1((IntPtr) _thisArray[0]);
		}
	}
	public void SetBias(float bias) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) bias);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) bias);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) bias);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) bias);
						});
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) bias);
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) bias);
					} else {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) bias);
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) bias);
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) bias);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_SetBias((IntPtr) _thisArray[0], (float) bias);
		}
	}
	public float GetBias() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHIKActuatorIf_GetBias((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHIKActuatorIf_GetBias((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHIKActuatorIf_GetBias((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetPullbackRate(double pullbackRate) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) pullbackRate);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) pullbackRate);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) pullbackRate);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) pullbackRate);
						});
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) pullbackRate);
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) pullbackRate);
					} else {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) pullbackRate);
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) pullbackRate);
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) pullbackRate);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_SetPullbackRate((IntPtr) _thisArray[0], (double) pullbackRate);
		}
	}
	public double GetPullbackRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKActuatorIf_GetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKActuatorIf_GetPullbackRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKActuatorIf_GetPullbackRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void Enable(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKActuatorIf_Enable((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHIKActuatorIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHIKActuatorIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHIKActuatorIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public int NAncestors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHIKActuatorIf_NAncestors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHIKActuatorIf_NAncestors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHIKActuatorIf_NAncestors((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf GetAncestor(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetAncestor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetAncestor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetAncestor((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf GetParent() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetParent((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetParent((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetParent((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NChildActuators() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHIKActuatorIf_NChildActuators((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHIKActuatorIf_NChildActuators((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHIKActuatorIf_NChildActuators((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf GetChildActuator(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetChildActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetChildActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetChildActuator((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHIKEndEffectorIf GetChildEndEffector() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetChildEndEffector((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetChildEndEffector((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetChildEndEffector((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public Posed GetSolidTempPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetSolidTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetSolidTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetSolidTempPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Posed GetSolidPullbackPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKActuatorIf_GetSolidPullbackPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKActuatorIf_GetSolidPullbackPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKActuatorIf_GetSolidPullbackPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHIKBallActuatorIf : PHIKActuatorIf {
	public PHIKBallActuatorIf() { _thisArray[0] = SprExport.Spr_new_PHIKBallActuatorIf(); _flag = true; }
	public PHIKBallActuatorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKBallActuatorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKBallActuatorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKBallActuatorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKBallActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKBallActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKBallActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKBallActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKBallActuatorIf(CsCastObject target) {
		return (target._info.Inherit(PHIKBallActuatorIf.GetIfInfoStatic()) ? new PHIKBallActuatorIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKBallActuatorIf() { if (_flag) { SprExport.Spr_delete_PHIKBallActuatorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKBallActuatorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKBallActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKBallActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetJoint(PHBallJointIf joint) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetJoint((IntPtr) _thisArray[0], (IntPtr) joint._thisArray[0]);
		}
	}
	public PHBallJointIf GetJoint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKBallActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointIf obj = new PHBallJointIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKBallActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointIf obj = new PHBallJointIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_GetJoint((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointIf obj = new PHBallJointIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetJointTempOri(Quaterniond ori) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_ori = new Quaterniond(ori);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
					},
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_ori = new Quaterniond(ori);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
						});
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
					} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ori);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetJointTempOri((IntPtr) _thisArray[0], (IntPtr) ori);
		}
	}
	public void SetPullbackTarget(Quaterniond ori) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_ori = new Quaterniond(ori);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
					},
					() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_ori = new Quaterniond(ori);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
						});
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
					} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ori);
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ori);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKBallActuatorIf_SetPullbackTarget((IntPtr) _thisArray[0], (IntPtr) ori);
		}
	}
	public Quaterniond GetJointTempOri() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKBallActuatorIf_GetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKBallActuatorIf_GetJointTempOri((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_GetJointTempOri((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Quaterniond GetPullbackTarget() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKBallActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKBallActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKBallActuatorIf_GetPullbackTarget((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHIKHingeActuatorIf : PHIKActuatorIf {
	public PHIKHingeActuatorIf() { _thisArray[0] = SprExport.Spr_new_PHIKHingeActuatorIf(); _flag = true; }
	public PHIKHingeActuatorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKHingeActuatorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKHingeActuatorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKHingeActuatorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKHingeActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKHingeActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKHingeActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKHingeActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKHingeActuatorIf(CsCastObject target) {
		return (target._info.Inherit(PHIKHingeActuatorIf.GetIfInfoStatic()) ? new PHIKHingeActuatorIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKHingeActuatorIf() { if (_flag) { SprExport.Spr_delete_PHIKHingeActuatorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKHingeActuatorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKHingeActuatorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKHingeActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKHingeActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKHingeActuatorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKHingeActuatorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetJoint(PHHingeJointIf joint) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJoint((IntPtr) _thisArray[0], (IntPtr) joint._thisArray[0]);
		}
	}
	public PHHingeJointIf GetJoint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKHingeActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHHingeJointIf obj = new PHHingeJointIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKHingeActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHingeJointIf obj = new PHHingeJointIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKHingeActuatorIf_GetJoint((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHHingeJointIf obj = new PHHingeJointIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetJointTempAngle(double angle) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
					},
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
						});
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
					} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetJointTempAngle((IntPtr) _thisArray[0], (double) angle);
		}
	}
	public void SetPullbackTarget(double angle) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
					},
					() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
						});
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
					} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) angle);
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) angle);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKHingeActuatorIf_SetPullbackTarget((IntPtr) _thisArray[0], (double) angle);
		}
	}
	public double GetJointTempAngle() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKHingeActuatorIf_GetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKHingeActuatorIf_GetJointTempAngle((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKHingeActuatorIf_GetJointTempAngle((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetPullbackTarget() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHIKHingeActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHIKHingeActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHIKHingeActuatorIf_GetPullbackTarget((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHIKSpringActuatorIf : PHIKActuatorIf {
	public PHIKSpringActuatorIf() { _thisArray[0] = SprExport.Spr_new_PHIKSpringActuatorIf(); _flag = true; }
	public PHIKSpringActuatorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHIKSpringActuatorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHIKSpringActuatorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHIKSpringActuatorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHIKSpringActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHIKSpringActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHIKSpringActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHIKSpringActuatorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHIKSpringActuatorIf(CsCastObject target) {
		return (target._info.Inherit(PHIKSpringActuatorIf.GetIfInfoStatic()) ? new PHIKSpringActuatorIf(target._thisArray[0], target._flag) : null);
	}
	~PHIKSpringActuatorIf() { if (_flag) { SprExport.Spr_delete_PHIKSpringActuatorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHIKSpringActuatorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKSpringActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKSpringActuatorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetJoint(PHSpringIf joint) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJoint((IntPtr) _thisArray[0], (IntPtr) joint._thisArray[0]);
		}
	}
	public PHSpringIf GetJoint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKSpringActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSpringIf obj = new PHSpringIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKSpringActuatorIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSpringIf obj = new PHSpringIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_GetJoint((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSpringIf obj = new PHSpringIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetJointTempPose(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
						});
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetJointTempPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
	}
	public void SetPullbackTarget(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
						});
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose);
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHIKSpringActuatorIf_SetPullbackTarget((IntPtr) _thisArray[0], (IntPtr) pose);
		}
	}
	public Posed GetJointTempPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKSpringActuatorIf_GetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKSpringActuatorIf_GetJointTempPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_GetJointTempPose((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Posed GetPullbackTarget() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHIKSpringActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posed(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHIKSpringActuatorIf_GetPullbackTarget((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posed(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHIKSpringActuatorIf_GetPullbackTarget((IntPtr) _thisArray[0]);
            return new Posed(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHConstraintIf : SceneObjectIf {
	public PHConstraintIf() { _thisArray[0] = SprExport.Spr_new_PHConstraintIf(); _flag = true; }
	public PHConstraintIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHConstraintIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHConstraintIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHConstraintIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHConstraintIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHConstraintIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHConstraintIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHConstraintIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHConstraintIf(CsCastObject target) {
		return (target._info.Inherit(PHConstraintIf.GetIfInfoStatic()) ? new PHConstraintIf(target._thisArray[0], target._flag) : null);
	}
	~PHConstraintIf() { if (_flag) { SprExport.Spr_delete_PHConstraintIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHConstraintIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHConstraintIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public virtual PHSolidIf GetSocketSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetSocketSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetSocketSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetSocketSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public virtual PHSolidIf GetPlugSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetPlugSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetPlugSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetPlugSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSceneIf GetScene() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetScene((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetScene((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetScene((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void Enable(bool bEnable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
					},
					() => {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
						});
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					} else {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_Enable((IntPtr) _thisArray[0], (bool) bEnable);
		}
	}
	public void Enable() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_Enable_1((IntPtr) _thisArray[0]);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHConstraintIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHConstraintIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHConstraintIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool IsArticulated() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHConstraintIf_IsArticulated((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHConstraintIf_IsArticulated((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHConstraintIf_IsArticulated((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void GetSocketPose(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_GetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHConstraintIf_GetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_GetSocketPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
		throw new InvalidOperationException();
	}
	public void SetSocketPose(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
						});
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose);
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_SetSocketPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
	}
	public void GetPlugPose(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_GetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHConstraintIf_GetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_GetPlugPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
		throw new InvalidOperationException();
	}
	public void SetPlugPose(Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
						});
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose);
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_SetPlugPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
	}
	public void GetRelativePose(Posed p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_GetRelativePose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHConstraintIf_GetRelativePose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_GetRelativePose((IntPtr) _thisArray[0], (IntPtr) p);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetRelativePoseR() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetRelativePoseR((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetRelativePoseR((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetRelativePoseR((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Quaterniond GetRelativePoseQ() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetRelativePoseQ((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetRelativePoseQ((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetRelativePoseQ((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Quaternionf GetAbsolutePoseQ() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintIf_GetAbsolutePoseQ((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaternionf(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintIf_GetAbsolutePoseQ((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaternionf(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintIf_GetAbsolutePoseQ((IntPtr) _thisArray[0]);
            return new Quaternionf(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void GetRelativeVelocity(Vec3d v, Vec3d w) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_GetRelativeVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) v, (IntPtr) w);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHConstraintIf_GetRelativeVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) v, (IntPtr) w);
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_GetRelativeVelocity((IntPtr) _thisArray[0], (IntPtr) v, (IntPtr) w);
		}
		throw new InvalidOperationException();
	}
	public void GetConstraintForce(Vec3d f, Vec3d t) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHConstraintIf_GetConstraintForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) f, (IntPtr) t);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHConstraintIf_GetConstraintForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) f, (IntPtr) t);
				}
			}
		} else {
	    SprExport.Spr_PHConstraintIf_GetConstraintForce((IntPtr) _thisArray[0], (IntPtr) f, (IntPtr) t);
		}
		throw new InvalidOperationException();
	}
	public bool IsYielded() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHConstraintIf_IsYielded((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHConstraintIf_IsYielded((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHConstraintIf_IsYielded((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHConstraintsIf : SceneObjectIf {
	public PHConstraintsIf() { _thisArray[0] = SprExport.Spr_new_PHConstraintsIf(); _flag = true; }
	public PHConstraintsIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHConstraintsIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHConstraintsIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHConstraintsIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHConstraintsIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHConstraintsIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHConstraintsIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHConstraintsIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHConstraintsIf(CsCastObject target) {
		return (target._info.Inherit(PHConstraintsIf.GetIfInfoStatic()) ? new PHConstraintsIf(target._thisArray[0], target._flag) : null);
	}
	~PHConstraintsIf() { if (_flag) { SprExport.Spr_delete_PHConstraintsIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHConstraintsIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHConstraintsIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintsIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintsIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintsIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHConstraintsIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHConstraintIf FindBySolidPair(PHSolidIf lhs, PHSolidIf rhs) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHConstraintIf obj = new PHConstraintIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHContactPointIf.GetIfInfoStatic()) {
				PHContactPointIf appropriate_type = new PHContactPointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHJointIf.GetIfInfoStatic()) {
				PHJointIf appropriate_type = new PHJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHConstraintIf obj = new PHConstraintIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHContactPointIf.GetIfInfoStatic()) {
				PHContactPointIf appropriate_type = new PHContactPointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHJointIf.GetIfInfoStatic()) {
				PHJointIf appropriate_type = new PHJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHConstraintIf obj = new PHConstraintIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHContactPointIf.GetIfInfoStatic()) {
				PHContactPointIf appropriate_type = new PHContactPointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHJointIf.GetIfInfoStatic()) {
				PHJointIf appropriate_type = new PHJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintsIf_FindBySolidPair((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHConstraintIf obj = new PHConstraintIf(ptr, 0);
            if (obj.GetIfInfo() == PHContactPointIf.GetIfInfoStatic()) {
				PHContactPointIf appropriate_type = new PHContactPointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHJointIf.GetIfInfoStatic()) {
				PHJointIf appropriate_type = new PHJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetTotalForce(PHSolidIf lhs, PHSolidIf rhs) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHConstraintsIf_GetTotalForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHConstraintsIf_GetTotalForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHConstraintsIf_GetTotalForce((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHContactPointIf : PHConstraintIf {
	public PHContactPointIf() { _thisArray[0] = SprExport.Spr_new_PHContactPointIf(); _flag = true; }
	public PHContactPointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHContactPointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHContactPointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHContactPointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHContactPointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHContactPointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHContactPointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHContactPointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHContactPointIf(CsCastObject target) {
		return (target._info.Inherit(PHContactPointIf.GetIfInfoStatic()) ? new PHContactPointIf(target._thisArray[0], target._flag) : null);
	}
	~PHContactPointIf() { if (_flag) { SprExport.Spr_delete_PHContactPointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHContactPointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHContactPointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHContactPointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHContactPointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHJointIf : PHConstraintIf {
	public PHJointIf() { _thisArray[0] = SprExport.Spr_new_PHJointIf(); _flag = true; }
	public PHJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHJointIf(CsCastObject target) {
		return (target._info.Inherit(PHJointIf.GetIfInfoStatic()) ? new PHJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHJointIf() { if (_flag) { SprExport.Spr_delete_PHJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetMaxForce(double max) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) max);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) max);
					},
					() => {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) max);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) max);
						});
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) max);
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) max);
					} else {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) max);
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) max);
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) max);
					}
				}
			}
		} else {
	    SprExport.Spr_PHJointIf_SetMaxForce((IntPtr) _thisArray[0], (double) max);
		}
	}
	public double GetMaxForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHJointIf_GetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHJointIf_GetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHJointIf_GetMaxForce((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PH1DJointIf : PHJointIf {
	public PH1DJointIf() { _thisArray[0] = SprExport.Spr_new_PH1DJointIf(); _flag = true; }
	public PH1DJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PH1DJointIf(CsCastObject target) {
		return (target._info.Inherit(PH1DJointIf.GetIfInfoStatic()) ? new PH1DJointIf(target._thisArray[0], target._flag) : null);
	}
	~PH1DJointIf() { if (_flag) { SprExport.Spr_delete_PH1DJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PH1DJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PH1DJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PH1DJointLimitIf CreateLimit(PH1DJointLimitDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PH1DJointLimitDesc new_desc = new PH1DJointLimitDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PH1DJointLimitDesc new_desc = new PH1DJointLimitDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrGet, 0);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrGet, 0);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_CreateLimit((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PH1DJointLimitIf CreateLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrGet, 0);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrGet, 0);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_CreateLimit_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PH1DJointMotorIf CreateMotor(IfInfo ii, PH1DJointMotorDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PH1DJointMotorDesc new_desc = new PH1DJointMotorDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrStep, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PH1DJointMotorDesc new_desc = new PH1DJointMotorDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrGet, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrGet, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_CreateMotor((IntPtr) _thisArray[0], (IntPtr) ii, (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PH1DJointMotorIf CreateMotor(IfInfo ii) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrStep, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrGet, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
	    IntPtr ptrBuffer = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrGet, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_CreateMotor_1((IntPtr) _thisArray[0], (IntPtr) ii);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public bool AddMotor(PH1DJointMotorIf m) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    char retStep = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m);
					},
					() => {
	    char retGet = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m);
						});
	    char retBuffer = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m);
	    char retGet = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m);
	    char retBuffer = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m);
	    char retGet = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointIf_AddMotor((IntPtr) _thisArray[0], (IntPtr) m);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool RemoveMotor(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
					},
					() => {
	    char retGet = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
						});
	    char retBuffer = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    char retGet = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    char retBuffer = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    char retGet = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointIf_RemoveMotor((IntPtr) _thisArray[0], (int) n);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool IsCyclic() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PH1DJointIf_IsCyclic((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PH1DJointIf_IsCyclic((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointIf_IsCyclic((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetCyclic(bool on) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
						});
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
					} else {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) on);
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) on);
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) on);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetCyclic((IntPtr) _thisArray[0], (bool) on);
		}
	}
	public double GetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetPosition((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool HasLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointIf_HasLimit((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PH1DJointLimitIf GetLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_GetLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_GetLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_GetLimit((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointLimitIf obj = new PH1DJointLimitIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetSpring(double spring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
						});
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					} else {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetSpring((IntPtr) _thisArray[0], (double) spring);
		}
	}
	public double GetSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDamper(double damper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
						});
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					} else {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetDamper((IntPtr) _thisArray[0], (double) damper);
		}
	}
	public double GetDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetSecondDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetSecondDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetSecondDamper(double input) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) input);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) input);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) input);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) input);
						});
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) input);
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) input);
					} else {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) input);
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) input);
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) input);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetSecondDamper((IntPtr) _thisArray[0], (double) input);
		}
	}
	public void SetTargetPosition(double targetPosition) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) targetPosition);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) targetPosition);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) targetPosition);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) targetPosition);
						});
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) targetPosition);
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) targetPosition);
					} else {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) targetPosition);
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) targetPosition);
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) targetPosition);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetTargetPosition((IntPtr) _thisArray[0], (double) targetPosition);
		}
	}
	public double GetTargetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetTargetPosition((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetTargetVelocity(double v) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) v);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) v);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) v);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) v);
						});
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) v);
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) v);
					} else {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) v);
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) v);
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) v);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetTargetVelocity((IntPtr) _thisArray[0], (double) v);
		}
	}
	public double GetTargetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetTargetVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetOffsetForce(double dat) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dat);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dat);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dat);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dat);
						});
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dat);
					} else {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dat);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetOffsetForce((IntPtr) _thisArray[0], (double) dat);
		}
	}
	public double GetOffsetForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetOffsetForce((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetOffsetForceN(int n, double dat) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (double) dat);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (double) dat);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (double) dat);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (double) dat);
						});
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (double) dat);
					} else {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (double) dat);
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (double) dat);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetOffsetForceN((IntPtr) _thisArray[0], (int) n, (double) dat);
		}
	}
	public double GetOffsetForceN(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetOffsetForceN((IntPtr) _thisArray[0], (int) n);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetYieldStress() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetYieldStress((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetYieldStress(double yS) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
						});
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
					} else {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetYieldStress((IntPtr) _thisArray[0], (double) yS);
		}
	}
	public double GetHardnessRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetHardnessRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetHardnessRate(double hR) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
						});
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
					} else {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetHardnessRate((IntPtr) _thisArray[0], (double) hR);
		}
	}
	public void SetSecondMoment(double sM) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) sM);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) sM);
					},
					() => {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) sM);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) sM);
						});
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) sM);
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) sM);
					} else {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) sM);
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) sM);
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) sM);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointIf_SetSecondMoment((IntPtr) _thisArray[0], (double) sM);
		}
	}
	public double GetSecondMoment() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetSecondMoment((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int NMotors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PH1DJointIf_NMotors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PH1DJointIf_NMotors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PH1DJointIf_NMotors((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PH1DJointMotorIf GetMotors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointIf_GetMotors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrStep, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointIf_GetMotors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptrGet, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointIf_GetMotors((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PH1DJointMotorIf obj = new PH1DJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PH1DJointNonLinearMotorIf.GetIfInfoStatic()) {
				PH1DJointNonLinearMotorIf appropriate_type = new PH1DJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHuman1DJointResistanceIf.GetIfInfoStatic()) {
				PHHuman1DJointResistanceIf appropriate_type = new PHHuman1DJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public double GetMotorForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetMotorForce((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetMotorForceN(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetMotorForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetMotorForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetMotorForceN((IntPtr) _thisArray[0], (int) n);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetLimitForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointIf_GetLimitForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointIf_GetLimitForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointIf_GetLimitForce((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHHingeJointIf : PH1DJointIf {
	public PHHingeJointIf() { _thisArray[0] = SprExport.Spr_new_PHHingeJointIf(); _flag = true; }
	public PHHingeJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHingeJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHingeJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHingeJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHingeJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHingeJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHingeJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHingeJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHingeJointIf(CsCastObject target) {
		return (target._info.Inherit(PHHingeJointIf.GetIfInfoStatic()) ? new PHHingeJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHHingeJointIf() { if (_flag) { SprExport.Spr_delete_PHHingeJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHingeJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHingeJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHingeJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHingeJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHingeJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHingeJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHSliderJointIf : PH1DJointIf {
	public PHSliderJointIf() { _thisArray[0] = SprExport.Spr_new_PHSliderJointIf(); _flag = true; }
	public PHSliderJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSliderJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSliderJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSliderJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSliderJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSliderJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSliderJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSliderJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSliderJointIf(CsCastObject target) {
		return (target._info.Inherit(PHSliderJointIf.GetIfInfoStatic()) ? new PHSliderJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHSliderJointIf() { if (_flag) { SprExport.Spr_delete_PHSliderJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSliderJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSliderJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSliderJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSliderJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSliderJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSliderJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPathIf : SceneObjectIf {
	public PHPathIf() { _thisArray[0] = SprExport.Spr_new_PHPathIf(); _flag = true; }
	public PHPathIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPathIf(CsCastObject target) {
		return (target._info.Inherit(PHPathIf.GetIfInfoStatic()) ? new PHPathIf(target._thisArray[0], target._flag) : null);
	}
	~PHPathIf() { if (_flag) { SprExport.Spr_delete_PHPathIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPathIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPathIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPathIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPathIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPathIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPathIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void AddPoint(double s, Posed pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) s, (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) s, (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) s, (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posed new_pose = new Posed(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) s, (IntPtr) new_pose);
						});
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) s, (IntPtr) new_pose);
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) s, (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) s, (IntPtr) pose);
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) s, (IntPtr) pose);
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) s, (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHPathIf_AddPoint((IntPtr) _thisArray[0], (double) s, (IntPtr) pose);
		}
	}
	public void SetLoop(bool bOnOff) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOnOff);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOnOff);
					},
					() => {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOnOff);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOnOff);
						});
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOnOff);
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOnOff);
					} else {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOnOff);
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOnOff);
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOnOff);
					}
				}
			}
		} else {
	    SprExport.Spr_PHPathIf_SetLoop((IntPtr) _thisArray[0], (bool) bOnOff);
		}
	}
	public void SetLoop() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHPathIf_SetLoop_1((IntPtr) _thisArray[0]);
		}
	}
	public bool IsLoop() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHPathIf_IsLoop((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHPathIf_IsLoop((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHPathIf_IsLoop((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHPathJointIf : PH1DJointIf {
	public PHPathJointIf() { _thisArray[0] = SprExport.Spr_new_PHPathJointIf(); _flag = true; }
	public PHPathJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPathJointIf(CsCastObject target) {
		return (target._info.Inherit(PHPathJointIf.GetIfInfoStatic()) ? new PHPathJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHPathJointIf() { if (_flag) { SprExport.Spr_delete_PHPathJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPathJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPathJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPathJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPathJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPathJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPathJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetPosition(double q) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) q);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) q);
					},
					() => {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) q);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) q);
						});
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) q);
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) q);
					} else {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) q);
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) q);
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) q);
					}
				}
			}
		} else {
	    SprExport.Spr_PHPathJointIf_SetPosition((IntPtr) _thisArray[0], (double) q);
		}
	}
    }
    public partial class PHGenericJointIf : PH1DJointIf {
	public PHGenericJointIf() { _thisArray[0] = SprExport.Spr_new_PHGenericJointIf(); _flag = true; }
	public PHGenericJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGenericJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGenericJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGenericJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGenericJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGenericJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGenericJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGenericJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHGenericJointIf(CsCastObject target) {
		return (target._info.Inherit(PHGenericJointIf.GetIfInfoStatic()) ? new PHGenericJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHGenericJointIf() { if (_flag) { SprExport.Spr_delete_PHGenericJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHGenericJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHGenericJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHGenericJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHGenericJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHGenericJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHGenericJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetCallback(PHGenericJointCallback cb) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) cb);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) cb);
					},
					() => {
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) cb);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) cb);
						});
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) cb);
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) cb);
					} else {
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) cb);
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) cb);
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) cb);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGenericJointIf_SetCallback((IntPtr) _thisArray[0], (IntPtr) cb);
		}
	}
	public void SetParam(string name, double value) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
string new_name = string.Copy(name);
// intrinsic
            IntPtr remoteStep1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (double) value);
            Marshal.FreeBSTR(remoteStep1);
				phSceneIf.AddCallbackForStepThread(
					() => {
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (double) value);
            Marshal.FreeBSTR(remoteBuffer1);
					},
					() => {
            IntPtr remoteGet1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (double) value);
            Marshal.FreeBSTR(remoteGet1);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
string new_name = string.Copy(name);
// intrinsic
						phSceneIf.AddCallbackForSubThread(() => {
            IntPtr remoteStep1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (double) value);
            Marshal.FreeBSTR(remoteStep1);
						});
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (double) value);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (double) value);
            Marshal.FreeBSTR(remoteGet1);
					} else {
            IntPtr remoteStep1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) remoteStep1, (double) value);
            Marshal.FreeBSTR(remoteStep1);
            IntPtr remoteBuffer1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) remoteBuffer1, (double) value);
            Marshal.FreeBSTR(remoteBuffer1);
            IntPtr remoteGet1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) remoteGet1, (double) value);
            Marshal.FreeBSTR(remoteGet1);
					}
				}
			}
		} else {
            IntPtr remote1 = Marshal.StringToBSTR(name);
	    SprExport.Spr_PHGenericJointIf_SetParam((IntPtr) _thisArray[0], (IntPtr) remote1, (double) value);
            Marshal.FreeBSTR(remote1);
		}
	}
    }
    public partial class PHBallJointIf : PHJointIf {
	public PHBallJointIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointIf(); _flag = true; }
	public PHBallJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointIf.GetIfInfoStatic()) ? new PHBallJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointIf() { if (_flag) { SprExport.Spr_delete_PHBallJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public PHBallJointLimitIf CreateLimit(IfInfo ii, PHBallJointLimitDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PHBallJointLimitDesc new_desc = new PHBallJointLimitDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PHBallJointLimitDesc new_desc = new PHBallJointLimitDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_CreateLimit((IntPtr) _thisArray[0], (IntPtr) ii, (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHBallJointLimitIf CreateLimit(IfInfo ii) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_CreateLimit_1((IntPtr) _thisArray[0], (IntPtr) ii);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHBallJointMotorIf CreateMotor(IfInfo ii, PHBallJointMotorDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PHBallJointMotorDesc new_desc = new PHBallJointMotorDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PHBallJointMotorDesc new_desc = new PHBallJointMotorDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_CreateMotor((IntPtr) _thisArray[0], (IntPtr) ii, (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHBallJointMotorIf CreateMotor(IfInfo ii) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
	    IntPtr ptrBuffer = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_CreateMotor_1((IntPtr) _thisArray[0], (IntPtr) ii);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public bool AddMotor(PHBallJointMotorIf m) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    char retStep = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m._thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m._thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m._thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointIf_AddMotor((IntPtr) _thisArray[0], (IntPtr) m._thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool RemoveMotor(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
					},
					() => {
	    char retGet = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
						});
	    char retBuffer = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    char retGet = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    char retBuffer = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    char retGet = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointIf_RemoveMotor((IntPtr) _thisArray[0], (int) n);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetAngle() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetAngle((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetAngle((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetAngle((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Quaterniond GetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetPosition((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public bool HasLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointIf_HasLimit((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PHBallJointLimitIf GetLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetLimit((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointLimitIf obj = new PHBallJointLimitIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointConeLimitIf.GetIfInfoStatic()) {
				PHBallJointConeLimitIf appropriate_type = new PHBallJointConeLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointSplineLimitIf.GetIfInfoStatic()) {
				PHBallJointSplineLimitIf appropriate_type = new PHBallJointSplineLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIndependentLimitIf.GetIfInfoStatic()) {
				PHBallJointIndependentLimitIf appropriate_type = new PHBallJointIndependentLimitIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetSpring(double spring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
						});
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					} else {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetSpring((IntPtr) _thisArray[0], (double) spring);
		}
	}
	public double GetSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointIf_GetSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDamper(double damper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
						});
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					} else {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetDamper((IntPtr) _thisArray[0], (double) damper);
		}
	}
	public double GetDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointIf_GetDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetSecondDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetSecondDamper((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetSecondDamper(Vec3d damper2) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_damper2 = new Vec3d(damper2);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_damper2);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_damper2);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_damper2);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_damper2 = new Vec3d(damper2);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_damper2);
						});
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_damper2);
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_damper2);
					} else {
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) damper2);
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) damper2);
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) damper2);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetSecondDamper((IntPtr) _thisArray[0], (IntPtr) damper2);
		}
	}
	public void SetTargetPosition(Quaterniond p) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_p = new Quaterniond(p);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_p = new Quaterniond(p);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_p);
						});
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_p);
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_p);
					} else {
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) p);
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) p);
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) p);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetTargetPosition((IntPtr) _thisArray[0], (IntPtr) p);
		}
	}
	public Quaterniond GetTargetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetTargetPosition((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetVelocity(Vec3d q) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_q = new Vec3d(q);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_q);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_q);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_q);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_q = new Vec3d(q);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_q);
						});
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_q);
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_q);
					} else {
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) q);
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) q);
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) q);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetTargetVelocity((IntPtr) _thisArray[0], (IntPtr) q);
		}
	}
	public Vec3d GetTargetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetTargetVelocity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetOffsetForce(Vec3d ofst) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_ofst = new Vec3d(ofst);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ofst);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ofst);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ofst);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_ofst = new Vec3d(ofst);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ofst);
						});
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ofst);
					} else {
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ofst);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetOffsetForce((IntPtr) _thisArray[0], (IntPtr) ofst);
		}
	}
	public Vec3d GetOffsetForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetOffsetForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetOffsetForceN(int n, Vec3d ofst) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_ofst = new Vec3d(ofst);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) new_ofst);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) new_ofst);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) new_ofst);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_ofst = new Vec3d(ofst);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) new_ofst);
						});
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) new_ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) new_ofst);
					} else {
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) ofst);
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) ofst);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetOffsetForceN((IntPtr) _thisArray[0], (int) n, (IntPtr) ofst);
		}
	}
	public Vec3d GetOffsetForceN(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetOffsetForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetOffsetForceN((IntPtr) _thisArray[0], (int) n);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetYieldStress(double yS) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
						});
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
					} else {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yS);
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yS);
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yS);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetYieldStress((IntPtr) _thisArray[0], (double) yS);
		}
	}
	public double GetYieldStress() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointIf_GetYieldStress((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetHardnessRate(double hR) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
						});
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
					} else {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hR);
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hR);
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hR);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetHardnessRate((IntPtr) _thisArray[0], (double) hR);
		}
	}
	public double GetHardnessRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointIf_GetHardnessRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetSecondMoment(Vec3d m) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_m = new Vec3d(m);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_m);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_m);
					},
					() => {
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_m);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_m = new Vec3d(m);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_m);
						});
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_m);
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_m);
					} else {
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) m);
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) m);
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) m);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIf_SetSecondMoment((IntPtr) _thisArray[0], (IntPtr) m);
		}
	}
	public Vec3d GetSecondMoment() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetSecondMoment((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public int NMotors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHBallJointIf_NMotors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHBallJointIf_NMotors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHBallJointIf_NMotors((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHBallJointMotorIf GetMotors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetMotors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetMotors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetMotors((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBallJointMotorIf obj = new PHBallJointMotorIf(ptr, 0);
            if (obj.GetIfInfo() == PHBallJointNonLinearMotorIf.GetIfInfoStatic()) {
				PHBallJointNonLinearMotorIf appropriate_type = new PHBallJointNonLinearMotorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHumanBallJointResistanceIf.GetIfInfoStatic()) {
				PHHumanBallJointResistanceIf appropriate_type = new PHHumanBallJointResistanceIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetMotorForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetMotorForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetMotorForceN(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetMotorForceN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetMotorForceN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetMotorForceN((IntPtr) _thisArray[0], (int) n);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3d GetLimitForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIf_GetLimitForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIf_GetLimitForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIf_GetLimitForce((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHFixJointIf : PHJointIf {
	public PHFixJointIf() { _thisArray[0] = SprExport.Spr_new_PHFixJointIf(); _flag = true; }
	public PHFixJointIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFixJointIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFixJointIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFixJointIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFixJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFixJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFixJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFixJointIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFixJointIf(CsCastObject target) {
		return (target._info.Inherit(PHFixJointIf.GetIfInfoStatic()) ? new PHFixJointIf(target._thisArray[0], target._flag) : null);
	}
	~PHFixJointIf() { if (_flag) { SprExport.Spr_delete_PHFixJointIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFixJointIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFixJointIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFixJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFixJointIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFixJointIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFixJointIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHSpringIf : PHJointIf {
	public PHSpringIf() { _thisArray[0] = SprExport.Spr_new_PHSpringIf(); _flag = true; }
	public PHSpringIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSpringIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSpringIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSpringIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSpringIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSpringIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSpringIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSpringIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSpringIf(CsCastObject target) {
		return (target._info.Inherit(PHSpringIf.GetIfInfoStatic()) ? new PHSpringIf(target._thisArray[0], target._flag) : null);
	}
	~PHSpringIf() { if (_flag) { SprExport.Spr_delete_PHSpringIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSpringIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSpringIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetTargetPosition(Vec3d targetPosition) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_targetPosition = new Vec3d(targetPosition);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetPosition);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetPosition);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetPosition);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_targetPosition = new Vec3d(targetPosition);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetPosition);
						});
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetPosition);
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetPosition);
					} else {
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) targetPosition);
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) targetPosition);
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) targetPosition);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetTargetPosition((IntPtr) _thisArray[0], (IntPtr) targetPosition);
		}
	}
	public Vec3d GetTargetPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetTargetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetTargetPosition((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetTargetOrientation(Quaterniond targetOrientation) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Quaterniond new_targetOrientation = new Quaterniond(targetOrientation);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetOrientation);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetOrientation);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetOrientation);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Quaterniond new_targetOrientation = new Quaterniond(targetOrientation);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetOrientation);
						});
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetOrientation);
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetOrientation);
					} else {
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) targetOrientation);
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) targetOrientation);
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) targetOrientation);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetTargetOrientation((IntPtr) _thisArray[0], (IntPtr) targetOrientation);
		}
	}
	public Quaterniond GetTargetOrientation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Quaterniond(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetTargetOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Quaterniond(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetTargetOrientation((IntPtr) _thisArray[0]);
            return new Quaterniond(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetSpring(Vec3d spring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_spring = new Vec3d(spring);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_spring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_spring);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_spring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_spring = new Vec3d(spring);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_spring);
						});
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_spring);
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_spring);
					} else {
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) spring);
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) spring);
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) spring);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetSpring((IntPtr) _thisArray[0], (IntPtr) spring);
		}
	}
	public Vec3d GetSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetSpring((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetDamper(Vec3d damper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_damper = new Vec3d(damper);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_damper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_damper);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_damper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_damper = new Vec3d(damper);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_damper);
						});
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_damper);
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_damper);
					} else {
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) damper);
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) damper);
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) damper);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetDamper((IntPtr) _thisArray[0], (IntPtr) damper);
		}
	}
	public Vec3d GetDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetDamper((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetSecondDamper(Vec3d secondDamper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_secondDamper = new Vec3d(secondDamper);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_secondDamper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_secondDamper);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_secondDamper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_secondDamper = new Vec3d(secondDamper);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_secondDamper);
						});
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_secondDamper);
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_secondDamper);
					} else {
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) secondDamper);
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) secondDamper);
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) secondDamper);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetSecondDamper((IntPtr) _thisArray[0], (IntPtr) secondDamper);
		}
	}
	public Vec3d GetSecondDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetSecondDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetSecondDamper((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetSpringOri(double spring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
						});
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					} else {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetSpringOri((IntPtr) _thisArray[0], (double) spring);
		}
	}
	public double GetSpringOri() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSpringIf_GetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSpringIf_GetSpringOri((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSpringIf_GetSpringOri((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDamperOri(double damper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
						});
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					} else {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetDamperOri((IntPtr) _thisArray[0], (double) damper);
		}
	}
	public double GetDamperOri() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSpringIf_GetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSpringIf_GetDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSpringIf_GetDamperOri((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetSecondDamperOri(double secondDamperOri) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) secondDamperOri);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) secondDamperOri);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) secondDamperOri);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) secondDamperOri);
						});
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) secondDamperOri);
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) secondDamperOri);
					} else {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) secondDamperOri);
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) secondDamperOri);
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) secondDamperOri);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetSecondDamperOri((IntPtr) _thisArray[0], (double) secondDamperOri);
		}
	}
	public double GetSecondDamperOri() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSpringIf_GetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSpringIf_GetSecondDamperOri((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSpringIf_GetSecondDamperOri((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetYieldStress(double yieldStress) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yieldStress);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yieldStress);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yieldStress);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yieldStress);
						});
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yieldStress);
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yieldStress);
					} else {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) yieldStress);
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) yieldStress);
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) yieldStress);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetYieldStress((IntPtr) _thisArray[0], (double) yieldStress);
		}
	}
	public double GetYieldStress() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSpringIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSpringIf_GetYieldStress((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSpringIf_GetYieldStress((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetHardnessRate(double hardnessRate) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hardnessRate);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hardnessRate);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hardnessRate);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hardnessRate);
						});
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hardnessRate);
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hardnessRate);
					} else {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) hardnessRate);
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) hardnessRate);
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) hardnessRate);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetHardnessRate((IntPtr) _thisArray[0], (double) hardnessRate);
		}
	}
	public double GetHardnessRate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSpringIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSpringIf_GetHardnessRate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSpringIf_GetHardnessRate((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetSecondMoment(Vec3d secondMoment) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_secondMoment = new Vec3d(secondMoment);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_secondMoment);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_secondMoment);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_secondMoment);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_secondMoment = new Vec3d(secondMoment);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_secondMoment);
						});
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_secondMoment);
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_secondMoment);
					} else {
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) secondMoment);
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) secondMoment);
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) secondMoment);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetSecondMoment((IntPtr) _thisArray[0], (IntPtr) secondMoment);
		}
	}
	public Vec3d GetSecondMoment() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetSecondMoment((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetSecondMoment((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec6d GetMotorForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec6d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetMotorForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec6d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetMotorForce((IntPtr) _thisArray[0]);
            return new Vec6d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetOffsetForce(Vec6d offsetForce) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec6d new_offsetForce = new Vec6d(offsetForce);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_offsetForce);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_offsetForce);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_offsetForce);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec6d new_offsetForce = new Vec6d(offsetForce);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_offsetForce);
						});
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_offsetForce);
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_offsetForce);
					} else {
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) offsetForce);
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) offsetForce);
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) offsetForce);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetOffsetForce((IntPtr) _thisArray[0], (IntPtr) offsetForce);
		}
	}
	public void SetTargetVelocity(Vec6d targetVelocity) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec6d new_targetVelocity = new Vec6d(targetVelocity);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetVelocity);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetVelocity);
					},
					() => {
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetVelocity);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec6d new_targetVelocity = new Vec6d(targetVelocity);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_targetVelocity);
						});
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_targetVelocity);
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_targetVelocity);
					} else {
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) targetVelocity);
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) targetVelocity);
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) targetVelocity);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSpringIf_SetTargetVelocity((IntPtr) _thisArray[0], (IntPtr) targetVelocity);
		}
	}
	public Vec6d GetTargetVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec6d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringIf_GetTargetVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec6d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringIf_GetTargetVelocity((IntPtr) _thisArray[0]);
            return new Vec6d(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHMateIf : PHJointIf {
	public PHMateIf() { _thisArray[0] = SprExport.Spr_new_PHMateIf(); _flag = true; }
	public PHMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHMateIf(CsCastObject target) {
		return (target._info.Inherit(PHMateIf.GetIfInfoStatic()) ? new PHMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHMateIf() { if (_flag) { SprExport.Spr_delete_PHMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPointToPointMateIf : PHMateIf {
	public PHPointToPointMateIf() { _thisArray[0] = SprExport.Spr_new_PHPointToPointMateIf(); _flag = true; }
	public PHPointToPointMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToPointMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToPointMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToPointMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToPointMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToPointMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToPointMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToPointMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPointToPointMateIf(CsCastObject target) {
		return (target._info.Inherit(PHPointToPointMateIf.GetIfInfoStatic()) ? new PHPointToPointMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHPointToPointMateIf() { if (_flag) { SprExport.Spr_delete_PHPointToPointMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPointToPointMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPointToPointMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPointToPointMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPointToPointMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPointToPointMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPointToPointMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPointToLineMateIf : PHMateIf {
	public PHPointToLineMateIf() { _thisArray[0] = SprExport.Spr_new_PHPointToLineMateIf(); _flag = true; }
	public PHPointToLineMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToLineMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToLineMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToLineMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPointToLineMateIf(CsCastObject target) {
		return (target._info.Inherit(PHPointToLineMateIf.GetIfInfoStatic()) ? new PHPointToLineMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHPointToLineMateIf() { if (_flag) { SprExport.Spr_delete_PHPointToLineMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPointToLineMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPointToLineMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPointToLineMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPointToLineMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPointToLineMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPointToLineMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPointToPlaneMateIf : PHMateIf {
	public PHPointToPlaneMateIf() { _thisArray[0] = SprExport.Spr_new_PHPointToPlaneMateIf(); _flag = true; }
	public PHPointToPlaneMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPointToPlaneMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPointToPlaneMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPointToPlaneMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPointToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPointToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPointToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPointToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPointToPlaneMateIf(CsCastObject target) {
		return (target._info.Inherit(PHPointToPlaneMateIf.GetIfInfoStatic()) ? new PHPointToPlaneMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHPointToPlaneMateIf() { if (_flag) { SprExport.Spr_delete_PHPointToPlaneMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPointToPlaneMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPointToPlaneMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPointToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPointToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPointToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPointToPlaneMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHPointToPlaneMateIf_SetRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHPointToPlaneMateIf_GetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHPointToPlaneMateIf_GetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHPointToPlaneMateIf_GetRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHLineToLineMateIf : PHMateIf {
	public PHLineToLineMateIf() { _thisArray[0] = SprExport.Spr_new_PHLineToLineMateIf(); _flag = true; }
	public PHLineToLineMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHLineToLineMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHLineToLineMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHLineToLineMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHLineToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHLineToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHLineToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHLineToLineMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHLineToLineMateIf(CsCastObject target) {
		return (target._info.Inherit(PHLineToLineMateIf.GetIfInfoStatic()) ? new PHLineToLineMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHLineToLineMateIf() { if (_flag) { SprExport.Spr_delete_PHLineToLineMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHLineToLineMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHLineToLineMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHLineToLineMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHLineToLineMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHLineToLineMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHLineToLineMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPlaneToPlaneMateIf : PHMateIf {
	public PHPlaneToPlaneMateIf() { _thisArray[0] = SprExport.Spr_new_PHPlaneToPlaneMateIf(); _flag = true; }
	public PHPlaneToPlaneMateIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPlaneToPlaneMateIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPlaneToPlaneMateIf(CsCastObject target) {
		return (target._info.Inherit(PHPlaneToPlaneMateIf.GetIfInfoStatic()) ? new PHPlaneToPlaneMateIf(target._thisArray[0], target._flag) : null);
	}
	~PHPlaneToPlaneMateIf() { if (_flag) { SprExport.Spr_delete_PHPlaneToPlaneMateIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPlaneToPlaneMateIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPlaneToPlaneMateIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPlaneToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPlaneToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPlaneToPlaneMateIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPlaneToPlaneMateIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHTreeNodeIf : SceneObjectIf {
	public PHTreeNodeIf() { _thisArray[0] = SprExport.Spr_new_PHTreeNodeIf(); _flag = true; }
	public PHTreeNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHTreeNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHTreeNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHTreeNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHTreeNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHTreeNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHTreeNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHTreeNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHTreeNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHTreeNodeIf.GetIfInfoStatic()) ? new PHTreeNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHTreeNodeIf() { if (_flag) { SprExport.Spr_delete_PHTreeNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHTreeNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHTreeNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void Enable(bool bEnable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
					},
					() => {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
						});
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					} else {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHTreeNodeIf_Enable((IntPtr) _thisArray[0], (bool) bEnable);
		}
	}
	public void Enable() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHTreeNodeIf_Enable_1((IntPtr) _thisArray[0]);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHTreeNodeIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHTreeNodeIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHTreeNodeIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public int NChildren() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHTreeNodeIf_NChildren((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHTreeNodeIf_NChildren((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHTreeNodeIf_NChildren((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHTreeNodeIf GetParentNode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNodeIf_GetParentNode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNodeIf_GetParentNode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetParentNode((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptr, 0);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHTreeNodeIf GetChildNode(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNodeIf_GetChildNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNodeIf_GetChildNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetChildNode((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptr, 0);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRootNodeIf GetRootNode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNodeIf_GetRootNode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNodeIf_GetRootNode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetRootNode((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSolidIf GetSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNodeIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNodeIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNodeIf_GetSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHRootNodeIf : PHTreeNodeIf {
	public PHRootNodeIf() { _thisArray[0] = SprExport.Spr_new_PHRootNodeIf(); _flag = true; }
	public PHRootNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHRootNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHRootNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHRootNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHRootNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHRootNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHRootNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHRootNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHRootNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHRootNodeIf.GetIfInfoStatic()) ? new PHRootNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHRootNodeIf() { if (_flag) { SprExport.Spr_delete_PHRootNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHRootNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHRootNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRootNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRootNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRootNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHRootNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHTreeNode1DIf : PHTreeNodeIf {
	public PHTreeNode1DIf() { _thisArray[0] = SprExport.Spr_new_PHTreeNode1DIf(); _flag = true; }
	public PHTreeNode1DIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHTreeNode1DIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHTreeNode1DIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHTreeNode1DIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHTreeNode1DIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHTreeNode1DIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHTreeNode1DIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHTreeNode1DIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHTreeNode1DIf(CsCastObject target) {
		return (target._info.Inherit(PHTreeNode1DIf.GetIfInfoStatic()) ? new PHTreeNode1DIf(target._thisArray[0], target._flag) : null);
	}
	~PHTreeNode1DIf() { if (_flag) { SprExport.Spr_delete_PHTreeNode1DIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHTreeNode1DIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHTreeNode1DIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHTreeNode1DIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHTreeNode1DIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHTreeNode1DIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHTreeNode1DIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHHingeJointNodeIf : PHTreeNode1DIf {
	public PHHingeJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHHingeJointNodeIf(); _flag = true; }
	public PHHingeJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHingeJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHingeJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHingeJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHingeJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHingeJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHingeJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHingeJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHingeJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHHingeJointNodeIf.GetIfInfoStatic()) ? new PHHingeJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHHingeJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHHingeJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHingeJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHingeJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHingeJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHingeJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHingeJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHingeJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHSliderJointNodeIf : PHTreeNode1DIf {
	public PHSliderJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHSliderJointNodeIf(); _flag = true; }
	public PHSliderJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSliderJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSliderJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSliderJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSliderJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSliderJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSliderJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSliderJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSliderJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHSliderJointNodeIf.GetIfInfoStatic()) ? new PHSliderJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHSliderJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHSliderJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSliderJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSliderJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSliderJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSliderJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSliderJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSliderJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHPathJointNodeIf : PHTreeNode1DIf {
	public PHPathJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHPathJointNodeIf(); _flag = true; }
	public PHPathJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHPathJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHPathJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHPathJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHPathJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHPathJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHPathJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHPathJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHPathJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHPathJointNodeIf.GetIfInfoStatic()) ? new PHPathJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHPathJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHPathJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHPathJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHPathJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHPathJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHPathJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHPathJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHPathJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHGenericJointNodeIf : PHTreeNode1DIf {
	public PHGenericJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHGenericJointNodeIf(); _flag = true; }
	public PHGenericJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGenericJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGenericJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGenericJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGenericJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGenericJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGenericJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGenericJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHGenericJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHGenericJointNodeIf.GetIfInfoStatic()) ? new PHGenericJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHGenericJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHGenericJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHGenericJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHGenericJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHGenericJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHGenericJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHGenericJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHGenericJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHBallJointNodeIf : PHTreeNodeIf {
	public PHBallJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointNodeIf(); _flag = true; }
	public PHBallJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointNodeIf.GetIfInfoStatic()) ? new PHBallJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHBallJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHFixJointNodeIf : PHTreeNodeIf {
	public PHFixJointNodeIf() { _thisArray[0] = SprExport.Spr_new_PHFixJointNodeIf(); _flag = true; }
	public PHFixJointNodeIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHFixJointNodeIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHFixJointNodeIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHFixJointNodeIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHFixJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHFixJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHFixJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHFixJointNodeIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHFixJointNodeIf(CsCastObject target) {
		return (target._info.Inherit(PHFixJointNodeIf.GetIfInfoStatic()) ? new PHFixJointNodeIf(target._thisArray[0], target._flag) : null);
	}
	~PHFixJointNodeIf() { if (_flag) { SprExport.Spr_delete_PHFixJointNodeIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHFixJointNodeIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHFixJointNodeIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHFixJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHFixJointNodeIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHFixJointNodeIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHFixJointNodeIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHGearIf : SceneObjectIf {
	public PHGearIf() { _thisArray[0] = SprExport.Spr_new_PHGearIf(); _flag = true; }
	public PHGearIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHGearIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHGearIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHGearIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHGearIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHGearIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHGearIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHGearIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHGearIf(CsCastObject target) {
		return (target._info.Inherit(PHGearIf.GetIfInfoStatic()) ? new PHGearIf(target._thisArray[0], target._flag) : null);
	}
	~PHGearIf() { if (_flag) { SprExport.Spr_delete_PHGearIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHGearIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHGearIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHGearIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHGearIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHGearIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHGearIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void Enable(bool bEnable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
					},
					() => {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
						});
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					} else {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bEnable);
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bEnable);
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bEnable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGearIf_Enable((IntPtr) _thisArray[0], (bool) bEnable);
		}
	}
	public void Enable() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGearIf_Enable_1((IntPtr) _thisArray[0]);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHGearIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHGearIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHGearIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetRatio(double ratio) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ratio);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ratio);
					},
					() => {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ratio);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ratio);
						});
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ratio);
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ratio);
					} else {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) ratio);
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) ratio);
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) ratio);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGearIf_SetRatio((IntPtr) _thisArray[0], (double) ratio);
		}
	}
	public double GetRatio() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHGearIf_GetRatio((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHGearIf_GetRatio((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHGearIf_GetRatio((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetOffset(double offset) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) offset);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) offset);
					},
					() => {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) offset);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) offset);
						});
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) offset);
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) offset);
					} else {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) offset);
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) offset);
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) offset);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGearIf_SetOffset((IntPtr) _thisArray[0], (double) offset);
		}
	}
	public double GetOffset() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHGearIf_GetOffset((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHGearIf_GetOffset((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHGearIf_GetOffset((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMode(int mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHGearIf_SetMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public int GetMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHGearIf_GetMode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHGearIf_GetMode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHGearIf_GetMode((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PH1DJointLimitIf : SceneObjectIf {
	public PH1DJointLimitIf() { _thisArray[0] = SprExport.Spr_new_PH1DJointLimitIf(); _flag = true; }
	public PH1DJointLimitIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointLimitIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointLimitIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointLimitIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PH1DJointLimitIf(CsCastObject target) {
		return (target._info.Inherit(PH1DJointLimitIf.GetIfInfoStatic()) ? new PH1DJointLimitIf(target._thisArray[0], target._flag) : null);
	}
	~PH1DJointLimitIf() { if (_flag) { SprExport.Spr_delete_PH1DJointLimitIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PH1DJointLimitIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PH1DJointLimitIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointLimitIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PH1DJointLimitIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointLimitIf_SetRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointLimitIf_GetRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PH1DJointLimitIf_GetRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PH1DJointLimitIf_GetRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
	public void SetSpring(double spring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
					},
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
						});
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					} else {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) spring);
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) spring);
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) spring);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointLimitIf_SetSpring((IntPtr) _thisArray[0], (double) spring);
		}
	}
	public double GetSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointLimitIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointLimitIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointLimitIf_GetSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDamper(double damper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
					},
					() => {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
						});
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					} else {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) damper);
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) damper);
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) damper);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointLimitIf_SetDamper((IntPtr) _thisArray[0], (double) damper);
		}
	}
	public double GetDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PH1DJointLimitIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PH1DJointLimitIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PH1DJointLimitIf_GetDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool IsOnLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PH1DJointLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PH1DJointLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointLimitIf_IsOnLimit((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void Enable(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointLimitIf_Enable((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PH1DJointLimitIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PH1DJointLimitIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PH1DJointLimitIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBallJointLimitIf : SceneObjectIf {
	public PHBallJointLimitIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointLimitIf(); _flag = true; }
	public PHBallJointLimitIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointLimitIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointLimitIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointLimitIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointLimitIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointLimitIf.GetIfInfoStatic()) ? new PHBallJointLimitIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointLimitIf() { if (_flag) { SprExport.Spr_delete_PHBallJointLimitIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointLimitIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointLimitIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointLimitIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointLimitIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetSpring(double rSpring) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rSpring);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rSpring);
					},
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rSpring);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rSpring);
						});
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rSpring);
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rSpring);
					} else {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rSpring);
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rSpring);
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rSpring);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointLimitIf_SetSpring((IntPtr) _thisArray[0], (double) rSpring);
		}
	}
	public double GetSpring() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointLimitIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointLimitIf_GetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointLimitIf_GetSpring((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetDamper(double rDamper) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rDamper);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rDamper);
					},
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rDamper);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rDamper);
						});
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rDamper);
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rDamper);
					} else {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rDamper);
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rDamper);
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rDamper);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointLimitIf_SetDamper((IntPtr) _thisArray[0], (double) rDamper);
		}
	}
	public double GetDamper() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHBallJointLimitIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHBallJointLimitIf_GetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHBallJointLimitIf_GetDamper((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetLimitDir(Vec3d limDir) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_limDir = new Vec3d(limDir);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_limDir);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_limDir);
					},
					() => {
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_limDir);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_limDir = new Vec3d(limDir);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_limDir);
						});
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_limDir);
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_limDir);
					} else {
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) limDir);
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) limDir);
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) limDir);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointLimitIf_SetLimitDir((IntPtr) _thisArray[0], (IntPtr) limDir);
		}
	}
	public Vec3d GetLimitDir() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointLimitIf_GetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointLimitIf_GetLimitDir((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointLimitIf_GetLimitDir((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public bool IsOnLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBallJointLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHBallJointLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointLimitIf_IsOnLimit((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void Enable(bool b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
					},
					() => {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
						});
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					} else {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) b);
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) b);
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointLimitIf_Enable((IntPtr) _thisArray[0], (bool) b);
		}
	}
	public bool IsEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBallJointLimitIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHBallJointLimitIf_IsEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointLimitIf_IsEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBallJointConeLimitIf : PHBallJointLimitIf {
	public PHBallJointConeLimitIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointConeLimitIf(); _flag = true; }
	public PHBallJointConeLimitIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointConeLimitIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointConeLimitIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointConeLimitIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointConeLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointConeLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointConeLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointConeLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointConeLimitIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointConeLimitIf.GetIfInfoStatic()) ? new PHBallJointConeLimitIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointConeLimitIf() { if (_flag) { SprExport.Spr_delete_PHBallJointConeLimitIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointConeLimitIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointConeLimitIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointConeLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointConeLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointConeLimitIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointConeLimitIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetSwingRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetSwingRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
	public void SetSwingDirRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetSwingDirRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetSwingDirRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingDirRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_GetSwingDirRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
	public void SetTwistRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_SetTwistRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetTwistRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointConeLimitIf_GetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBallJointConeLimitIf_GetTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHBallJointConeLimitIf_GetTwistRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBallJointSplineLimitIf : PHBallJointLimitIf {
	public PHBallJointSplineLimitIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointSplineLimitIf(); _flag = true; }
	public PHBallJointSplineLimitIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointSplineLimitIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointSplineLimitIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointSplineLimitIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointSplineLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointSplineLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointSplineLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointSplineLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointSplineLimitIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointSplineLimitIf.GetIfInfoStatic()) ? new PHBallJointSplineLimitIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointSplineLimitIf() { if (_flag) { SprExport.Spr_delete_PHBallJointSplineLimitIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointSplineLimitIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointSplineLimitIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointSplineLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointSplineLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointSplineLimitIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointSplineLimitIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void AddNode(PHSplineLimitNode node) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHSplineLimitNode new_node = new PHSplineLimitNode(node);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_node);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_node);
					},
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_node);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
PHSplineLimitNode new_node = new PHSplineLimitNode(node);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_node);
						});
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_node);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_node);
					} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) node);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) node);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) node);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode((IntPtr) _thisArray[0], (IntPtr) node);
		}
	}
	public void AddNode(double S, double SD, double dS, double dSD, double tMin, double tMax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
					},
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
						});
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
					} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_1((IntPtr) _thisArray[0], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax);
		}
	}
	public void AddNode(PHSplineLimitNode node, int pos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHSplineLimitNode new_node = new PHSplineLimitNode(node);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_node, (int) pos);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_node, (int) pos);
					},
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_node, (int) pos);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
PHSplineLimitNode new_node = new PHSplineLimitNode(node);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_node, (int) pos);
						});
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_node, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_node, (int) pos);
					} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) node, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) node, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) node, (int) pos);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_2((IntPtr) _thisArray[0], (IntPtr) node, (int) pos);
		}
	}
	public void AddNode(double S, double SD, double dS, double dSD, double tMin, double tMax, int pos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
					},
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
						});
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
					} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_AddNode_3((IntPtr) _thisArray[0], (double) S, (double) SD, (double) dS, (double) dSD, (double) tMin, (double) tMax, (int) pos);
		}
	}
	public void SetPoleTwistRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_range);
						});
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_range);
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) range);
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_SetPoleTwistRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
	}
	public void GetPoleTwistRange(Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointSplineLimitIf_GetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBallJointSplineLimitIf_GetPoleTwistRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHBallJointSplineLimitIf_GetPoleTwistRange((IntPtr) _thisArray[0], (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBallJointIndependentLimitIf : PHBallJointLimitIf {
	public PHBallJointIndependentLimitIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointIndependentLimitIf(); _flag = true; }
	public PHBallJointIndependentLimitIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointIndependentLimitIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointIndependentLimitIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointIndependentLimitIf.GetIfInfoStatic()) ? new PHBallJointIndependentLimitIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointIndependentLimitIf() { if (_flag) { SprExport.Spr_delete_PHBallJointIndependentLimitIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointIndependentLimitIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointIndependentLimitIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointIndependentLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointIndependentLimitIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointIndependentLimitIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointIndependentLimitIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public bool IsOnLimit() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHBallJointIndependentLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHBallJointIndependentLimitIf_IsOnLimit((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHBallJointIndependentLimitIf_IsOnLimit((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public int AxesEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    int resultBuffer = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    int resultGet = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    int resultStep = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    int resultBuffer = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    int resultGet = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
					} else {
	    int resultStep = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    int resultBuffer = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    int resultGet = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
					}
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHBallJointIndependentLimitIf_AxesEnabled((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetLimitRangeN(int n, Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) new_range);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) new_range);
					},
					() => {
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) new_range);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec2d new_range = new Vec2d(range);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) new_range);
						});
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) new_range);
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) new_range);
					} else {
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) range);
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (IntPtr) range);
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) range);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIndependentLimitIf_SetLimitRangeN((IntPtr) _thisArray[0], (int) n, (IntPtr) range);
		}
	}
	public void GetLimitRangeN(int n, Vec2d range) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBallJointIndependentLimitIf_GetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (IntPtr) range);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    SprExport.Spr_PHBallJointIndependentLimitIf_GetLimitRangeN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (IntPtr) range);
				}
			}
		} else {
	    SprExport.Spr_PHBallJointIndependentLimitIf_GetLimitRangeN((IntPtr) _thisArray[0], (int) n, (IntPtr) range);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PH1DJointMotorIf : SceneObjectIf {
	public PH1DJointMotorIf() { _thisArray[0] = SprExport.Spr_new_PH1DJointMotorIf(); _flag = true; }
	public PH1DJointMotorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointMotorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointMotorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointMotorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PH1DJointMotorIf(CsCastObject target) {
		return (target._info.Inherit(PH1DJointMotorIf.GetIfInfoStatic()) ? new PH1DJointMotorIf(target._thisArray[0], target._flag) : null);
	}
	~PH1DJointMotorIf() { if (_flag) { SprExport.Spr_delete_PH1DJointMotorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PH1DJointMotorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PH1DJointMotorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointMotorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PH1DJointMotorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PH1DJointNonLinearMotorIf : PH1DJointMotorIf {
	public PH1DJointNonLinearMotorIf() { _thisArray[0] = SprExport.Spr_new_PH1DJointNonLinearMotorIf(); _flag = true; }
	public PH1DJointNonLinearMotorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PH1DJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PH1DJointNonLinearMotorIf(CsCastObject target) {
		return (target._info.Inherit(PH1DJointNonLinearMotorIf.GetIfInfoStatic()) ? new PH1DJointNonLinearMotorIf(target._thisArray[0], target._flag) : null);
	}
	~PH1DJointNonLinearMotorIf() { if (_flag) { SprExport.Spr_delete_PH1DJointNonLinearMotorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PH1DJointNonLinearMotorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PH1DJointNonLinearMotorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PH1DJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PH1DJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PH1DJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PH1DJointNonLinearMotorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetSpring(PH1DJointNonLinearMotorDesc.FunctionMode m, CsObject param) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
// is_void_ptr
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
					},
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
						});
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
					} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpring((IntPtr) _thisArray[0], (int) m, (IntPtr) param);
		}
	}
	public void SetDamper(PH1DJointNonLinearMotorDesc.FunctionMode m, CsObject param) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
// is_void_ptr
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
					},
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
						});
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
					} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) m, (IntPtr) param);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) m, (IntPtr) param);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetDamper((IntPtr) _thisArray[0], (int) m, (IntPtr) param);
		}
	}
	public void SetSpringDamper(PH1DJointNonLinearMotorDesc.FunctionMode smode, PH1DJointNonLinearMotorDesc.FunctionMode dmode, CsObject sparam, CsObject dparam) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
// is_struct
// is_void_ptr
// is_void_ptr
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
					},
					() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
// is_struct
// is_void_ptr
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
						});
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
					} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
					}
				}
			}
		} else {
	    SprExport.Spr_PH1DJointNonLinearMotorIf_SetSpringDamper((IntPtr) _thisArray[0], (int) smode, (int) dmode, (IntPtr) sparam, (IntPtr) dparam);
		}
	}
    }
    public partial class PHHuman1DJointResistanceIf : PH1DJointNonLinearMotorIf {
	public PHHuman1DJointResistanceIf() { _thisArray[0] = SprExport.Spr_new_PHHuman1DJointResistanceIf(); _flag = true; }
	public PHHuman1DJointResistanceIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHuman1DJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHuman1DJointResistanceIf(CsCastObject target) {
		return (target._info.Inherit(PHHuman1DJointResistanceIf.GetIfInfoStatic()) ? new PHHuman1DJointResistanceIf(target._thisArray[0], target._flag) : null);
	}
	~PHHuman1DJointResistanceIf() { if (_flag) { SprExport.Spr_delete_PHHuman1DJointResistanceIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHuman1DJointResistanceIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHuman1DJointResistanceIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHuman1DJointResistanceIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHuman1DJointResistanceIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHuman1DJointResistanceIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHuman1DJointResistanceIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public double GetCurrentResistance() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHHuman1DJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHHuman1DJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHHuman1DJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHBallJointMotorIf : SceneObjectIf {
	public PHBallJointMotorIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointMotorIf(); _flag = true; }
	public PHBallJointMotorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointMotorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointMotorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointMotorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointMotorIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointMotorIf.GetIfInfoStatic()) ? new PHBallJointMotorIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointMotorIf() { if (_flag) { SprExport.Spr_delete_PHBallJointMotorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointMotorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointMotorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointMotorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointMotorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHBallJointNonLinearMotorIf : PHBallJointMotorIf {
	public PHBallJointNonLinearMotorIf() { _thisArray[0] = SprExport.Spr_new_PHBallJointNonLinearMotorIf(); _flag = true; }
	public PHBallJointNonLinearMotorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBallJointNonLinearMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBallJointNonLinearMotorIf(CsCastObject target) {
		return (target._info.Inherit(PHBallJointNonLinearMotorIf.GetIfInfoStatic()) ? new PHBallJointNonLinearMotorIf(target._thisArray[0], target._flag) : null);
	}
	~PHBallJointNonLinearMotorIf() { if (_flag) { SprExport.Spr_delete_PHBallJointNonLinearMotorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBallJointNonLinearMotorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBallJointNonLinearMotorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBallJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBallJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBallJointNonLinearMotorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBallJointNonLinearMotorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetFuncFromDatabaseN(int n, int i, int j, CsObject sparam, CsObject dparam) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_void_ptr
// is_void_ptr
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
					},
					() => {
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_void_ptr
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
						});
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
					} else {
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBallJointNonLinearMotorIf_SetFuncFromDatabaseN((IntPtr) _thisArray[0], (int) n, (int) i, (int) j, (IntPtr) sparam, (IntPtr) dparam);
		}
	}
    }
    public partial class PHHumanBallJointResistanceIf : PHBallJointNonLinearMotorIf {
	public PHHumanBallJointResistanceIf() { _thisArray[0] = SprExport.Spr_new_PHHumanBallJointResistanceIf(); _flag = true; }
	public PHHumanBallJointResistanceIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHHumanBallJointResistanceIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHHumanBallJointResistanceIf(CsCastObject target) {
		return (target._info.Inherit(PHHumanBallJointResistanceIf.GetIfInfoStatic()) ? new PHHumanBallJointResistanceIf(target._thisArray[0], target._flag) : null);
	}
	~PHHumanBallJointResistanceIf() { if (_flag) { SprExport.Spr_delete_PHHumanBallJointResistanceIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHHumanBallJointResistanceIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHHumanBallJointResistanceIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHumanBallJointResistanceIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHumanBallJointResistanceIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHumanBallJointResistanceIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHHumanBallJointResistanceIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public Vec3d GetCurrentResistance() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHHumanBallJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHHumanBallJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHHumanBallJointResistanceIf_GetCurrentResistance((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHSpringMotorIf : SceneObjectIf {
	public PHSpringMotorIf() { _thisArray[0] = SprExport.Spr_new_PHSpringMotorIf(); _flag = true; }
	public PHSpringMotorIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSpringMotorIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSpringMotorIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSpringMotorIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSpringMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSpringMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSpringMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSpringMotorIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSpringMotorIf(CsCastObject target) {
		return (target._info.Inherit(PHSpringMotorIf.GetIfInfoStatic()) ? new PHSpringMotorIf(target._thisArray[0], target._flag) : null);
	}
	~PHSpringMotorIf() { if (_flag) { SprExport.Spr_delete_PHSpringMotorIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSpringMotorIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSpringMotorIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSpringMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSpringMotorIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSpringMotorIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSpringMotorIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
    }
    public partial class PHOpObjIf : SceneObjectIf {
	public PHOpObjIf() { _thisArray[0] = SprExport.Spr_new_PHOpObjIf(); _flag = true; }
	public PHOpObjIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpObjIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpObjIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpObjIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpObjIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpObjIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpObjIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpObjIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpObjIf(CsCastObject target) {
		return (target._info.Inherit(PHOpObjIf.GetIfInfoStatic()) ? new PHOpObjIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpObjIf() { if (_flag) { SprExport.Spr_delete_PHOpObjIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpObjIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpObjIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpObjIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpObjIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpObjIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpObjIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public bool initialPHOpObj(Vec3f vts, int vtsNum, float pSize) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    char retStep = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) vts, (int) vtsNum, (float) pSize);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) vts, (int) vtsNum, (float) pSize);
					},
					() => {
	    char retGet = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) vts, (int) vtsNum, (float) pSize);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) vts, (int) vtsNum, (float) pSize);
						});
	    char retBuffer = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    char retGet = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    char retBuffer = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    char retGet = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpObjIf_initialPHOpObj((IntPtr) _thisArray[0], (IntPtr) vts, (int) vtsNum, (float) pSize);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetGravity(bool bOn) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
						});
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					} else {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bOn);
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bOn);
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bOn);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetGravity((IntPtr) _thisArray[0], (bool) bOn);
		}
	}
	public void SimpleSimulationStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SimpleSimulationStep((IntPtr) _thisArray[0]);
		}
	}
	public void AddVertextoLocalBuffer(Vec3f v) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_v = new Vec3f(v);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_v = new Vec3f(v);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_v);
						});
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_v);
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_v);
					} else {
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) v);
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) v);
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) v);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_AddVertextoLocalBuffer((IntPtr) _thisArray[0], (IntPtr) v);
		}
	}
	public bool InitialObjUsingLocalBuffer(float pSize) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) pSize);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) pSize);
					},
					() => {
	    char retGet = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) pSize);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) pSize);
						});
	    char retBuffer = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) pSize);
	    char retGet = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) pSize);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) pSize);
	    char retBuffer = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) pSize);
	    char retGet = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) pSize);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpObjIf_InitialObjUsingLocalBuffer((IntPtr) _thisArray[0], (float) pSize);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void positionPredict() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_positionPredict((IntPtr) _thisArray[0]);
		}
	}
	public void groupStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_groupStep((IntPtr) _thisArray[0]);
		}
	}
	public void integrationStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_integrationStep((IntPtr) _thisArray[0]);
		}
	}
	public void ReducedPositionProject() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_ReducedPositionProject((IntPtr) _thisArray[0]);
		}
	}
	public void positionProject() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_positionProject((IntPtr) _thisArray[0]);
		}
	}
	public void SetDefaultLinkNum(int linkNum) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) linkNum);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) linkNum);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) linkNum);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) linkNum);
						});
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) linkNum);
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) linkNum);
					} else {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) linkNum);
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) linkNum);
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) linkNum);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetDefaultLinkNum((IntPtr) _thisArray[0], (int) linkNum);
		}
	}
	public void BuildBlendWeight() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_BuildBlendWeight((IntPtr) _thisArray[0]);
		}
	}
	public void buildGroupCenter() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_buildGroupCenter((IntPtr) _thisArray[0]);
		}
	}
	public int GetVertexNum() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpObjIf_GetVertexNum((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHOpObjIf_GetVertexNum((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpObjIf_GetVertexNum((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public Vec3f GetVertex(int vi) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpObjIf_GetVertex((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vi);
            return new Vec3f(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpObjIf_GetVertex((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vi);
            return new Vec3f(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpObjIf_GetVertex((IntPtr) _thisArray[0], (int) vi);
            return new Vec3f(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public ObjectIf GetOpParticle(int pi) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpObjIf_GetOpParticle((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) pi);
            if (ptrStep == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpObjIf_GetOpParticle((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) pi);
            if (ptrGet == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpObjIf_GetOpParticle((IntPtr) _thisArray[0], (int) pi);
            if (ptr == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptr, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public ObjectIf GetOpGroup(int gi) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpObjIf_GetOpGroup((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) gi);
            if (ptrStep == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrStep, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpObjIf_GetOpGroup((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) gi);
            if (ptrGet == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptrGet, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpObjIf_GetOpGroup((IntPtr) _thisArray[0], (int) gi);
            if (ptr == IntPtr.Zero) { return null; } 
            ObjectIf obj = new ObjectIf(ptr, 0);
            if (obj.GetIfInfo() == PHSolidPairIf.GetIfInfoStatic()) {
				PHSolidPairIf appropriate_type = new PHSolidPairIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpParticleIf.GetIfInfoStatic()) {
				PHOpParticleIf appropriate_type = new PHOpParticleIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpGroupIf.GetIfInfoStatic()) {
				PHOpGroupIf appropriate_type = new PHOpGroupIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpSpHashColliAgentIf.GetIfInfoStatic()) {
				PHOpSpHashColliAgentIf appropriate_type = new PHOpSpHashColliAgentIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForLCPIf.GetIfInfoStatic()) {
				PHSolidPairForLCPIf appropriate_type = new PHSolidPairForLCPIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSolidPairForHapticIf.GetIfInfoStatic()) {
				PHSolidPairForHapticIf appropriate_type = new PHSolidPairForHapticIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int GetobjVtoPmap(int vi) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpObjIf_GetobjVtoPmap((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) vi);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHOpObjIf_GetobjVtoPmap((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) vi);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpObjIf_GetobjVtoPmap((IntPtr) _thisArray[0], (int) vi);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public float GetVtxBlendWeight(int Vtxi, int Grpi) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetVtxBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) Vtxi, (int) Grpi);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetVtxBlendWeight((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) Vtxi, (int) Grpi);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetVtxBlendWeight((IntPtr) _thisArray[0], (int) Vtxi, (int) Grpi);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetVelocityDamping(float vd) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) vd);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) vd);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) vd);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) vd);
						});
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) vd);
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) vd);
					} else {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) vd);
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) vd);
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) vd);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetVelocityDamping((IntPtr) _thisArray[0], (float) vd);
		}
	}
	public float GetVelocityDamping() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetVelocityDamping((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetVelocityDamping((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public float GetBoundLength() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetBoundLength((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetBoundLength((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetBoundLength((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetBound(float b) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) b);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) b);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) b);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) b);
						});
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) b);
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) b);
					} else {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) b);
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) b);
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) b);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetBound((IntPtr) _thisArray[0], (float) b);
		}
	}
	public void SetTimeStep(float t) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) t);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) t);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) t);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) t);
						});
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) t);
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) t);
					} else {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) t);
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) t);
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) t);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetTimeStep((IntPtr) _thisArray[0], (float) t);
		}
	}
	public float GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public float GetObjBeta() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetObjBeta((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetObjBeta(float beta) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) beta);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) beta);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) beta);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) beta);
						});
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) beta);
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) beta);
					} else {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) beta);
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) beta);
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) beta);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetObjBeta((IntPtr) _thisArray[0], (float) beta);
		}
	}
	public void SetObjAlpha(float alpha) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) alpha);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) alpha);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) alpha);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) alpha);
						});
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) alpha);
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) alpha);
					} else {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) alpha);
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) alpha);
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) alpha);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetObjAlpha((IntPtr) _thisArray[0], (float) alpha);
		}
	}
	public float GetObjAlpha() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpObjIf_GetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpObjIf_GetObjAlpha((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpObjIf_GetObjAlpha((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public bool GetObjDstConstraint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpObjIf_GetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpObjIf_GetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpObjIf_GetObjDstConstraint((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetObjDstConstraint(bool d) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) d);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) d);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) d);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) d);
						});
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) d);
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) d);
					} else {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) d);
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) d);
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) d);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetObjDstConstraint((IntPtr) _thisArray[0], (bool) d);
		}
	}
	public void SetObjItrTime(int itrT) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) itrT);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) itrT);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) itrT);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) itrT);
						});
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) itrT);
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) itrT);
					} else {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) itrT);
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) itrT);
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) itrT);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_SetObjItrTime((IntPtr) _thisArray[0], (int) itrT);
		}
	}
	public int GetObjItrTime() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHOpObjIf_GetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHOpObjIf_GetObjItrTime((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHOpObjIf_GetObjItrTime((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void StoreOrigPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpObjIf_StoreOrigPose((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHOpParticleIf : ObjectIf {
	public PHOpParticleIf() { _thisArray[0] = SprExport.Spr_new_PHOpParticleIf(); _flag = true; }
	public PHOpParticleIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpParticleIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpParticleIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpParticleIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpParticleIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpParticleIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpParticleIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpParticleIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpParticleIf(CsCastObject target) {
		return (target._info.Inherit(PHOpParticleIf.GetIfInfoStatic()) ? new PHOpParticleIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpParticleIf() { if (_flag) { SprExport.Spr_delete_PHOpParticleIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpParticleIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpParticleIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHOpParticleIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpParticleIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int GetOpPtclVtxId(int vi) {
	    int result = (int) SprExport.Spr_PHOpParticleIf_GetOpPtclVtxId((IntPtr) _thisArray[0], (int) vi);
	    return result;
	}
	public int GetinGrpListNum() {
	    int result = (int) SprExport.Spr_PHOpParticleIf_GetinGrpListNum((IntPtr) _thisArray[0]);
	    return result;
	}
	public int GetinGrpList(int gi) {
	    int result = (int) SprExport.Spr_PHOpParticleIf_GetinGrpList((IntPtr) _thisArray[0], (int) gi);
	    return result;
	}
	public float GetVtxDisWeight(int vi) {
	    float result = (float) SprExport.Spr_PHOpParticleIf_GetVtxDisWeight((IntPtr) _thisArray[0], (int) vi);
	    return result;
	}
	public arraywrapper_PHOpParticleDesc GetParticleDesc() {
	    IntPtr ptr = SprExport.Spr_PHOpParticleIf_GetParticleDesc((IntPtr) _thisArray[0]);
            return new arraywrapper_PHOpParticleDesc(ptr);
	}
    }
    public partial class PHOpGroupIf : ObjectIf {
	public PHOpGroupIf() { _thisArray[0] = SprExport.Spr_new_PHOpGroupIf(); _flag = true; }
	public PHOpGroupIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpGroupIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpGroupIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpGroupIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpGroupIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpGroupIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpGroupIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpGroupIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpGroupIf(CsCastObject target) {
		return (target._info.Inherit(PHOpGroupIf.GetIfInfoStatic()) ? new PHOpGroupIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpGroupIf() { if (_flag) { SprExport.Spr_delete_PHOpGroupIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpGroupIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpGroupIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHOpGroupIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpGroupIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int GetGrpInPtclNum() {
	    int result = (int) SprExport.Spr_PHOpGroupIf_GetGrpInPtclNum((IntPtr) _thisArray[0]);
	    return result;
	}
	public int GetGrpInPtcl(int gi) {
	    int result = (int) SprExport.Spr_PHOpGroupIf_GetGrpInPtcl((IntPtr) _thisArray[0], (int) gi);
	    return result;
	}
	public arraywrapper_PHOpGroupDesc GetGroupDesc() {
	    IntPtr ptr = SprExport.Spr_PHOpGroupIf_GetGroupDesc((IntPtr) _thisArray[0]);
            return new arraywrapper_PHOpGroupDesc(ptr);
	}
    }
    public partial class PHOpHapticControllerIf : SceneObjectIf {
	public PHOpHapticControllerIf() { _thisArray[0] = SprExport.Spr_new_PHOpHapticControllerIf(); _flag = true; }
	public PHOpHapticControllerIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpHapticControllerIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpHapticControllerIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpHapticControllerIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpHapticControllerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpHapticControllerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpHapticControllerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpHapticControllerIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpHapticControllerIf(CsCastObject target) {
		return (target._info.Inherit(PHOpHapticControllerIf.GetIfInfoStatic()) ? new PHOpHapticControllerIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpHapticControllerIf() { if (_flag) { SprExport.Spr_delete_PHOpHapticControllerIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpHapticControllerIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticControllerIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticControllerIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetHCForceReady(bool flag) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
						});
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) flag);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) flag);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) flag);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCForceReady((IntPtr) _thisArray[0], (bool) flag);
		}
	}
	public bool GetHCForceReady() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_GetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_GetHCForceReady((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpHapticControllerIf_GetHCForceReady((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public bool CheckProxyState() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpHapticControllerIf_CheckProxyState((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void AddColliedPtcl(int pIndex, int objindex, Vec3f ctcPos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_ctcPos = new Vec3f(ctcPos);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_ctcPos = new Vec3f(ctcPos);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
						});
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) pIndex, (int) objindex, (IntPtr) new_ctcPos);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) pIndex, (int) objindex, (IntPtr) ctcPos);
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) pIndex, (int) objindex, (IntPtr) ctcPos);
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) pIndex, (int) objindex, (IntPtr) ctcPos);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_AddColliedPtcl((IntPtr) _thisArray[0], (int) pIndex, (int) objindex, (IntPtr) ctcPos);
		}
	}
	public bool BeginLogForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpHapticControllerIf_BeginLogForce((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EndLogForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_EndLogForce((IntPtr) _thisArray[0]);
		}
	}
	public void setC_ObstacleRadius(float r) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
						});
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForStep], (float) r);
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (float) r);
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForGet], (float) r);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_setC_ObstacleRadius((IntPtr) _thisArray[0], (float) r);
		}
	}
	public Vec3f GetUserPos() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticControllerIf_GetUserPos((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3f(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticControllerIf_GetUserPos((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3f(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetUserPos((IntPtr) _thisArray[0]);
            return new Vec3f(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public Vec3f GetHCPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticControllerIf_GetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3f(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticControllerIf_GetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3f(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetHCPosition((IntPtr) _thisArray[0]);
            return new Vec3f(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetHCPosition(Vec3f pos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_pos = new Vec3f(pos);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pos);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pos);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pos);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_pos = new Vec3f(pos);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pos);
						});
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pos);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pos);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pos);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pos);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pos);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPosition((IntPtr) _thisArray[0], (IntPtr) pos);
		}
	}
	public void SetHCPose(Posef pose) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Posef new_pose = new Posef(pose);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
					},
					() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Posef new_pose = new Posef(pose);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pose);
						});
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pose);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pose);
					} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pose);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pose);
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pose);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticControllerIf_SetHCPose((IntPtr) _thisArray[0], (IntPtr) pose);
		}
	}
	public Posef GetHCPose() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticControllerIf_GetHCPose((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Posef(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticControllerIf_GetHCPose((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Posef(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetHCPose((IntPtr) _thisArray[0]);
            return new Posef(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public float GetC_ObstacleRadius() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHOpHapticControllerIf_GetC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHOpHapticControllerIf_GetC_ObstacleRadius((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHOpHapticControllerIf_GetC_ObstacleRadius((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public Vec3f GetCurrentOutputForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticControllerIf_GetCurrentOutputForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3f(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticControllerIf_GetCurrentOutputForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3f(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticControllerIf_GetCurrentOutputForce((IntPtr) _thisArray[0]);
            return new Vec3f(ptr, true);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHOpHapticRendererIf : SceneObjectIf {
	public PHOpHapticRendererIf() { _thisArray[0] = SprExport.Spr_new_PHOpHapticRendererIf(); _flag = true; }
	public PHOpHapticRendererIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpHapticRendererIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpHapticRendererIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpHapticRendererIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpHapticRendererIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpHapticRendererIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpHapticRendererIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpHapticRendererIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpHapticRendererIf(CsCastObject target) {
		return (target._info.Inherit(PHOpHapticRendererIf.GetIfInfoStatic()) ? new PHOpHapticRendererIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpHapticRendererIf() { if (_flag) { SprExport.Spr_delete_PHOpHapticRendererIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpHapticRendererIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpHapticRendererIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpHapticRendererIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpHapticRendererIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpHapticRendererIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpHapticRendererIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetRigid(bool set) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) set);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) set);
					},
					() => {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) set);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) set);
						});
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) set);
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) set);
					} else {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) set);
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) set);
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) set);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpHapticRendererIf_SetRigid((IntPtr) _thisArray[0], (bool) set);
		}
	}
	public bool IsRigid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHOpHapticRendererIf_IsRigid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHOpHapticRendererIf_IsRigid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHOpHapticRendererIf_IsRigid((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHOpAnimationIf : SceneObjectIf {
	public PHOpAnimationIf() { _thisArray[0] = SprExport.Spr_new_PHOpAnimationIf(); _flag = true; }
	public PHOpAnimationIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpAnimationIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpAnimationIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpAnimationIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpAnimationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpAnimationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpAnimationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpAnimationIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpAnimationIf(CsCastObject target) {
		return (target._info.Inherit(PHOpAnimationIf.GetIfInfoStatic()) ? new PHOpAnimationIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpAnimationIf() { if (_flag) { SprExport.Spr_delete_PHOpAnimationIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpAnimationIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpAnimationIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHOpAnimationIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHOpAnimationIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHOpAnimationIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpAnimationIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void AddAnimationP(int objIndex, int pIndex, Vec3f start, Vec3f end, float totalTime) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_start = new Vec3f(start);
// NewArgument equal 8 8
// is_struct
Vec3f new_end = new Vec3f(end);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
					},
					() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_start = new Vec3f(start);
// NewArgument equal 8 8
// is_struct
Vec3f new_end = new Vec3f(end);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
						});
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) new_start, (IntPtr) new_end, (float) totalTime);
					} else {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) start, (IntPtr) end, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) start, (IntPtr) end, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) start, (IntPtr) end, (float) totalTime);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP((IntPtr) _thisArray[0], (int) objIndex, (int) pIndex, (IntPtr) start, (IntPtr) end, (float) totalTime);
		}
	}
	public void AddAnimationP(int objIndex, int pIndex, Vec3f force, float totalTime) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_force = new Vec3f(force);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
					},
					() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_force = new Vec3f(force);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
						});
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) new_force, (float) totalTime);
					} else {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) objIndex, (int) pIndex, (IntPtr) force, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) objIndex, (int) pIndex, (IntPtr) force, (float) totalTime);
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) objIndex, (int) pIndex, (IntPtr) force, (float) totalTime);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpAnimationIf_AddAnimationP_1((IntPtr) _thisArray[0], (int) objIndex, (int) pIndex, (IntPtr) force, (float) totalTime);
		}
	}
	public void AnimationStep(CsObject opEngine) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_void_ptr
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
					},
					() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
						});
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
					} else {
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpAnimationIf_AnimationStep((IntPtr) _thisArray[0], (IntPtr) opEngine);
		}
	}
	public void AnimationIntergration(CsObject opEngine) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_void_ptr
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
					},
					() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_void_ptr
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
						});
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
					} else {
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) opEngine);
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) opEngine);
					}
				}
			}
		} else {
	    SprExport.Spr_PHOpAnimationIf_AnimationIntergration((IntPtr) _thisArray[0], (IntPtr) opEngine);
		}
	}
    }
    public partial class PHOpSpHashColliAgentIf : ObjectIf {
	public PHOpSpHashColliAgentIf() { _thisArray[0] = SprExport.Spr_new_PHOpSpHashColliAgentIf(); _flag = true; }
	public PHOpSpHashColliAgentIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHOpSpHashColliAgentIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHOpSpHashColliAgentIf(CsCastObject target) {
		return (target._info.Inherit(PHOpSpHashColliAgentIf.GetIfInfoStatic()) ? new PHOpSpHashColliAgentIf(target._thisArray[0], target._flag) : null);
	}
	~PHOpSpHashColliAgentIf() { if (_flag) { SprExport.Spr_delete_PHOpSpHashColliAgentIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHOpSpHashColliAgentIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHOpSpHashColliAgentIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHOpSpHashColliAgentIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHOpSpHashColliAgentIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetCollisionCstrStiffness(float alpha) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_SetCollisionCstrStiffness((IntPtr) _thisArray[0], (float) alpha);
	}
	public float GetCollisionCstrStiffness() {
	    float result = (float) SprExport.Spr_PHOpSpHashColliAgentIf_GetCollisionCstrStiffness((IntPtr) _thisArray[0]);
	    return result;
	}
	public void EnableCollisionDetection(bool able) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_EnableCollisionDetection((IntPtr) _thisArray[0], (bool) able);
	}
	public void EnableCollisionDetection() {
	    SprExport.Spr_PHOpSpHashColliAgentIf_EnableCollisionDetection_1((IntPtr) _thisArray[0]);
	}
	public void Initial(float cellSize, CDBounds bounds) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_Initial((IntPtr) _thisArray[0], (float) cellSize, (IntPtr) bounds);
	}
	public void OpCollisionProcedure(int myTimeStamp) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_OpCollisionProcedure((IntPtr) _thisArray[0], (int) myTimeStamp);
	}
	public void OpCollisionProcedure() {
	    SprExport.Spr_PHOpSpHashColliAgentIf_OpCollisionProcedure_1((IntPtr) _thisArray[0]);
	}
	public void OpDirCollision() {
	    SprExport.Spr_PHOpSpHashColliAgentIf_OpDirCollision((IntPtr) _thisArray[0]);
	}
	public void AddContactPlane(Vec3f planeP, Vec3f planeN) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_AddContactPlane((IntPtr) _thisArray[0], (IntPtr) planeP, (IntPtr) planeN);
	}
	public bool IsCollisionEnabled() {
	    char ret = SprExport.Spr_PHOpSpHashColliAgentIf_IsCollisionEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
	}
	public void SetIsDirCollision(bool flag) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_SetIsDirCollision((IntPtr) _thisArray[0], (bool) flag);
	}
	public bool GetIsDirCollision() {
	    char ret = SprExport.Spr_PHOpSpHashColliAgentIf_GetIsDirCollision((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
	}
	public void SetDebugMode(bool flag) {
	    SprExport.Spr_PHOpSpHashColliAgentIf_SetDebugMode((IntPtr) _thisArray[0], (bool) flag);
	}
	public bool GetDebugMode() {
	    char ret = SprExport.Spr_PHOpSpHashColliAgentIf_GetDebugMode((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
	}
    }
    public partial class PHRayIf : SceneObjectIf {
	public PHRayIf() { _thisArray[0] = SprExport.Spr_new_PHRayIf(); _flag = true; }
	public PHRayIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHRayIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHRayIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHRayIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHRayIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHRayIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHRayIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHRayIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHRayIf(CsCastObject target) {
		return (target._info.Inherit(PHRayIf.GetIfInfoStatic()) ? new PHRayIf(target._thisArray[0], target._flag) : null);
	}
	~PHRayIf() { if (_flag) { SprExport.Spr_delete_PHRayIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHRayIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHRayIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public Vec3d GetOrigin() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetOrigin((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetOrigin((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetOrigin((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetOrigin(Vec3d ori) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_ori = new Vec3d(ori);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
					},
					() => {
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_ori = new Vec3d(ori);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_ori);
						});
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_ori);
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_ori);
					} else {
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ori);
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ori);
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ori);
					}
				}
			}
		} else {
	    SprExport.Spr_PHRayIf_SetOrigin((IntPtr) _thisArray[0], (IntPtr) ori);
		}
	}
	public Vec3d GetDirection() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetDirection((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetDirection(Vec3d dir) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_dir = new Vec3d(dir);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_dir);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_dir);
					},
					() => {
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_dir);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_dir = new Vec3d(dir);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_dir);
						});
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_dir);
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_dir);
					} else {
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) dir);
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) dir);
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) dir);
					}
				}
			}
		} else {
	    SprExport.Spr_PHRayIf_SetDirection((IntPtr) _thisArray[0], (IntPtr) dir);
		}
	}
	public void Apply() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHRayIf_Apply((IntPtr) _thisArray[0]);
		}
	}
	public int NHits() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHRayIf_NHits((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHRayIf_NHits((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHRayIf_NHits((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public arraywrapper_PHRaycastHit GetHits() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetHits((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new arraywrapper_PHRaycastHit(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetHits((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new arraywrapper_PHRaycastHit(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetHits((IntPtr) _thisArray[0]);
            return new arraywrapper_PHRaycastHit(ptr);
		}
		throw new InvalidOperationException();
	}
	public arraywrapper_PHRaycastHit GetNearest() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetNearest((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new arraywrapper_PHRaycastHit(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetNearest((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new arraywrapper_PHRaycastHit(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetNearest((IntPtr) _thisArray[0]);
            return new arraywrapper_PHRaycastHit(ptr);
		}
		throw new InvalidOperationException();
	}
	public arraywrapper_PHRaycastHit GetDynamicalNearest() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHRayIf_GetDynamicalNearest((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new arraywrapper_PHRaycastHit(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHRayIf_GetDynamicalNearest((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new arraywrapper_PHRaycastHit(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHRayIf_GetDynamicalNearest((IntPtr) _thisArray[0]);
            return new arraywrapper_PHRaycastHit(ptr);
		}
		throw new InvalidOperationException();
	}
    }
    public partial class PHSceneIf : SceneIf {
	public PHSceneIf() { _thisArray[0] = SprExport.Spr_new_PHSceneIf(); _flag = true; }
	public PHSceneIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSceneIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSceneIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSceneIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSceneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSceneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSceneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSceneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSceneIf(CsCastObject target) {
		return (target._info.Inherit(PHSceneIf.GetIfInfoStatic()) ? new PHSceneIf(target._thisArray[0], target._flag) : null);
	}
	~PHSceneIf() { if (_flag) { SprExport.Spr_delete_PHSceneIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSceneIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSceneIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
// feature:only_cs_ignore GetSdk PHSdkIf 
	public PHSolidIf CreateSolid(PHSolidDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHSolidDesc new_desc = new PHSolidDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PHSolidDesc new_desc = new PHSolidDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
                            obj._thisArray[phSceneIf.sceneForBuffer] = ptrBuffer;
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
                            appropriate_type._thisArray[phSceneIf.sceneForStep] = ptrStep;
						});
				return appropriate_type;
                            } else {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
                            obj._thisArray[phSceneIf.sceneForStep] = ptrStep;
						});
                            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateSolid((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSolidIf CreateSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateSolid_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NSolids() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NSolids((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NSolids((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NSolids((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHSolidIf GetSolid(int idx) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) idx);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) idx);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetSolid((IntPtr) _thisArray[0], (int) idx);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int GetSolidIndex(PHSolidIf s) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_GetSolidIndex((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) s._thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_GetSolidIndex((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) s._thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_GetSolidIndex((IntPtr) _thisArray[0], (IntPtr) s._thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHSolidIf GetSolids() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetSolids((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetSolids((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetSolids((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NSolidPairs() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NSolidPairs((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NSolidPairs((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NSolidPairs((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHSolidPairForLCPIf GetSolidPair(int i, int j) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetSolidPair((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i, (int) j);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetSolidPair((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i, (int) j);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetSolidPair((IntPtr) _thisArray[0], (int) i, (int) j);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSolidPairForLCPIf GetSolidPair(PHSolidIf lhs, PHSolidIf rhs, bool bSwap) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetSolidPair_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (bool) bSwap);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetSolidPair_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (bool) bSwap);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetSolidPair_1((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0], (bool) bSwap);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidPairForLCPIf obj = new PHSolidPairForLCPIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetContactMode(PHSolidIf lhs, PHSolidIf rhs, PHSceneDesc.ContactMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
// is_struct
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0], (int) mode);
		}
	}
	public void SetContactMode(PHSolidIf lhs, PHSolidIf rhs) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_1((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0]);
		}
	}
	public void SetContactMode(PHSolidIf group, ulong length, PHSceneDesc.ContactMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// is_struct
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length, (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length, (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length, (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length, (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length, (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length, (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length, (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length, (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length, (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_2((IntPtr) _thisArray[0], (IntPtr) group._thisArray[0], (ulong) length, (int) mode);
		}
	}
	public void SetContactMode(PHSolidIf group, ulong length) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length);
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) group._thisArray[phSceneIf.sceneForStep], (ulong) length);
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) group._thisArray[phSceneIf.sceneForBuffer], (ulong) length);
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) group._thisArray[phSceneIf.sceneForGet], (ulong) length);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_3((IntPtr) _thisArray[0], (IntPtr) group._thisArray[0], (ulong) length);
		}
	}
	public void SetContactMode(PHSolidIf solid, PHSceneDesc.ContactMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// is_struct
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_4((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0], (int) mode);
		}
	}
	public void SetContactMode(PHSolidIf solid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_5((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0]);
		}
	}
	public void SetContactMode(PHSceneDesc.ContactMode mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// is_struct
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_6((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public void SetContactMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactMode_7((IntPtr) _thisArray[0]);
		}
	}
// feature:only_cs_ignore CreateJoint PHJointIf 
	public int NJoints() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NJoints((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NJoints((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NJoints((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHJointIf GetJoint(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetJoint((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptr, 0);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NContacts() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NContacts((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NContacts((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NContacts((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHContactPointIf GetContact(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetContact((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHContactPointIf obj = new PHContactPointIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetContact((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHContactPointIf obj = new PHContactPointIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetContact((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHContactPointIf obj = new PHContactPointIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NFemMeshes() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NFemMeshes((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NFemMeshes((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NFemMeshes((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHFemMeshIf GetFemMesh(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetFemMesh((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetFemMesh((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetFemMesh((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemMeshIf obj = new PHFemMeshIf(ptr, 0);
            if (obj.GetIfInfo() == PHFemMeshThermoIf.GetIfInfoStatic()) {
				PHFemMeshThermoIf appropriate_type = new PHFemMeshThermoIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NFemMeshesNew() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NFemMeshesNew((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NFemMeshesNew((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NFemMeshesNew((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHFemMeshNewIf GetFemMeshNew(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetFemMeshNew((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetFemMeshNew((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetFemMeshNew((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemMeshNewIf obj = new PHFemMeshNewIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRootNodeIf CreateRootNode(PHSolidIf root, PHRootNodeDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PHRootNodeDesc new_desc = new PHRootNodeDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PHRootNodeDesc new_desc = new PHRootNodeDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateRootNode((IntPtr) _thisArray[0], (IntPtr) root._thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRootNodeIf CreateRootNode(PHSolidIf root) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) root._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) root._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) root._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateRootNode_1((IntPtr) _thisArray[0], (IntPtr) root._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NRootNodes() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NRootNodes((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NRootNodes((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NRootNodes((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHRootNodeIf GetRootNode(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetRootNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetRootNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetRootNode((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHTreeNodeIf CreateTreeNode(PHTreeNodeIf parent, PHSolidIf child, PHTreeNodeDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
PHTreeNodeDesc new_desc = new PHTreeNodeDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
PHTreeNodeDesc new_desc = new PHTreeNodeDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateTreeNode((IntPtr) _thisArray[0], (IntPtr) parent._thisArray[0], (IntPtr) child._thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptr, 0);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHTreeNodeIf CreateTreeNode(PHTreeNodeIf parent, PHSolidIf child) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) child._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) child._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) child._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateTreeNode_1((IntPtr) _thisArray[0], (IntPtr) parent._thisArray[0], (IntPtr) child._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHTreeNodeIf obj = new PHTreeNodeIf(ptr, 0);
            if (obj.GetIfInfo() == PHRootNodeIf.GetIfInfoStatic()) {
				PHRootNodeIf appropriate_type = new PHRootNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHTreeNode1DIf.GetIfInfoStatic()) {
				PHTreeNode1DIf appropriate_type = new PHTreeNode1DIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointNodeIf.GetIfInfoStatic()) {
				PHBallJointNodeIf appropriate_type = new PHBallJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointNodeIf.GetIfInfoStatic()) {
				PHFixJointNodeIf appropriate_type = new PHFixJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointNodeIf.GetIfInfoStatic()) {
				PHHingeJointNodeIf appropriate_type = new PHHingeJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointNodeIf.GetIfInfoStatic()) {
				PHSliderJointNodeIf appropriate_type = new PHSliderJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointNodeIf.GetIfInfoStatic()) {
				PHPathJointNodeIf appropriate_type = new PHPathJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointNodeIf.GetIfInfoStatic()) {
				PHGenericJointNodeIf appropriate_type = new PHGenericJointNodeIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRootNodeIf CreateTreeNodes(PHSolidIf solid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateTreeNodes((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRootNodeIf obj = new PHRootNodeIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHGearIf CreateGear(PH1DJointIf lhs, PH1DJointIf rhs, PHGearDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
PHGearDesc new_desc = new PHGearDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
PHGearDesc new_desc = new PHGearDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateGear((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHGearIf CreateGear(PH1DJointIf lhs, PH1DJointIf rhs) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) lhs._thisArray[phSceneIf.sceneForStep], (IntPtr) rhs._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) lhs._thisArray[phSceneIf.sceneForBuffer], (IntPtr) rhs._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) lhs._thisArray[phSceneIf.sceneForGet], (IntPtr) rhs._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateGear_1((IntPtr) _thisArray[0], (IntPtr) lhs._thisArray[0], (IntPtr) rhs._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NGears() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NGears((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NGears((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NGears((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHGearIf GetGear(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetGear((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetGear((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetGear((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHGearIf obj = new PHGearIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHPathIf CreatePath(PHPathDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHPathDesc new_desc = new PHPathDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PHPathDesc new_desc = new PHPathDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreatePath((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHPathIf CreatePath() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreatePath_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NPaths() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NPaths((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NPaths((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NPaths((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHPathIf GetPath(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetPath((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetPath((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetPath((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHPathIf obj = new PHPathIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRayIf CreateRay(PHRayDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHRayDesc new_desc = new PHRayDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PHRayDesc new_desc = new PHRayDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateRay((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHRayIf CreateRay() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateRay_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NRays() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NRays((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NRays((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NRays((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHRayIf GetRay(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetRay((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetRay((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetRay((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHRayIf obj = new PHRayIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public bool SetPosesOfJointedSolids(PHSolidIf base_) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    char retStep = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) base_._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    char retBuffer = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) base_._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    char retGet = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) base_._thisArray[phSceneIf.sceneForGet]);
				});
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    char retStep = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) base_._thisArray[phSceneIf.sceneForStep]);
						});
	    char retBuffer = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) base_._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) base_._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					} else {
	    char retStep = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) base_._thisArray[phSceneIf.sceneForStep]);
	    char retBuffer = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) base_._thisArray[phSceneIf.sceneForBuffer]);
	    char retGet = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) base_._thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
					}
				}
			}
		} else {
	    char ret = SprExport.Spr_PHSceneIf_SetPosesOfJointedSolids((IntPtr) _thisArray[0], (IntPtr) base_._thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf CreateIKActuator(IfInfo ii, PHIKActuatorDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PHIKActuatorDesc new_desc = new PHIKActuatorDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PHIKActuatorDesc new_desc = new PHIKActuatorDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii, (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii, (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateIKActuator((IntPtr) _thisArray[0], (IntPtr) ii, (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf CreateIKActuator(IfInfo ii) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) ii);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) ii);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) ii);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateIKActuator_1((IntPtr) _thisArray[0], (IntPtr) ii);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NIKActuators() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NIKActuators((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NIKActuators((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NIKActuators((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHIKActuatorIf GetIKActuator(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetIKActuator((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetIKActuator((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetIKActuator((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKActuatorIf obj = new PHIKActuatorIf(ptr, 0);
            if (obj.GetIfInfo() == PHIKBallActuatorIf.GetIfInfoStatic()) {
				PHIKBallActuatorIf appropriate_type = new PHIKBallActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKHingeActuatorIf.GetIfInfoStatic()) {
				PHIKHingeActuatorIf appropriate_type = new PHIKHingeActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKSpringActuatorIf.GetIfInfoStatic()) {
				PHIKSpringActuatorIf appropriate_type = new PHIKSpringActuatorIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHIKEndEffectorIf CreateIKEndEffector(PHIKEndEffectorDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHIKEndEffectorDesc new_desc = new PHIKEndEffectorDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PHIKEndEffectorDesc new_desc = new PHIKEndEffectorDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateIKEndEffector((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHIKEndEffectorIf CreateIKEndEffector() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateIKEndEffector_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NIKEndEffectors() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NIKEndEffectors((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NIKEndEffectors((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NIKEndEffectors((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHIKEndEffectorIf GetIKEndEffector(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetIKEndEffector((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetIKEndEffector((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHIKEndEffectorIf obj = new PHIKEndEffectorIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public int NSkeletons() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NSkeletons((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NSkeletons((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NSkeletons((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHSkeletonIf GetSkeleton(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetSkeleton((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetSkeleton((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetSkeleton((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSkeletonIf CreateSkeleton(PHSkeletonDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
PHSkeletonDesc new_desc = new PHSkeletonDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
PHSkeletonDesc new_desc = new PHSkeletonDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrGet, 0);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrGet, 0);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateSkeleton((IntPtr) _thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHSkeletonIf CreateSkeleton() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrGet, 0);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptrGet, 0);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateSkeleton_1((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSkeletonIf obj = new PHSkeletonIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public double GetTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetTimeStepInv() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetTimeStepInv((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetTimeStepInv((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetTimeStepInv((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public double GetHapticTimeStep() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetHapticTimeStep((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetHapticTimeStep(double dt) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
						});
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					} else {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dt);
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dt);
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dt);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetHapticTimeStep((IntPtr) _thisArray[0], (double) dt);
		}
	}
	public uint GetCount() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    uint resultStep = (uint) SprExport.Spr_PHSceneIf_GetCount((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    uint resultGet = (uint) SprExport.Spr_PHSceneIf_GetCount((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    uint result = (uint) SprExport.Spr_PHSceneIf_GetCount((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetCount(uint count) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) count);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) count);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) count);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) count);
						});
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) count);
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) count);
					} else {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForStep], (uint) count);
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (uint) count);
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[phSceneIf.sceneForGet], (uint) count);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetCount((IntPtr) _thisArray[0], (uint) count);
		}
	}
	public void SetGravity(Vec3d accel) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_accel = new Vec3d(accel);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_accel);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_accel);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_accel);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_accel = new Vec3d(accel);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_accel);
						});
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_accel);
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_accel);
					} else {
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) accel);
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) accel);
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) accel);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetGravity((IntPtr) _thisArray[0], (IntPtr) accel);
		}
	}
	public Vec3d GetGravity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetGravity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new Vec3d(ptrStep, true);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetGravity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new Vec3d(ptrGet, true);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetGravity((IntPtr) _thisArray[0]);
            return new Vec3d(ptr, true);
		}
		throw new InvalidOperationException();
	}
	public void SetAirResistanceRateForVelocity(double rate) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
						});
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
					} else {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForVelocity((IntPtr) _thisArray[0], (double) rate);
		}
	}
	public void SetAirResistanceRateForAngularVelocity(double rate) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
						});
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
					} else {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) rate);
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) rate);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[0], (double) rate);
		}
	}
	public double GetAirResistanceRateForVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public double GetAirResistanceRateForAngularVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetAirResistanceRateForAngularVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetContactTolerance(double tol) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tol);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tol);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tol);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tol);
						});
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tol);
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tol);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tol);
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tol);
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tol);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactTolerance((IntPtr) _thisArray[0], (double) tol);
		}
	}
	public double GetContactTolerance() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetContactTolerance((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetContactTolerance((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetImpactThreshold(double vth) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
						});
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
					} else {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetImpactThreshold((IntPtr) _thisArray[0], (double) vth);
		}
	}
	public double GetImpactThreshold() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetImpactThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetImpactThreshold((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetFrictionThreshold(double vth) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
						});
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
					} else {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vth);
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vth);
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vth);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetFrictionThreshold((IntPtr) _thisArray[0], (double) vth);
		}
	}
	public double GetFrictionThreshold() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetFrictionThreshold((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetFrictionThreshold((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxVelocity(double vmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vmax);
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) vmax);
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) vmax);
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) vmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxVelocity((IntPtr) _thisArray[0], (double) vmax);
		}
	}
	public double GetMaxVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxAngularVelocity(double wmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) wmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) wmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) wmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) wmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) wmax);
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) wmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) wmax);
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) wmax);
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) wmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxAngularVelocity((IntPtr) _thisArray[0], (double) wmax);
		}
	}
	public double GetMaxAngularVelocity() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxAngularVelocity((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxAngularVelocity((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxForce(double fmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) fmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) fmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) fmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) fmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) fmax);
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) fmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) fmax);
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) fmax);
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) fmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxForce((IntPtr) _thisArray[0], (double) fmax);
		}
	}
	public double GetMaxForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxForce((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxMoment(double tmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tmax);
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) tmax);
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) tmax);
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) tmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxMoment((IntPtr) _thisArray[0], (double) tmax);
		}
	}
	public double GetMaxMoment() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxMoment((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxMoment((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxDeltaPosition(double dpmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dpmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dpmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dpmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dpmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dpmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dpmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dpmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dpmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dpmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaPosition((IntPtr) _thisArray[0], (double) dpmax);
		}
	}
	public double GetMaxDeltaPosition() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaPosition((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaPosition((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetMaxDeltaOrientation(double dqmax) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dqmax);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dqmax);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dqmax);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dqmax);
						});
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dqmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dqmax);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) dqmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) dqmax);
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) dqmax);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaxDeltaOrientation((IntPtr) _thisArray[0], (double) dqmax);
		}
	}
	public double GetMaxDeltaOrientation() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    double resultStep = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    double resultGet = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaOrientation((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    double result = (double) SprExport.Spr_PHSceneIf_GetMaxDeltaOrientation((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public int GetLCPSolver() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_GetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_GetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_GetLCPSolver((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetLCPSolver(int method) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) method);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) method);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) method);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) method);
						});
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) method);
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) method);
					} else {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) method);
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) method);
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) method);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetLCPSolver((IntPtr) _thisArray[0], (int) method);
		}
	}
	public int GetNumIteration() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_GetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_GetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_GetNumIteration((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetNumIteration(int n) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
						});
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
					} else {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) n);
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) n);
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) n);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetNumIteration((IntPtr) _thisArray[0], (int) n);
		}
	}
	public void SetStateMode(bool bConstraints) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bConstraints);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bConstraints);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bConstraints);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bConstraints);
						});
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bConstraints);
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bConstraints);
					} else {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) bConstraints);
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) bConstraints);
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) bConstraints);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetStateMode((IntPtr) _thisArray[0], (bool) bConstraints);
		}
	}
	public void EnableContactDetection(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_EnableContactDetection((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsContactDetectionEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHSceneIf_IsContactDetectionEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHSceneIf_IsContactDetectionEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHSceneIf_IsContactDetectionEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void EnableCCD(bool enable) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
					},
					() => {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
						});
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					} else {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForStep], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (bool) enable);
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[phSceneIf.sceneForGet], (bool) enable);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_EnableCCD((IntPtr) _thisArray[0], (bool) enable);
		}
	}
	public bool IsCCDEnabled() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    char retStep = SprExport.Spr_PHSceneIf_IsCCDEnabled((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return (retStep == 0) ? false : true;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    char retGet = SprExport.Spr_PHSceneIf_IsCCDEnabled((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return (retGet == 0) ? false : true;
				}
			}
		} else {
	    char ret = SprExport.Spr_PHSceneIf_IsCCDEnabled((IntPtr) _thisArray[0]);
	    return (ret == 0) ? false : true;
		}
		throw new InvalidOperationException();
	}
	public void SetBroadPhaseMode(int mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetBroadPhaseMode((IntPtr) _thisArray[0], (int) mode);
		}
	}
	public int GetBroadPhaseMode() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_GetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_GetBroadPhaseMode((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_GetBroadPhaseMode((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public void SetContactDetectionRange(Vec3f center, Vec3f extent, int nx, int ny, int nz) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3f new_center = new Vec3f(center);
// NewArgument equal 8 8
// is_struct
Vec3f new_extent = new Vec3f(extent);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3f new_center = new Vec3f(center);
// NewArgument equal 8 8
// is_struct
Vec3f new_extent = new Vec3f(extent);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
						});
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_center, (IntPtr) new_extent, (int) nx, (int) ny, (int) nz);
					} else {
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) center, (IntPtr) extent, (int) nx, (int) ny, (int) nz);
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) center, (IntPtr) extent, (int) nx, (int) ny, (int) nz);
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) center, (IntPtr) extent, (int) nx, (int) ny, (int) nz);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetContactDetectionRange((IntPtr) _thisArray[0], (IntPtr) center, (IntPtr) extent, (int) nx, (int) ny, (int) nz);
		}
	}
	public void SetMaterialBlending(int mode) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
					},
					() => {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
						});
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					} else {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) mode);
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (int) mode);
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) mode);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_SetMaterialBlending((IntPtr) _thisArray[0], (int) mode);
		}
	}
// feature:only_cs_ignore Step void 
	public void ClearForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_ClearForce((IntPtr) _thisArray[0]);
		}
	}
	public void GenerateForce() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_GenerateForce((IntPtr) _thisArray[0]);
		}
	}
	public void Integrate() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_Integrate((IntPtr) _thisArray[0]);
		}
	}
	public void IntegratePart1() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_IntegratePart1((IntPtr) _thisArray[0]);
		}
	}
	public void IntegratePart2() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_IntegratePart2((IntPtr) _thisArray[0]);
		}
	}
	public void Clear() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_Clear((IntPtr) _thisArray[0]);
		}
	}
	public int NEngines() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSceneIf_NEngines((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSceneIf_NEngines((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSceneIf_NEngines((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHEngineIf GetEngine(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetEngine((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHEngineIf obj = new PHEngineIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHConstraintEngineIf.GetIfInfoStatic()) {
				PHConstraintEngineIf appropriate_type = new PHConstraintEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGravityEngineIf.GetIfInfoStatic()) {
				PHGravityEngineIf appropriate_type = new PHGravityEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPenaltyEngineIf.GetIfInfoStatic()) {
				PHPenaltyEngineIf appropriate_type = new PHPenaltyEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKEngineIf.GetIfInfoStatic()) {
				PHIKEngineIf appropriate_type = new PHIKEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFemEngineIf.GetIfInfoStatic()) {
				PHFemEngineIf appropriate_type = new PHFemEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpEngineIf.GetIfInfoStatic()) {
				PHOpEngineIf appropriate_type = new PHOpEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHapticEngineIf.GetIfInfoStatic()) {
				PHHapticEngineIf appropriate_type = new PHHapticEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetEngine((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHEngineIf obj = new PHEngineIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHConstraintEngineIf.GetIfInfoStatic()) {
				PHConstraintEngineIf appropriate_type = new PHConstraintEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGravityEngineIf.GetIfInfoStatic()) {
				PHGravityEngineIf appropriate_type = new PHGravityEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPenaltyEngineIf.GetIfInfoStatic()) {
				PHPenaltyEngineIf appropriate_type = new PHPenaltyEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKEngineIf.GetIfInfoStatic()) {
				PHIKEngineIf appropriate_type = new PHIKEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFemEngineIf.GetIfInfoStatic()) {
				PHFemEngineIf appropriate_type = new PHFemEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpEngineIf.GetIfInfoStatic()) {
				PHOpEngineIf appropriate_type = new PHOpEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHapticEngineIf.GetIfInfoStatic()) {
				PHHapticEngineIf appropriate_type = new PHHapticEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetEngine((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHEngineIf obj = new PHEngineIf(ptr, 0);
            if (obj.GetIfInfo() == PHConstraintEngineIf.GetIfInfoStatic()) {
				PHConstraintEngineIf appropriate_type = new PHConstraintEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGravityEngineIf.GetIfInfoStatic()) {
				PHGravityEngineIf appropriate_type = new PHGravityEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPenaltyEngineIf.GetIfInfoStatic()) {
				PHPenaltyEngineIf appropriate_type = new PHPenaltyEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHIKEngineIf.GetIfInfoStatic()) {
				PHIKEngineIf appropriate_type = new PHIKEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFemEngineIf.GetIfInfoStatic()) {
				PHFemEngineIf appropriate_type = new PHFemEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHOpEngineIf.GetIfInfoStatic()) {
				PHOpEngineIf appropriate_type = new PHOpEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHapticEngineIf.GetIfInfoStatic()) {
				PHHapticEngineIf appropriate_type = new PHHapticEngineIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHConstraintEngineIf GetConstraintEngine() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetConstraintEngine((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHConstraintEngineIf obj = new PHConstraintEngineIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetConstraintEngine((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHConstraintEngineIf obj = new PHConstraintEngineIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetConstraintEngine((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHConstraintEngineIf obj = new PHConstraintEngineIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
// feature:only_cs_ignore GetGravityEngine PHGravityEngineIf 
	public PHPenaltyEngineIf GetPenaltyEngine() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetPenaltyEngine((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHPenaltyEngineIf obj = new PHPenaltyEngineIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetPenaltyEngine((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHPenaltyEngineIf obj = new PHPenaltyEngineIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetPenaltyEngine((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHPenaltyEngineIf obj = new PHPenaltyEngineIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
// feature:only_cs_ignore GetIKEngine PHIKEngineIf 
	public PHFemEngineIf GetFemEngine() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetFemEngine((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHFemEngineIf obj = new PHFemEngineIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetFemEngine((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHFemEngineIf obj = new PHFemEngineIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetFemEngine((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHFemEngineIf obj = new PHFemEngineIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHHapticEngineIf GetHapticEngine() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetHapticEngine((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHHapticEngineIf obj = new PHHapticEngineIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetHapticEngine((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHapticEngineIf obj = new PHHapticEngineIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetHapticEngine((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHHapticEngineIf obj = new PHHapticEngineIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHOpEngineIf GetOpEngine() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetOpEngine((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHOpEngineIf obj = new PHOpEngineIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetOpEngine((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHOpEngineIf obj = new PHOpEngineIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetOpEngine((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHOpEngineIf obj = new PHOpEngineIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHOpSpHashColliAgentIf GetOpColliAgent() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_GetOpColliAgent((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHOpSpHashColliAgentIf obj = new PHOpSpHashColliAgentIf(ptrStep, 0);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_GetOpColliAgent((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHOpSpHashColliAgentIf obj = new PHOpSpHashColliAgentIf(ptrGet, 0);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_GetOpColliAgent((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHOpSpHashColliAgentIf obj = new PHOpSpHashColliAgentIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHHapticPointerIf CreateHapticPointer() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSceneIf_CreateHapticPointer((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHHapticPointerIf obj = new PHHapticPointerIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void StepHapticLoop() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_StepHapticLoop((IntPtr) _thisArray[0]);
		}
	}
	public void StepHapticSync() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHSceneIf_StepHapticSync((IntPtr) _thisArray[0]);
		}
	}
    }
    public partial class PHSdkIf : SdkIf {
	public PHSdkIf() { _thisArray[0] = SprExport.Spr_new_PHSdkIf(); _flag = true; }
	public PHSdkIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSdkIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSdkIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSdkIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSdkIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSdkIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSdkIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSdkIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSdkIf(CsCastObject target) {
		return (target._info.Inherit(PHSdkIf.GetIfInfoStatic()) ? new PHSdkIf(target._thisArray[0], target._flag) : null);
	}
	~PHSdkIf() { if (_flag) { SprExport.Spr_delete_PHSdkIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSdkIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSdkIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
	    IntPtr ptr = SprExport.Spr_PHSdkIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSdkIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
// feature:only_cs_ignore CreateScene PHSceneIf 
// feature:only_cs_ignore CreateScene PHSceneIf 
	public int NScene() {
	    int result = (int) SprExport.Spr_PHSdkIf_NScene((IntPtr) _thisArray[0]);
	    return result;
	}
	public PHSceneIf GetScene(int i) {
	    IntPtr ptr = SprExport.Spr_PHSdkIf_GetScene((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSceneIf obj = new PHSceneIf(ptr, 0);
            return obj;
	}
	public void MergeScene(PHSceneIf scene0, PHSceneIf scene1) {
	    SprExport.Spr_PHSdkIf_MergeScene((IntPtr) _thisArray[0], (IntPtr) scene0._thisArray[0], (IntPtr) scene1._thisArray[0]);
	}
	public CDShapeIf CreateShape(IfInfo ii, CDShapeDesc desc) {
	    IntPtr ptr = SprExport.Spr_PHSdkIf_CreateShape((IntPtr) _thisArray[0], (IntPtr) ii, (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptr, 0);
            return obj;
	}
	public int NShape() {
	    int result = (int) SprExport.Spr_PHSdkIf_NShape((IntPtr) _thisArray[0]);
	    return result;
	}
	public CDShapeIf GetShape(int i) {
	    IntPtr ptr = SprExport.Spr_PHSdkIf_GetShape((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            CDShapeIf obj = new CDShapeIf(ptr, 0);
            return obj;
	}
// feature:only_cs_ignore CreateSdk PHSdkIf 
// feature:only_cs_ignore CreateSdk PHSdkIf 
	public static void RegisterSdk() {
	    SprExport.Spr_PHSdkIf_RegisterSdk();
	}
    }
    public partial class PHBoneIf : SceneObjectIf {
	public PHBoneIf() { _thisArray[0] = SprExport.Spr_new_PHBoneIf(); _flag = true; }
	public PHBoneIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHBoneIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHBoneIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHBoneIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHBoneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHBoneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHBoneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHBoneIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHBoneIf(CsCastObject target) {
		return (target._info.Inherit(PHBoneIf.GetIfInfoStatic()) ? new PHBoneIf(target._thisArray[0], target._flag) : null);
	}
	~PHBoneIf() { if (_flag) { SprExport.Spr_delete_PHBoneIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHBoneIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHBoneIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBoneIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBoneIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public void SetSolid(PHSolidIf solid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetSolid((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0]);
		}
	}
	public PHSolidIf GetSolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBoneIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBoneIf_GetSolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetSolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetProxySolid(PHSolidIf solid) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) solid._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) solid._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) solid._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetProxySolid((IntPtr) _thisArray[0], (IntPtr) solid._thisArray[0]);
		}
	}
	public PHSolidIf GetProxySolid() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBoneIf_GetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBoneIf_GetProxySolid((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetProxySolid((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHSolidIf obj = new PHSolidIf(ptr, 0);
            if (obj.GetIfInfo() == PHHapticPointerIf.GetIfInfoStatic()) {
				PHHapticPointerIf appropriate_type = new PHHapticPointerIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetJoint(PHJointIf joint) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) joint._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) joint._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) joint._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetJoint((IntPtr) _thisArray[0], (IntPtr) joint._thisArray[0]);
		}
	}
	public PHJointIf GetJoint() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBoneIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptrStep, phSceneIf.sceneForStep);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBoneIf_GetJoint((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptrGet, phSceneIf.sceneForGet);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetJoint((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHJointIf obj = new PHJointIf(ptr, 0);
            if (obj.GetIfInfo() == PH1DJointIf.GetIfInfoStatic()) {
				PH1DJointIf appropriate_type = new PH1DJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHBallJointIf.GetIfInfoStatic()) {
				PHBallJointIf appropriate_type = new PHBallJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHFixJointIf.GetIfInfoStatic()) {
				PHFixJointIf appropriate_type = new PHFixJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSpringIf.GetIfInfoStatic()) {
				PHSpringIf appropriate_type = new PHSpringIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHMateIf.GetIfInfoStatic()) {
				PHMateIf appropriate_type = new PHMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHHingeJointIf.GetIfInfoStatic()) {
				PHHingeJointIf appropriate_type = new PHHingeJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHSliderJointIf.GetIfInfoStatic()) {
				PHSliderJointIf appropriate_type = new PHSliderJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPathJointIf.GetIfInfoStatic()) {
				PHPathJointIf appropriate_type = new PHPathJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHGenericJointIf.GetIfInfoStatic()) {
				PHGenericJointIf appropriate_type = new PHGenericJointIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPointMateIf.GetIfInfoStatic()) {
				PHPointToPointMateIf appropriate_type = new PHPointToPointMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToLineMateIf.GetIfInfoStatic()) {
				PHPointToLineMateIf appropriate_type = new PHPointToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPointToPlaneMateIf.GetIfInfoStatic()) {
				PHPointToPlaneMateIf appropriate_type = new PHPointToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHLineToLineMateIf.GetIfInfoStatic()) {
				PHLineToLineMateIf appropriate_type = new PHLineToLineMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            if (obj.GetIfInfo() == PHPlaneToPlaneMateIf.GetIfInfoStatic()) {
				PHPlaneToPlaneMateIf appropriate_type = new PHPlaneToPlaneMateIf(obj._thisArray[0], obj._thisArray[1], obj._thisArray[2]);
				return appropriate_type;
            }
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetParent(PHBoneIf parent) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
						});
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
					} else {
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetParent((IntPtr) _thisArray[0], (IntPtr) parent._thisArray[0]);
		}
	}
	public PHBoneIf GetParent() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHBoneIf_GetParent((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHBoneIf_GetParent((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHBoneIf_GetParent((IntPtr) _thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public void SetLength(double length) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) length);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) length);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) length);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) length);
						});
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) length);
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) length);
					} else {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForStep], (double) length);
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (double) length);
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[phSceneIf.sceneForGet], (double) length);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetLength((IntPtr) _thisArray[0], (double) length);
		}
	}
	public void SetDirection(Vec3d dir) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_dir = new Vec3d(dir);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_dir);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_dir);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_dir);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_dir = new Vec3d(dir);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_dir);
						});
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_dir);
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_dir);
					} else {
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) dir);
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) dir);
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) dir);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetDirection((IntPtr) _thisArray[0], (IntPtr) dir);
		}
	}
	public void SetPosition(Vec3d pos) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
Vec3d new_pos = new Vec3d(pos);
// NewArgument equal 8 8
// is_struct
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pos);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pos);
					},
					() => {
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pos);
				});
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.isStepThreadExecuting) {
Vec3d new_pos = new Vec3d(pos);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) new_pos);
						});
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_pos);
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) new_pos);
					} else {
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) pos);
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) pos);
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) pos);
					}
				}
			}
		} else {
	    SprExport.Spr_PHBoneIf_SetPosition((IntPtr) _thisArray[0], (IntPtr) pos);
		}
	}
    }
    public partial class PHSkeletonIf : SceneObjectIf {
	public PHSkeletonIf() { _thisArray[0] = SprExport.Spr_new_PHSkeletonIf(); _flag = true; }
	public PHSkeletonIf(IntPtr ptr) : base(ptr, 0, false) {}
	public PHSkeletonIf(IntPtr ptr, bool flag) : base(ptr, 0, flag) {}
	public PHSkeletonIf(IntPtr ptr, int sceneIndex) : base(ptr, sceneIndex, false) {}
	public PHSkeletonIf(IntPtr ptr, int sceneIndex, bool flag) : base(ptr, sceneIndex, flag) {}
	public PHSkeletonIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2) : base(ptr0, ptr1, ptr2, false) {}
	public PHSkeletonIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, bool flag) : base(ptr0, ptr1, ptr2, flag) {}
	public PHSkeletonIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, false) {}
	public PHSkeletonIf(IntPtr ptr0, IntPtr ptr1, IntPtr ptr2, int ptr0Index, int ptr1Index, int ptr2Index, bool flag) : base(ptr0, ptr1, ptr2, ptr0Index, ptr1Index, ptr2Index, flag) {}
	public static implicit operator PHSkeletonIf(CsCastObject target) {
		return (target._info.Inherit(PHSkeletonIf.GetIfInfoStatic()) ? new PHSkeletonIf(target._thisArray[0], target._flag) : null);
	}
	~PHSkeletonIf() { if (_flag) { SprExport.Spr_delete_PHSkeletonIf(_thisArray[0]); _flag = false; } }
        public override string ToString() {
            IntPtr ptr = SprExport.Spr_PHSkeletonIf_ToString((IntPtr) _thisArray[0]);
            string bstr = Marshal.PtrToStringBSTR(ptr);
            SprExport.Spr_PHSkeletonIf_FreeString((IntPtr) ptr);
            return bstr;
        }
	public IfInfo GetIfInfo() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForStep]);
            return new IfInfo(ptrStep);
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_GetIfInfo((IntPtr) _thisArray[phSceneIf.sceneForGet]);
            return new IfInfo(ptrGet);
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSkeletonIf_GetIfInfo((IntPtr) _thisArray[0]);
            return new IfInfo(ptr);
		}
		throw new InvalidOperationException();
	}
	public static IfInfo GetIfInfoStatic() {
	    IntPtr ptr = SprExport.Spr_PHSkeletonIf_GetIfInfoStatic();
            return new IfInfo(ptr);
	}
	public int NBones() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    int resultStep = (int) SprExport.Spr_PHSkeletonIf_NBones((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    int resultGet = (int) SprExport.Spr_PHSkeletonIf_NBones((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    int result = (int) SprExport.Spr_PHSkeletonIf_NBones((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
	public PHBoneIf GetBone(int i) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_GetBone((IntPtr) _thisArray[phSceneIf.sceneForStep], (int) i);
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_GetBone((IntPtr) _thisArray[phSceneIf.sceneForGet], (int) i);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSkeletonIf_GetBone((IntPtr) _thisArray[0], (int) i);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHBoneIf CreateBone(PHBoneIf parent, PHBoneDesc desc) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
PHBoneDesc new_desc = new PHBoneDesc(desc);
// NewArgument equal 8 8
// is_struct
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
PHBoneDesc new_desc = new PHBoneDesc(desc);
// NewArgument equal 8 8
// is_struct
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) new_desc);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) new_desc);
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) new_desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep], (IntPtr) desc);
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer], (IntPtr) desc);
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet], (IntPtr) desc);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSkeletonIf_CreateBone((IntPtr) _thisArray[0], (IntPtr) parent._thisArray[0], (IntPtr) desc);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public PHBoneIf CreateBone(PHBoneIf parent) {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {;
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
// IfClass
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
				phSceneIf.AddCallbackForStepThread(
					() => {
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
					},
					() => {
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
				});
            if (ptrStep == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, phSceneIf.sceneForStep);
            return obj;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isSetFunctionCalledInSubThread = true;
					if (phSceneIf.stateForSwap != null) {
						SprExport.Spr_ObjectStatesIf_ReleaseState(phSceneIf.stateForSwap._thisArray[0], _thisArray[phSceneIf.sceneForGet]);
					}
					phSceneIf.callObjectStatesIf_Create = true;
					if (phSceneIf.isStepThreadExecuting) {
// IfClass
						phSceneIf.AddCallbackForSubThread(() => {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
						});
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrGet, phSceneIf.sceneForGet);
            return obj;
					} else {
	    IntPtr ptrStep = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForStep], (IntPtr) parent._thisArray[phSceneIf.sceneForStep]);
	    IntPtr ptrBuffer = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForBuffer], (IntPtr) parent._thisArray[phSceneIf.sceneForBuffer]);
	    IntPtr ptrGet = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[phSceneIf.sceneForGet], (IntPtr) parent._thisArray[phSceneIf.sceneForGet]);
            if (ptrGet == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptrStep, ptrBuffer, ptrGet, phSceneIf.sceneForStep, phSceneIf.sceneForBuffer, phSceneIf.sceneForGet);
            return obj;
					}
				}
			}
		} else {
	    IntPtr ptr = SprExport.Spr_PHSkeletonIf_CreateBone_1((IntPtr) _thisArray[0], (IntPtr) parent._thisArray[0]);
            if (ptr == IntPtr.Zero) { return null; } 
            PHBoneIf obj = new PHBoneIf(ptr, 0);
            return obj;
		}
		throw new InvalidOperationException();
	}
	public float GetGrabStrength() {
		PHSceneIf phSceneIf = GetCSPHSceneIf();
		if (phSceneIf.multiThreadMode) {
			var currentThread = Thread.CurrentThread;
			if (currentThread == phSceneIf.stepThread) {
	    float resultStep = (float) SprExport.Spr_PHSkeletonIf_GetGrabStrength((IntPtr) _thisArray[phSceneIf.sceneForStep]);
	    return resultStep;
			} else if (currentThread == phSceneIf.subThread) {
				lock (phSceneIf.phSceneLock) {
					phSceneIf.isGetFunctionCalledInSubThread = true;
	    float resultGet = (float) SprExport.Spr_PHSkeletonIf_GetGrabStrength((IntPtr) _thisArray[phSceneIf.sceneForGet]);
	    return resultGet;
				}
			}
		} else {
	    float result = (float) SprExport.Spr_PHSkeletonIf_GetGrabStrength((IntPtr) _thisArray[0]);
	    return result;
		}
		throw new InvalidOperationException();
	}
    }
	public partial class IfInfoToCsType {
		public static Dictionary<IntPtr, Type> mapPhysics = new Dictionary<IntPtr, Type>() {
			{PHEngineIf.GetIfInfoStatic(), typeof(PHEngineIf)},
			{PHConstraintEngineIf.GetIfInfoStatic(), typeof(PHConstraintEngineIf)},
			{PHGravityEngineIf.GetIfInfoStatic(), typeof(PHGravityEngineIf)},
			{PHPenaltyEngineIf.GetIfInfoStatic(), typeof(PHPenaltyEngineIf)},
			{PHIKEngineIf.GetIfInfoStatic(), typeof(PHIKEngineIf)},
			{PHFemEngineIf.GetIfInfoStatic(), typeof(PHFemEngineIf)},
			{PHOpEngineIf.GetIfInfoStatic(), typeof(PHOpEngineIf)},
			{PHFemMeshIf.GetIfInfoStatic(), typeof(PHFemMeshIf)},
			{PHFemMeshThermoIf.GetIfInfoStatic(), typeof(PHFemMeshThermoIf)},
			{PHFemMeshNewIf.GetIfInfoStatic(), typeof(PHFemMeshNewIf)},
			{PHFemBaseIf.GetIfInfoStatic(), typeof(PHFemBaseIf)},
			{PHFemVibrationIf.GetIfInfoStatic(), typeof(PHFemVibrationIf)},
			{PHFemThermoIf.GetIfInfoStatic(), typeof(PHFemThermoIf)},
			{PHFemPorousWOMoveIf.GetIfInfoStatic(), typeof(PHFemPorousWOMoveIf)},
			{PHFrameIf.GetIfInfoStatic(), typeof(PHFrameIf)},
			{PHBodyIf.GetIfInfoStatic(), typeof(PHBodyIf)},
			{PHSolidIf.GetIfInfoStatic(), typeof(PHSolidIf)},
			{PHShapePairForLCPIf.GetIfInfoStatic(), typeof(PHShapePairForLCPIf)},
			{PHSolidPairIf.GetIfInfoStatic(), typeof(PHSolidPairIf)},
			{PHSolidPairForLCPIf.GetIfInfoStatic(), typeof(PHSolidPairForLCPIf)},
			{PHHapticPointerIf.GetIfInfoStatic(), typeof(PHHapticPointerIf)},
			{PHShapePairForHapticIf.GetIfInfoStatic(), typeof(PHShapePairForHapticIf)},
			{PHSolidPairForHapticIf.GetIfInfoStatic(), typeof(PHSolidPairForHapticIf)},
			{PHHapticEngineIf.GetIfInfoStatic(), typeof(PHHapticEngineIf)},
			{PHIKEndEffectorIf.GetIfInfoStatic(), typeof(PHIKEndEffectorIf)},
			{PHIKActuatorIf.GetIfInfoStatic(), typeof(PHIKActuatorIf)},
			{PHIKBallActuatorIf.GetIfInfoStatic(), typeof(PHIKBallActuatorIf)},
			{PHIKHingeActuatorIf.GetIfInfoStatic(), typeof(PHIKHingeActuatorIf)},
			{PHIKSpringActuatorIf.GetIfInfoStatic(), typeof(PHIKSpringActuatorIf)},
			{PHConstraintIf.GetIfInfoStatic(), typeof(PHConstraintIf)},
			{PHConstraintsIf.GetIfInfoStatic(), typeof(PHConstraintsIf)},
			{PHContactPointIf.GetIfInfoStatic(), typeof(PHContactPointIf)},
			{PHJointIf.GetIfInfoStatic(), typeof(PHJointIf)},
			{PH1DJointIf.GetIfInfoStatic(), typeof(PH1DJointIf)},
			{PHHingeJointIf.GetIfInfoStatic(), typeof(PHHingeJointIf)},
			{PHSliderJointIf.GetIfInfoStatic(), typeof(PHSliderJointIf)},
			{PHPathIf.GetIfInfoStatic(), typeof(PHPathIf)},
			{PHPathJointIf.GetIfInfoStatic(), typeof(PHPathJointIf)},
			{PHGenericJointIf.GetIfInfoStatic(), typeof(PHGenericJointIf)},
			{PHBallJointIf.GetIfInfoStatic(), typeof(PHBallJointIf)},
			{PHFixJointIf.GetIfInfoStatic(), typeof(PHFixJointIf)},
			{PHSpringIf.GetIfInfoStatic(), typeof(PHSpringIf)},
			{PHMateIf.GetIfInfoStatic(), typeof(PHMateIf)},
			{PHPointToPointMateIf.GetIfInfoStatic(), typeof(PHPointToPointMateIf)},
			{PHPointToLineMateIf.GetIfInfoStatic(), typeof(PHPointToLineMateIf)},
			{PHPointToPlaneMateIf.GetIfInfoStatic(), typeof(PHPointToPlaneMateIf)},
			{PHLineToLineMateIf.GetIfInfoStatic(), typeof(PHLineToLineMateIf)},
			{PHPlaneToPlaneMateIf.GetIfInfoStatic(), typeof(PHPlaneToPlaneMateIf)},
			{PHTreeNodeIf.GetIfInfoStatic(), typeof(PHTreeNodeIf)},
			{PHRootNodeIf.GetIfInfoStatic(), typeof(PHRootNodeIf)},
			{PHTreeNode1DIf.GetIfInfoStatic(), typeof(PHTreeNode1DIf)},
			{PHHingeJointNodeIf.GetIfInfoStatic(), typeof(PHHingeJointNodeIf)},
			{PHSliderJointNodeIf.GetIfInfoStatic(), typeof(PHSliderJointNodeIf)},
			{PHPathJointNodeIf.GetIfInfoStatic(), typeof(PHPathJointNodeIf)},
			{PHGenericJointNodeIf.GetIfInfoStatic(), typeof(PHGenericJointNodeIf)},
			{PHBallJointNodeIf.GetIfInfoStatic(), typeof(PHBallJointNodeIf)},
			{PHFixJointNodeIf.GetIfInfoStatic(), typeof(PHFixJointNodeIf)},
			{PHGearIf.GetIfInfoStatic(), typeof(PHGearIf)},
			{PH1DJointLimitIf.GetIfInfoStatic(), typeof(PH1DJointLimitIf)},
			{PHBallJointLimitIf.GetIfInfoStatic(), typeof(PHBallJointLimitIf)},
			{PHBallJointConeLimitIf.GetIfInfoStatic(), typeof(PHBallJointConeLimitIf)},
			{PHBallJointSplineLimitIf.GetIfInfoStatic(), typeof(PHBallJointSplineLimitIf)},
			{PHBallJointIndependentLimitIf.GetIfInfoStatic(), typeof(PHBallJointIndependentLimitIf)},
			{PH1DJointMotorIf.GetIfInfoStatic(), typeof(PH1DJointMotorIf)},
			{PH1DJointNonLinearMotorIf.GetIfInfoStatic(), typeof(PH1DJointNonLinearMotorIf)},
			{PHHuman1DJointResistanceIf.GetIfInfoStatic(), typeof(PHHuman1DJointResistanceIf)},
			{PHBallJointMotorIf.GetIfInfoStatic(), typeof(PHBallJointMotorIf)},
			{PHBallJointNonLinearMotorIf.GetIfInfoStatic(), typeof(PHBallJointNonLinearMotorIf)},
			{PHHumanBallJointResistanceIf.GetIfInfoStatic(), typeof(PHHumanBallJointResistanceIf)},
			{PHSpringMotorIf.GetIfInfoStatic(), typeof(PHSpringMotorIf)},
			{PHOpObjIf.GetIfInfoStatic(), typeof(PHOpObjIf)},
			{PHOpParticleIf.GetIfInfoStatic(), typeof(PHOpParticleIf)},
			{PHOpGroupIf.GetIfInfoStatic(), typeof(PHOpGroupIf)},
			{PHOpHapticControllerIf.GetIfInfoStatic(), typeof(PHOpHapticControllerIf)},
			{PHOpHapticRendererIf.GetIfInfoStatic(), typeof(PHOpHapticRendererIf)},
			{PHOpAnimationIf.GetIfInfoStatic(), typeof(PHOpAnimationIf)},
			{PHOpSpHashColliAgentIf.GetIfInfoStatic(), typeof(PHOpSpHashColliAgentIf)},
			{PHRayIf.GetIfInfoStatic(), typeof(PHRayIf)},
			{PHSceneIf.GetIfInfoStatic(), typeof(PHSceneIf)},
			{PHSdkIf.GetIfInfoStatic(), typeof(PHSdkIf)},
			{PHBoneIf.GetIfInfoStatic(), typeof(PHBoneIf)},
			{PHSkeletonIf.GetIfInfoStatic(), typeof(PHSkeletonIf)},
		};
	}
}
